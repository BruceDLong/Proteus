// clip.dog

LinuxBuild: Platform='Linux' CPU='amd64' Lang='CPP' optimize='speed';
//SwingBuild: Platform='Java' CPU='JavaVM' Lang='Java' optimize='speed';
//AndroidBuild: Platform='Android' CPU='JavaVM' Lang='Java' optimize='power';
//iPhoneBuild: Platform='IOS' CPU='amd64' Lang='Swift' optimize='speed';

Title = "Proteus - Clip"
FileName = "clip"
Version = "0.8"
CopyrightMesg = "Copyright (c) 2015-2018 Bruce Long"
Authors = "Bruce Long"
Description = "CLIP - The Command Line Interface to Proteus"
ProgramOrLibrary = "program"

featuresNeeded = [Proteus, ReadMultiLine, Terminal, Unicode, Logger, BigNumbers, Threads, IOBuffer, EarleyParser]

LicenseText = `This file is part of the "Proteus suite" All Rights Reserved.`


runCode=`
    logMgr.init(OFile)
    log("Clip started")
    me Clip: clip
    clip.runAsComands()
`

infonDumpMode='text'

// enum entryColors {ColrDefault=1, ColrParsed, ColrResultOK, ColrResultErr, ColrMesg, ColrCtxtPrmpt, ColrLeftBar};
// enum entryTags {tagBlank=0, tagEditable=1, tagNotSaved=2, tagRestrictedSave=3, tagPublicSave=4, tagSpecialSave=5, tagResult=6, tagError=7, tagMesg=8, tagCtxt=9};

struct UserSource: inherits=Threads{
    our strBuf: userStream
    their readMultiLine: RML
    me bool: done
    void: init(our strBuf: UserStream, their readMultiLine: lineReader) <- {userStream <- UserStream; RML <- lineReader}
    void: run() <- {
        done <- false
        while(!done){
            me string: inputStr <- RML.readLines()
            // TODO: Handle commands: Help, quit, dict, set, show, etc.
            userStream.putStr(inputStr)
        }
        userStream.close()
    }
}

struct Clip{
    our infon: topInfon
    me ProteusCore: CORE

    void: extractSetting(me string: S, our Agent: agent, their readMultiLine: RML) <- {
        me stringScanner: strScnr
        strScnr.initialize(S)
        me string: cmd <- strScnr.scrapeAlphaNumSeq()
        if(cmd!="set"){return()}
        me string: key <- strScnr.scrapeAlphaNumSeq()
        if(key==""){return()}
        strScnr.skipPast("=")
        me string: value <- strScnr.scrapeAlphaNumSeq()
        if(value!=""){
            me int: retCode <- agent.setPreferences(key,value)
            if(retCode==1){RML.addUserMesgAndTopBar("Setting:"+key+" = "+value)}
            else if(retCode==2){RML.addUserMesgAndTopBar("Locale = "+unicodeMgr.localeString(agent.locale))}
        }
    }

    void: showSetting(me string: S, our Agent: agent, their readMultiLine: RML) <- {
        me stringScanner: strScnr
        strScnr.initialize(S)
        me string: cmd <- strScnr.scrapeAlphaNumSeq()
        if(cmd!="show"){return()}
        me string: setting <- strScnr.scrapeAlphaNumSeq()
        if(setting==""){return()}
        me string: msgStr
        if(setting=='locale'){msgStr<-"Locale = "+unicodeMgr.localeString(agent.locale)}
        else{
            if(agent.preferences.containsKey(setting)){msgStr<-"Setting:"+setting+" = "+agent.preferences[setting]}
            else{msgStr<-setting+" not defined."}
        }
        RML.addUserMesgAndTopBar(msgStr)
    }

    void: runStreaming()<-{
        me string: worldFileName <- "world.pr"
        CORE.init(worldFileName)
        their readMultiLine: RML
        Allocate(RML,1," >~$Ss=?#:")
        RML.initNCurses()
        RML.addUserMesg("The Proteus CLI. Type some infons, 'quit' or 'help':", 5+shiftLeft(8, 4))  // ColrMesg + tagMesg

        our strBuf:: userBuffer
        their UserSource:: readLineThread
        readLineThread.init(userBuffer, RML)
        readLineThread.start()
    }

    void: runAsComands()<-{
        me string: worldFileName <- "world.pr"
        CORE.init(worldFileName)
        their readMultiLine: RML
        Allocate(RML,1," >~$Ss=?#:")
        RML.initNCurses()
        RML.addUserMesg("The Proteus CLI. Type some infons, 'quit' or 'help':", 5+shiftLeft(8, 4))  // ColrMesg + tagMesg

        me bool: done <- false
        while(!done){
            me string: inputStr <- RML.readLines()
            trimWS(inputStr)
            log("___________________")
            log("$: "+inputStr)
            if(inputStr=="quit" or  RML.cmd==4){break()}  //rml.cmd==CTRLD
            else if (inputStr=="help"){}
            else if (inputStr=="dict"){}
            else if (inputStr.subStr(0,3)=="set"){extractSetting(inputStr, CORE.agent, RML)}
            else if (inputStr.subStr(0,4)=="show"){showSetting(inputStr, CORE.agent, RML)}
            else if (inputStr==""){continue()}
            else {
                me string: result <- toString(CORE.query(inputStr, true))
                RML.message <- result
                RML.addUserMesg(result, 3+shiftLeft(6, 4))  // ColrResultOK + tagResult
            }
        }
    }
}
