// clip.dog

LinuxBuild: Platform='Linux' CPU='amd64' Lang='CPP' optimize='speed';
//SwingBuild: Platform='Java' CPU='JavaVM' Lang='Java' optimize='speed';
//AndroidBuild: Platform='Android' CPU='JavaVM' Lang='Java' optimize='power';
//iPhoneBuild: Platform='IOS' CPU='amd64' Lang='Swift' optimize='speed';

Title = "Proteus - Clip"
FileName = "clip"
Version = "0.8"
CopyrightMesg = "Copyright (c) 2015-2021 Bruce Long"
Authors = "Bruce Long"
Description = "CLIP - The Command Line Interface to Proteus"
ProgramOrLibrary = "program"

featuresNeeded = [Proteus, ReadMultiLine, Terminal, Unicode, Logger, BigNumbers, Threads, IOBuffer, EarleyParser, List, GraphLogger]

LicenseText = `This file is part of the "Proteus suite" All Rights Reserved.`


runCode=`
    logMgr.init(OFile)
    log("Clip started")
    me Clip: clip
    CommandLineManager.processCmdLine(joinCmdStrings(argc, argv), false);
    CommandLineManager.defineOption("Clip", "RunMode", "-m", "--mode", "Specification of which mode to run in.")
    CommandLineManager.defineOption("Clip", "topFile", "-f", "--file", "The top-level file to load.")
    me string: topFile <- CommandLineManager.getOption("Slip", "topFile")
  //  if(topFile==""){topFile <- "world.pr"}
    me string: runMode <- CommandLineManager.getOption("Clip", "RunMode")
    if(runMode == "stream"){
        log("Running in streaming mode")
        clip.runStreaming(topFile)
    } else if(runMode == "command"){
        log("Running in command mode")
        clip.runAsComands(topFile)
    } else {
        log("Default to running in command mode without a command line flag specified")
        log(runMode)
        clip.runAsComands(topFile)
    }
`

infonDumpMode='text'

// enum entryColors {ColrDefault=1, ColrParsed, ColrResultOK, ColrResultErr, ColrMesg, ColrCtxtPrmpt, ColrLeftBar};
// enum entryTags {tagBlank=0, tagEditable=1, tagNotSaved=2, tagRestrictedSave=3, tagPublicSave=4, tagSpecialSave=5, tagResult=6, tagError=7, tagMesg=8, tagCtxt=9};

struct Clip{
    our infon: topInfon
    me ProteusCore: CORE

    void: extractSetting(me string: S, our Agent: agent, their readMultiLine: RML) <- {
        me stringScanner: strScnr
        strScnr.initialize(S)
        me string: cmd <- strScnr.scrapeAlphaNumSeq()
        if(cmd!="set"){return()}
        me string: key <- strScnr.scrapeAlphaNumSeq()
        if(key==""){return()}
        strScnr.skipPast("=")
        me string: value <- strScnr.scrapeAlphaNumSeq()
        if(value!=""){
            me int: retCode <- agent.setSetting(key,value)
            if(retCode==1){RML.addUserMesgAndTopBar("Setting:"+key+" = "+value)}
            else if(retCode==2){RML.addUserMesgAndTopBar("Locale = "+unicodeMgr.localeString(agent.locale))}
        }
    }

    void: showSetting(me string: S, our Agent: agent, their readMultiLine: RML) <- {
        me stringScanner: strScnr
        strScnr.initialize(S)
        me string: cmd <- strScnr.scrapeAlphaNumSeq()
        if(cmd!="show"){return()}
        me string: setting <- strScnr.scrapeAlphaNumSeq()
        if(setting==""){return()}
        me string: msgStr
        if(setting=='locale'){msgStr<-"Locale = "+unicodeMgr.localeString(agent.locale)}
        else{
            if(agent.settings.containsKey(setting)){msgStr<-"Setting:"+setting+" = "+agent.settings[setting]}
            else{msgStr<-setting+" not defined."}
        }
        RML.addUserMesgAndTopBar(msgStr)
    }

    void: runStreaming(me string: worldFileName)<-{
        CORE.init(worldFileName, false)

        // The main thread supplies the strBuf and topInfon.
        // After starting parseAndExtractor.start()
        // Start a normalize thread on TopInfon. Then, the main thread
        // begins filling the strBuf.
        me strBuf: userStream; userStream.init("user-stream")
        our infon:: topInfon
        me Threaded_infonParseAndExtractor: parseAndExtractor
        parseAndExtractor.start(CORE.parser, userStream, topInfon)

        their readMultiLine: RML
        Allocate(RML,1," >~$Ss=?#:")
        RML.initNCurses()
        RML.addUserMesg("The Proteus CLI. Type some infons, 'quit' or 'help':", 5+shiftLeft(8, 4))  // ColrMesg + tagMesg
        me bool: done <- false
        while(!done){
            me string: inputStr <- RML.readLines()
            // TODO: Handle commands: Help, quit, dict, set, show, etc.
            if(inputStr=="quit" or  RML.cmd==4){break()}  //rml.cmd==CTRLD
            inputStr <+- "\n"
            userStream.putStr(inputStr)
        }
        userStream.close()
        log("Parsed Infon:"+toString(topInfon))
        log("Waiting for threads To End")
        // We need waitForNormalizeToFinish()
        // could call parseAndExtractor.waitForExtractCompletion
        parseAndExtractor.waitForThreadsToExit()
    }

    void: runAsComands(me string: worldFileName)<-{
        CORE.init(worldFileName, false)
        their readMultiLine: RML
        Allocate(RML,1," >~$Ss=?#:")
        RML.initNCurses()
        RML.addUserMesg("The Proteus CLI. Type some infons, 'quit' or 'help':", 5+shiftLeft(8, 4))  // ColrMesg + tagMesg

        me bool: done <- false
        while(!done){
            me string: inputStr <- RML.readLines()
            trimWS(inputStr)
            log("___________________")
            log("$: "+inputStr)
            if(inputStr=="quit" or  RML.cmd==4){break()}  //rml.cmd==CTRLD
            else if (inputStr=="help"){}
            else if (inputStr=="dict"){}
            else if (inputStr.subStr(0,3)=="set"){extractSetting(inputStr, CORE.agent, RML)}
            else if (inputStr.subStr(0,4)=="show"){showSetting(inputStr, CORE.agent, RML)}
            else if (inputStr==""){continue()}
            else {
                me string: result <- toString(CORE.query(inputStr, true))
                RML.message <- result
                RML.addUserMesg(result, 3+shiftLeft(6, 4))  // ColrResultOK + tagResult
            }
        }
    }
}
