/- clip.dog

LinuxBuild: Platform='Linux' CPU='amd64' Lang='CPP' optimize='speed';
/-SwingBuild: Platform='Java' CPU='JavaVM' Lang='Java' optimize='speed';
/-AndroidBuild: Platform='Android' CPU='JavaVM' Lang='Java' optimize='power';
/-iPhoneBuild: Platform='IOS' CPU='amd64' Lang='Swift' optimize='speed';

Title = "Proteus - Clip"
FileName = "clip"
Version = "0.8"
CopyrightMesg = "Copyright (c) 2015-2018 Bruce Long"
Authors = "Bruce Long"
Description = "CLIP - The Command Line Interface to Proteus"
ProgramOrLibrary = "program"

featuresNeeded = [Proteus, ReadMultiLine, Terminal, Unicode, Logger]

LicenseText = `This file is part of the "Proteus suite" All Rights Reserved.`


runCode=`
    logMgr.init(OFile)
    log("Clip started")
    runClip()
`


/- enum entryColors {ColrDefault=1, ColrParsed, ColrResultOK, ColrResultErr, ColrMesg, ColrCtxtPrmpt, ColrLeftBar};
/- enum entryTags {tagBlank=0, tagEditable=1, tagNotSaved=2, tagRestrictedSave=3, tagPublicSave=4, tagSpecialSave=5, tagResult=6, tagError=7, tagMesg=8, tagCtxt=9};

struct GLOBAL{
    our infon: topInfon
    me ProteusCore: CORE
    void: runClip()<-{
        me string: resourceDir <- "WORLD.pr"
        CORE.init(resourceDir)
        their readMultiLine: RML
        Allocate(RML,1," >~$Ss=?#:")
        RML.initNCurses()
        RML.addUserMesg("The Proteus CLI. Type some infons, 'quit' or 'help':", 5+shiftLeft(8, 4))  /- ColrMesg + tagMesg

        me bool: done <- false
        while(!done){
            me string: inputStr <- RML.readLines()
            if(inputStr=="quit" or  RML.cmd==4){break()}  /-rml.cmd==CTRLD
            else if (inputStr=="help"){}
            else if (inputStr=="dict"){}
            else if (inputStr==""){continue()}
            else{
                our infon: crntInfon <- CORE.parseAndExtract(inputStr)
                if(crntInfon!=NULL){
                    CORE.a.appendToWorld(crntInfon)
                    CORE.a.normalize(crntInfon)
                    me string:result <- CORE.a.printInfon(crntInfon) + "   SIZE:" + CORE.a.printPureInfon(crntInfon.size(), NULL)
                    RML.addUserMesg(result, 3+shiftLeft(6, 4))  /- ColrResultOK + tagResult
                } else {
                    RML.message <- "Parse Error:" + CORE.parser.errorMesg + " at line " + toString(CORE.parser.errLineNum) + ":" + toString(CORE.parser.errCharPos)
                }
            }
        }
    }
}
