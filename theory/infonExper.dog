// infonExper.dog

LinuxBuild: Platform='Linux' CPU='amd64' Lang='CPP' LangVersion='GNU' optimize='speed';

Title = "infon Experimenter"
FileName = "infonExper"
Version = "0.8"
CopyrightMesg = "Copyright (c) 2021 Bruce Long"
Authors = "Bruce Long"
Description = "Run experiments on infons"
ProgramOrLibrary = "program"

featuresNeeded = [Logger, GUI_ToolKit, Dashboard, List]

LicenseText = `All Rights Reserved.`


mainStyle = {}
runCode=`
    logMgr.init(OFile)
    log("infonExper started")
    //~ me iExp: exp
    //~ exp.run()

    //~ me testConstructing: testCtring // Uncomment these two lines to print combinations
    //~ testCtring.run()

    me testQuotients: testQ
    testQ.doTest()
`

do makeStyler(mainStyle)
do makeGUI(GUI_Spec)

struct GLOBAL{

    me string:zeroOrOneMode <- "zero" // Change to switch mode

    me List<me cdColor>: cosetColors

    me int: globalItemIdx <- 0 // Used to check which item is being processed

    void: drawArrow(their GUI_ctxt: cr, me int: startX, me int: startY, me int: endX, me int: endY) <- {
        me double: tipLength <- 10
        me double: tipAngle <- 0.35

        me double: angle <- atan2(double(endY) - double(startY), double(endX) - double(startX)) + 3.14159265359

        me double: x1 <- double(endX) + tipLength * cos(angle - tipAngle)
        me double: y1 <- double(endY) + tipLength * sin(angle - tipAngle)
        me double: x2 <- double(endX) + tipLength * cos(angle + tipAngle)
        me double: y2 <- double(endY) + tipLength * sin(angle + tipAngle)

        cr.moveTo(startX, startY)
        cr.lineTo(endX, endY)
        cr.lineTo(x1, y1)
        cr.lineTo(x2, y2)
        cr.lineTo(endX, endY)
        cr.closePath()
        cr.fillKeep()
        cr.strokeNow()
    }

    bool: isSmallPrime(me int: n) <- {
        if(n==3 or n==5 or n==7 or n==11 or n==13){return(true)}
        return(false)
    }
}

struct inf{
    our inf: baseline
    me List<our inf>: items
    me flag: isBase
    me flag: allIdent

    me mode[dFull, dQuotient, dDivisor]: dispMode
    me int: dispArg

    me bool: isValid(me int: val) <- {
        me int: size <- items.size()

             me int: zeroIDX <- indexOf(baseline.items[0]) // Find 0 in items
             me int: prevIDX <- baseline.indexOf(items[negMod(zeroIDX-1,size)])

        our inf: startItm <- items[0]
        our inf: crntBaseItm <- startItm
        our inf: crntItm <- items[indexOf(crntBaseItm)]
        withEach idx in RANGE(0..size){

    //~ print("\n     idx:", idx, "   Base idx:", baseline.indexOf(crntBaseItm), "\t(", crntBaseItm.mySymbol(), ")",
                              //~ "   val idx:",  indexOf(crntItm), "\t(", crntItm.mySymbol(), ")"
    //~ )
            if(crntItm !== crntBaseItm){
    //            print("\n\n")
               // print("INV: *",size,"+",val," ERR: items[",idx,"] = ",items[idx].mySymbol(), " !=== ",crntBaseItm.mySymbol(), "\n")
                return(false)
            }
            crntItm <- findNext(crntItm, 1, size)

            crntBaseItm <- baseline.findNext(crntBaseItm, val, size)
            if(crntBaseItm===startItm){
                crntBaseItm <- baseline.findNext(crntBaseItm, 1, size)
                startItm <- crntBaseItm
            }
        }
     //   print("\n\n")
        return(true)
    }

    void: initAsBaseline(me int: size, our inf: myself) <- {
        baseline <- myself
        isBase <- true
        items.clear()
        withEach count in RANGE(0..size){
            our inf:: itm   // allocate a null inf
            items.append(itm)
        }
    }
    void: initAscopyOf(our inf: orig) <- {
        me int: size <- orig.items.size()
        baseline <- orig.baseline
        items.clear()
        withEach count in RANGE(0..size){
            items.append(orig.items[count])
        }
    }
    void: initAsQuotientBaseLine(our inf: base, me int: size) <- {
        baseline <- base
    }

    me int: indexOf(their inf: item) <- {
        me int: size <- items.size()
        if(size==0){print("\n\nCannot take index of inf with no items.\n")}
        withEach idx in RANGE(0..size){
            if(item===items[idx]){return(idx)}
        }
        print("Index of ",item.mySymbol()," not found in:")
        withEach idx in RANGE(0..size){print(items[idx].mySymbol(),"  ")}
        print("\n")
        return(-1)
    }

    me int: findNextIdx(their inf: crnt, me int: n, me int: size) <- {
        me int: crntPos <- indexOf(crnt)
        if(crntPos==-1){print("\n\nCould not find index of arg.\n")}
        me int: nextPos <- (crntPos+n)%size
        return(nextPos)
    }

    our inf: findNext(their inf: crnt, me int: n, me int: size) <- {
        me int: nextPos <- findNextIdx(crnt, n, size)
        return(items[nextPos])
    }

    void: clear()<-{baseline <-NULL; items.clear()}

    void: initInf(our inf: base, me int: size, me int: value)<-{
        //print("initializing *", size, "+", value, ":" )
        baseline <- base
        our inf: startItm <- baseline.items[0]
        our inf: crntItm <- startItm
        withEach idx in RANGE(0..size){
            if(zeroOrOneMode=="zero"){items.append(crntItm)}
            crntItm <- baseline.findNext(crntItm, value, size)
            //print(toString(baseline.indexOf(crntItm))+" ")
            if(zeroOrOneMode!="zero"){items.append(crntItm)}
            if(crntItm===startItm){
                crntItm <- baseline.findNext(crntItm, 1, size)
                startItm <- crntItm
            }
        }
        if(value==0){allIdent<-true}
        //print("\n")
    }

    void: initWithBase(me int: size, me int: value) <- {
        our inf:: bLine
        bLine.initAsBaseline(size, bLine)
        initInf(bLine, size, value)
    }

    void: initAsCoset(our inf: parent, me int: size, me int: offset) <- {
        clear()
        me int: quotient <- parent.items.size()/size
        baseline <- parent //.baseline
        withEach pos in RANGE(0..size){
            items.append(parent.items[pos*quotient+offset])
        }
    }

    void: initAsCosets(our inf: parent, me int: size, our inf: myself) <- {
        clear()
        me int: quotient <- size //parent.items.size()/size
        baseline <- myself
        withEach pos in RANGE(0..size){
            our inf:: itm; itm.initAsCoset(parent, quotient, pos)
            items.append(itm)
        }
    }

    me int: numItemsInCoset() <- {
        me int: size <- items.size()
        me int: val <- value()
        our inf: startItm <- baseline.items[0]
        our inf: crntItm <- startItm
        me int: count <- 0
        withEach idx in RANGE(0..size){
            count <+- 1
            crntItm <- baseline.findNext(crntItm, val, size)
            if(crntItm===startItm){
                return(count)
            }
        }
        return(-1)
    }

    void: initAsQuotient(our inf: parent, me int: divisor) <-{
        me int: parentSize <- parent.items.size()
        me int: resultSize <- parentSize/divisor

        our inf: startItm <- parent.items[0%parentSize]
        our inf: crntItm <- startItm
        our inf:: bLine
        bLine.initAsBaseline(resultSize, bLine)
        baseline <- bLine
        me List<me int>:baseItems
    //    print("  QUOT               [")
        withEach idx in RANGE(0..resultSize){
            me int: newIDX <- parent.baseline.indexOf(crntItm)
     //       print("%",newIDX," ",parent.baseline.items[newIDX].mySymbol(),"   ")
            baseItems.append(newIDX)
            items.append(crntItm)
            crntItm <- parent.findNext(crntItm, divisor, parentSize)
            if(crntItm===startItm){
                crntItm <- parent.findNext(crntItm, 1, parentSize)
                startItm <- crntItm
            }
        }
   //     print("]\n")

        me int: count <- 0
        withEach item in parent.baseline.items{
            withEach result in baseItems{
                if(item.mySymbol()==parent.baseline.items[result].mySymbol()){
                    baseline.items[count] <- parent.baseline.items[result]
                    count <+- 1
                    break()
                }
            }
        }

    }

//     void: initAsDivisor(our inf: parent, me int: quotient, me int:phase, me int: projValue) <-{
//         // Determine the roles of value and base for flexibility
//         our inf: val <- parent; // Default: use parent for value
//         our inf: base <- parent.baseline; // Default: use baseline for base

//         // Adjust size calculations based on the current roles
//         me int: parentSize <- val.items.size()
//         me int: resultSize <- parentSize/quotient

//         if (parentSize % quotient != 0) {
//             print("Warning: Parent size is not divisible by the quotient. Results may be incorrect.\n")
//         }

//         // Determine the starting item based on the phase
//         me int:startIndex <- (phase * resultSize) % parentSize
//         our inf: prevItem <- NULL
//         our inf: startItm <- val.items[startIndex]
//         our inf: crntItm <- startItm
//         // Initialize the baseline and result arrays
//         our inf:: bLine
//         bLine.initAsBaseline(resultSize, bLine)
//         baseline <- bLine
//         me List<me int>:baseItems
//         me bool: doCarry <- false
//  //       print("  DIV:  [")
//         // Collect the divisor items
//         me int: crntInfIdx <- 0
//         me int: prevInfIdx <- 0
//         withEach idx in RANGE(0..resultSize){
//             // determine if there are more than 1 coset
//             if(idx == 0){}

//             // Add the current item to the result
//             me int: newIDX <- base.indexOf(crntItm)
//  //           print("%",newIDX," ",base.items[newIDX].mySymbol(),"   ")

//             baseItems.append(newIDX)
//             items.append(crntItm)
//             // Find the next item in the value array
//             prevInfIdx <- crntInfIdx
//             crntInfIdx <- val.findNextIdx(crntItm, 1, parentSize)
//             crntItm <- val.items[crntInfIdx]

//             // Determine if we need to unwrap a carry
//             if(!doCarry and prevInfIdx!=0 and prevInfIdx < crntInfIdx){
//                 me int: crntNumItems <- idx
//                 me int: projectedNumCosets <- resultSize / crntNumItems
//                 if(crntNumItems*projectedNumCosets < resultSize){
//                     if(parentSize != resultSize){  // Filter last value -- because reverse order causes false positive
//                       print("DoCarry: ",prevInfIdx," ",crntInfIdx,"   ID:",globalItemIdx,"\n")
//                         doCarry <- true
//                     }
//                 }
//             }
//         }
// //        print("]\n")

//         // Map the collected items back to the baseline
//         our inf: lastItem <- base.items[baseItems[baseItems.size()-1]]
//         me int: lastIdx <- base.indexOf(lastItem)
//         allIdent <- (lastIdx <= quotient)
//    //     if(allIdent){print(" ALLIDENT ")}
   
//         me int: count <- 0
//         me int: idx <- 0
//         withEach item in parent.baseline.items{
//             withEach result in baseItems{
//                 if(item.mySymbol()==parent.baseline.items[result].mySymbol()){
//                     if(doCarry and lastItem.mySymbol()==item.mySymbol() and (idx == 1) and count+1<resultSize){
//                         print(" TAILED ",lastItem.mySymbol(), " idx:",idx," resultSize:",resultSize ,"\n")

//                     }
//                     else {
//                         baseline.items[count] <- parent.baseline.items[result]
//                         count <+- 1
//                     }
//                     break()
//                 }
//             }
//             idx <+- 1
//         }
//         if(count < baseItems.size()){
//             baseline.items[count] <- lastItem
//      //       print("SET baseline.items[",count,"] to ",lastItem.mySymbol(),"\n")
//         }
//     print(stringifyFull("Result infon"),"\n")

//     }


me int: findCycleID(our inf: item, our inf: parent, me int: parentProjValue) <-{
    me int: idx <- parent.indexOf(item)
    if(idx == -1){
        print("Error: Item not found in parent.items\n")
        return(0)
    }
    me List<me int>: visited
    me int: cycleID <- 0
    me int: size <- parent.items.size()
    me int: maxIterations <- size  // Prevent infinite loop
    me int: iterCount <- 0
    while(!visited.contains(idx) and iterCount < maxIterations){
        visited.append(idx)
        our inf: nextItem <- parent.findNext(parent.items[idx], parentProjValue, size)
        idx <- parent.indexOf(nextItem)
        if(idx == -1){
            print("Error: Next item not found in parent.items\n")
            return(cycleID)
        }
        if(idx == visited[0]){
            cycleID <+- 1
            visited.clear()
        }
        iterCount <+- 1
    }
    if(iterCount >= maxIterations){
        print("Error: Max iterations reached in findCycleID\n")
    }
    return(cycleID)
}

void: initAsDivisor(our inf: parent, me int: quotient, me int: phase, me int: projValue) <-{
    // Initialize
    our inf: val <- parent
    our inf: base <- parent.baseline
    me int: parentSize <- val.items.size()
    me int: resultSize <- parentSize/quotient
    if (parentSize % quotient != 0) {
        print("Warning: Parent size not divisible by quotient.\n")
    }
    me int: startIndex <- (phase * resultSize) % parentSize
    our inf: startItm <- val.items[startIndex]
    our inf: crntItm <- startItm
    our inf:: bLine
    bLine.initAsBaseline(resultSize, bLine)
    baseline <- bLine
    me int: parentValue <- parent.value()
    me List<me int>: baseItems
    me List<me int>: cycleIndices
    me bool: doCarry <- false
    me int: crntInfIdx <- 0
    me int: prevInfIdx <- 0
    // Collect items and track cycles
    me List<me int>: cycleGroups
    me List<our inf>: items
    withEach idx in RANGE(0..resultSize){
        me int: newIDX <- base.indexOf(crntItm)
        baseItems.append(newIDX)
        items.append(crntItm)
        // Find cycle using parent’s permutation
        me int: cycleID <- findCycleID(crntItm, parent, parentValue)
        cycleGroups.append(cycleID)
        prevInfIdx <- crntInfIdx
        crntInfIdx <- val.findNextIdx(crntItm, 1, parentSize)
        crntItm <- val.items[crntInfIdx]
        // Detect partial cycles
        if(idx > 0 and cycleGroups[idx] != cycleGroups[idx-1] and idx < resultSize-1){
            doCarry <- true
            cycleIndices.append(idx)
        }
    }
    // Reorder for partial cycles
    me List<me int>: newBaseItems
    me List<our inf>: completeItems
    me List<our inf>: partialItems
    withEach i in RANGE(0..resultSize){
        if(cycleIndices.contains(i)){
            partialItems.append(items[i])
            newBaseItems.append(baseItems[i])
        } else {
            completeItems.append(items[i])
            newBaseItems.append(baseItems[i])
        }
    }
    // Reorder items explicitly
    items.clear()
    withEach i in RANGE(0..completeItems.size()){
        items.append(completeItems[i])
    }
    withEach i in RANGE(0..partialItems.size()){
        items.append(partialItems[i])
    }
    baseItems <- newBaseItems
    // Generate S-IFY for validation (printed)
    me List<me int>: sify
    me int: size <- resultSize
    withEach i in RANGE(0..size){
        me int: nextIdx <- baseline.findNextIdx(items[i], projValue, size)
        sify.append(nextIdx)
    }
    // Map to baseline
    me int: count <- 0
    withEach item in parent.baseline.items{
        withEach result in baseItems{
            if(item.mySymbol() == parent.baseline.items[result].mySymbol()){
                baseline.items[count] <- parent.baseline.items[result]
                count <+- 1
                break()
            }
        }
    }
    // Validate permutation
    if(!isValid(projValue)){
        print("Invalid permutation for *", resultSize, "+", projValue, "\n")
    } else {
        print("Valid permutation for *", resultSize, "+", projValue, "\n")
    }
    print(stringifyFull("Result infon"),"\n")
}


    me int: negMod(me int:val, me int:mod) <- {
        if(val<0){return(val+mod)}
        return(val%mod)
    }

    me int: value() <- {
        me int: size <- items.size()
        if(zeroOrOneMode=="one"){
            if(size==1){return(0)}
            me int: count <- 0
             me int: zeroIDX <- indexOf(baseline.items[0]) // Find 0 in items
             if(zeroIDX==-1){print("\nAt: Val1\n"); exit(1);}
             me int: prevIDX <- baseline.indexOf(items[negMod(zeroIDX-1,size)])
             if(prevIDX==-1){print("\nAt: Val2\n"); exit(1);}
             //print("  ### zeroIDX:",zeroIDX, "   prevIDX:", prevIDX,"\n")
             return(size-prevIDX)


            our inf: end <- items[0]
            me int: endIDX   <- baseline.indexOf(end)
           // print("  ### Start:",startIDX, "   End:", endIDX,"\n")
           // return(abs((startIDX+5) - endIDX))
            our inf: crnt <- items[0]
            //our inf: crnt <- items[indexOf(baseline.items[0])]
            while(count < size and !(crnt===baseline.items[count % size])){
                count <+- 1
            }
            return(count)
        }
        else if(zeroOrOneMode=="zero"){
            if(size==1){return(0)}
             me int: zeroIDX <- indexOf(baseline.items[0]) // Find 0 in items
             if(zeroIDX==-1){print("\nAt: Val3\n"); exit(1);}
             me int: prevIDX <- baseline.indexOf(items[negMod(zeroIDX+1,size)])
             if(prevIDX==-1){print("\nAt: Val4\n"); print("in ",mySymbol(),"\n"); exit(1);}
             if(prevIDX==1){
     //            if(allIdent){prevIDX <- 0}
             }
             return(prevIDX)
        }
        return(-1)
    }

    me string: stringify() <- {
        if(self==NULL){return("NULL")}
        me int: size <- items.size()
        if(size==0){
            me string: mSym <- mySymbol()
            me int: msLen <- mSym.size()-3
            me string: digits <- mSym.subStr(3, msLen)
            me int: val <- stoi(digits)-1
            if(val==9){msLen <-- 1}
            me string: result <- "#"+ toString(val)
            withEach p in RANGE(msLen..2){ result <+- " "}
            return(result)
        }
        me string: S <- "*"
        S <+- toString(size)
        me int: val <- value()
        S <+- "+" + toString(val)
        return(S)
    }

    me string: stringifyByPos(our inf: base) <- {
        if(self==NULL){return("NULL")}
        me int: size <- items.size()
        if(size==0){
            me int: val <- base.indexOf(this)
            me string: result <- "%"+ toString(val)+"  "
            return(result)
        }
        return(stringify())
    }

    me string: stringifyLong(me int: depth) <- {
        me string: S <- stringify()+":["
        withEach idx in RANGE(0..items.size()){
            if(depth>0){
                S <+- items[idx].stringifyLong(depth-1)+" "
            }else{
                //S <+- items[idx].stringify()+" "
                S <+- items[idx].stringifyByPos(baseline)+" "
            }
        }
        S <+- "]"
        me int: val <- value()
        if(!isValid(val)){print(":INVALID<",val,"> ")}
        return(S)
    }

    me string: stringifyFull(me string: label) <- {
        me string: S <- ""
        S <+- "####################### "+label+"\n"
        S <+- "S-IFY: "+stringifyLong(0)+"\n"
        S <+- " BASE:  [";
        withEach item2 in baseline.items{S <+- item2.mySymbol()+"\t"}
        S <+- "]\n"
        S <+- " VALUE: ["
        withEach item3 in items{S <+- item3.mySymbol()+"\t"}
        S <+- "]\n"
        S <+- "\n"
        return(S)
    }

    void: printCosets(me int:size, our inf: myself) <- {
        me int: quotient <- items.size()/size
        withEach idx in RANGE(0..quotient){
            our inf:: Inf; Inf.initAsCoset(myself, size, idx)
            print("    ",idx,"\t", Inf.stringifyLong(0), "\n")
        }
    }

    void: draw(their GUI_ctxt: cr, me int: xLoc, me int: yLoc, me float: scale <- 1.0) <- {
        cairo_save(cr)
        cr.setScale(scale, scale)
        xLoc <- xLoc*(1/scale)
        yLoc <- yLoc*(1/scale)
        if(self==NULL){
            cr.setColor(styler.Black)
            renderText(cr, "NULL ", textFont, xLoc, yLoc)
            cr.strokeNow()
            cairo_restore(cr)
            return()
        }
        me string: S <- stringify()+":"
        if(isBase){S <- " Ref:"}
        cr.setColor(styler.Black)
        renderText(cr, S, textFont, xLoc, yLoc+20)
        renderText(cr, " Ref:", textFont, xLoc, yLoc+70)
        cr.strokeNow()

        me int: size <- items.size()
        me int: itemsPerCoset <- numItemsInCoset()

        me int: xpos <- xLoc+65
        //cr.rectangle(xpos, yLoc, size*30, 25); cr.strokeNow()
        me int: count <- 0
        me int: count2 <- 0
        me int: crntCoset <- 0
        withEach idx in RANGE(0..size){
            if(count == itemsPerCoset){
                count <- 0
                crntCoset <+- 1
            }
            me int: alpha <- 255
            if(dispMode == 1 and idx%dispArg != 0){alpha <- 10}
            if(dispMode == 2 and idx >= dispArg){alpha <- 10}
            me int: baseIdx  <- baseline.indexOf(items[idx])
            me cdColor: c <- cosetColors[crntCoset]
            me cdColor: color <- cdColor(c.red, c.green, c.blue, alpha)
            cr.setColor(color)
            cr.rectangle(xpos+((idx)*30), yLoc, 30, 25)
            cr.rectangle(xpos+((baseIdx)*30), yLoc+50, 30, 25)
            cr.fillNow()
            cr.setColor(cdColor(0,0,0,alpha*3))
            cr.rectangle(xpos+((idx)*30), yLoc, 30, 25)
            cr.rectangle(xpos+((baseIdx)*30), yLoc+50, 30, 25)
            cr.strokeNow()

            cr.setColor(cdColor(0,0,0,alpha*3))
            renderText(cr, toString(count2), textFont, xpos+((idx)*30)+8, yLoc-2)
            cr.fillNow()
            drawArrow(cr, xpos+((idx)*30)+15, yLoc+20, xpos+((baseIdx)*30)+15, yLoc+60)

            count <+-1
            count2 <+-1
        }
      //  cr.strokeNow()
        //~ if(!isBase){
            //~ cr.setColor(styler.Black)
            //~ withEach idx in RANGE(0..size){
                //~ me int: baseIdx  <- baseline.indexOf(items[idx])
                //~ drawArrow(cr, xpos+((idx)*30)+15, yLoc+20, xpos+((baseIdx)*30)+15, yLoc+60)
            //~ }
        //~ }
        cairo_restore(cr)
    }

}

struct testConstructing{
    void: run() <- {
        me int: max <- 12
        our inf:: masterBaseline
        masterBaseline.initAsBaseline(25, masterBaseline)//maxSize*maxSize)
        print("master:", masterBaseline.stringifyLong(0), "\n\n")
        withEach A_size in RANGE(1..max+1){         if(A_size==0){print("!#ZERO:", A_size)}
            withEach A_val in RANGE(0..A_size){
                our inf:: termA; termA.initInf(masterBaseline, A_size, A_val)
                print(" termA: ",A_size,": ", termA.stringifyLong(0), "\n")
            }
            print("\n");
        }
    }
}



struct iExp{
    void: dispJoin(our inf: masterBaseline, me int: A_size, me int: A_val, me int: B_size, me int: B_val, me int: R_size, me int: R_val) <- {

        our inf:: topInf; topInf.initInf(masterBaseline, R_size, R_val)
        me string: expectedStr <- topInf.stringifyLong(0)
  //      print("topInf: ", expectedStr, "\n")

        our inf:: termA; termA.initInf(masterBaseline, A_size, A_val)
  //      print(" termA: ", termA.stringifyLong(0), "\n")

        our inf:: B_base; B_base.initAsCosets(masterBaseline, B_size, B_base)
  //      print("B_base: ", B_base.stringifyLong(1), "\n")

        our inf:: termB; termB.initInf(B_base, B_size, B_val)
  //      print(" termB: ", termB.stringifyLong(1), "\n")

        me int: A_newVal <- termA.value()
  //      print(" A_newVal:", A_newVal, "\n")
        our inf: tmp <- termB.items[0]
        me int: startIdx <- masterBaseline.indexOf(tmp.items[A_newVal])
        our inf:: result; result.initInf(masterBaseline, R_size, startIdx)
        me string: resultStr <- result.stringifyLong(0)
        if(resultStr!=expectedStr){print("MISMATCH: ",resultStr, " != ", expectedStr); exit(1)}
        print(">> (", termA.stringifyLong(0) + "  " +termB.stringifyLong(0)+")  =  "+ resultStr, "\n")
    }

    void: testCombos(our inf: masterBaseline, me int: max) <- {
        withEach A_size in RANGE(1..max+1){         if(A_size==0){print("#ZERO:")}
            withEach A_val in RANGE(0..A_size){
                withEach B_size in RANGE(1..max+1){
                    withEach B_val in RANGE(0..B_size){
                        dispJoin(masterBaseline, A_size, A_val, B_size, B_val, A_size*B_size, A_val*B_size+B_val)// print("\n-------------------------------\n\n")
                    }
                }
            }
        }
    }

    void: run() <- {
        me int: maxSize <- 4
        our inf:: masterBaseline
        masterBaseline.initAsBaseline(25, masterBaseline)//maxSize*maxSize)
        print("master:", masterBaseline.stringifyLong(0), "\n\n")

//~ withEach n in RANGE(0..12){
    //~ our inf:: termA; termA.initInf(masterBaseline, 12, n)
    //~ print(" termA: ", termA.stringifyLong(0), "\n")
//~ }
        testCombos(masterBaseline, maxSize)

        //~ dispJoin(masterBaseline, 3, 1, 4, 2, 12, 6) print("\n-------------------------------\n\n")
        //~ dispJoin(masterBaseline, 3, 0, 4, 0, 12, 0) print("\n-------------------------------\n\n")
        //~ dispJoin(masterBaseline, 3, 0, 4, 2, 12, 2) print("\n-------------------------------\n\n")


    }
}


struct testQuotients{
    me bool: showFailureCases <- false
    our inf: masterBaseline

    me int: QFails <- 0
    me int: DFails <- 0
    me int: Qzeros <- 0
    me int: Dzeros <- 0
    me int: QInvld <- 0
    me int: DInvld <- 0
    me int: total <- 0

    me string: testStatus(me int:Swanted, me int: Vwanted, me int: Sgot, me int:Vgot, me bool: allIdent, me bool: isValid) <- {
        me string: S <- ""
        if(!isValid){
            S <+- "INVLD"
        }
        else if(Swanted==Sgot and Vwanted==Vgot){
            S <+- "PASS"
        }
        else if(Vwanted == 0 and Vgot==1){
            if(allIdent){S <+- "PASS-Z";}
            else{S <+- "ZERO";}
        } else {
            S<+- "FAIL"
        }
        return(S)
    }

    me string: printResult(me int:Swanted, me int: Vwanted, me int: Sgot, me int:Vgot, me bool: allIdent, me bool: isValid, me int:term, me string: tailStr) <- {
        me string: S <- ""
        S <+- "*"+toString(Swanted)+"+"+toString(Vwanted)+"\t"
        if(!isValid){
            if(term==0){DInvld<+- 1}
            else if(term==1){QInvld<+- 1}
            S <+- "INVLD\t"
        }
        else if(Swanted==Sgot and Vwanted==Vgot){
            S <+- "PASS\t"
            if(term==1 or term==0){S <+- tailStr}
        }
        else if(Vwanted == 0 and Vgot==1){
            if(allIdent){S <+- "PASS-Z\t";}
            else{S <+- "ZERO\t";
                //DFails<+- 1
            }
            if(term==0){Dzeros<+- 1}
            else if(term==1){
                Qzeros<+- 1
                S <+- tailStr
            }
        } else {
            S<+- "FAIL  "
            S <+- "*"+toString(Sgot)+"+"+toString(Vgot)+"\t"
            if(term==0){DFails<+- 1}
            else if(term==1){QFails<+- 1}
            S <+- tailStr
        }
        return(S)
    }

    void: checkJoin(our inf: term, me int: size, me int: value, me int: quotient, me int:phase <- 0) <- {
        me int: divisor <- size / quotient
        me inf: D
        D.initAsDivisor(term, quotient, phase, value)
        our inf:: Q
        Q.initAsQuotient(term, divisor)
//print("INF-Q:",Q.mySymbol(),"\n")
        total <+- 1
        globalItemIdx <- total
        me int: Sd <- divisor
        me int: Sq <- quotient
        me int: Vd <- value / Sq
        me int: Vq <- value - (Vd*Sq)
        me int: result <- Vd * Sq + Vq
        me int: DSize <- D.items.size()
        me int: QSize <- Q.items.size()
        //print(" Sd, Sq, Vd, Vq:", Sd,",  ", Sq,",  ", Vd,",  ", Vq,"\n")
        // if(value>1 and Sd>1 and value % Sd == 0){print("MARK:  ")}
        // if((divisor-1)*value == size){print("WRAP:  ")}
        // if(isSmallPrime(value) and isSmallPrime(Sd)){print("PRIMES:  ")}

        me string: testStat <- testStatus(Sd, Vd, DSize, D.value(), D.allIdent, D.isValid(Vd))
        if(testStat!="PASS" and testStat!="PASS-Z" and testStat!="ZERO"){
            print("addInfonToScene(",size,", ",value,", 2, ",divisor,")\t//",testStat, "  ID:", total,"\n")
        }
        print("RESULT:\t",phase,"\t*",size,"+",value," (",divisor,"*",quotient,"):\t",
                printResult(Sd, Vd, DSize, D.value(), D.allIdent, D.isValid(Vd), 0, "\tD"+D.stringifyLong(0)),"\t\t",
                printResult(Sq, Vq, QSize, Q.value(), Q.allIdent, Q.isValid(Vq), 1, "\t\tQ"+Q.stringifyLong(0)),
                "\n")
        if(showFailureCases){
            our inf:: wanted; wanted.initInf(term, Sd, Vd)
            our inf::   goot;   goot.initInf(term, Sd, Vd+1)
            print("WANTED:", wanted.stringifyLong(0),"\n")
            print("  GOOT:", goot.stringifyLong(0),"\n")
            print("ACTUAL:", D.stringifyLong(0),"\n")
        }
    }

    void: doOneTest(me int: size, me int: value, me int: quotient, me int:phase <- 0) <- {
        print("\n----------------------------------------------------\n")
            our inf:: term; term.initWithBase(size, value);
            //print(term.stringifyLong(0),"\n")
            print(term.stringifyFull("Source infon"),"\n\n");
         //   withEach phase in RANGE(0..size / quotient){
         phase <- 0
                checkJoin(term, size, value, quotient, phase);
          //  }
            print("\n")
    }

    void: doTest() <- {
        me bool: doAllTests <- true
        if(doAllTests){
            Allocate(masterBaseline)
            me int: maxToTest <- 12// 1024//12
            withEach size in RANGE(1..maxToTest+1){
                me List<int>: coPrimes
                withEach D in RANGE(1..size+1){
                    me int: Q <- size / D
                    if(Q * D == size){
                        coPrimes.append(Q)
                    }
                }
                masterBaseline.initAsBaseline(size, masterBaseline)
                print("\n####################################################\n")
                print("BASE:",masterBaseline.stringifyLong(0), "\n")
                print("----------------------------------------------------\n")
                withEach val in RANGE(0..size){
                    our inf:: term; term.initInf(masterBaseline, size, val)
             //       print("  PROD(*",size,"+",val,"):\t", term.stringifyLong(0), "\n")
                    me int: phase <- 0
                    withEach Q in coPrimes{
                print("----------------------------------------------------\n")
                            print(term.stringifyFull("Source Infon"),"\n");
                            checkJoin(term, size, val, Q, phase)
                    }
                    //print("Size:",size, "  val:",val, " total:",total,"  Q-Fails:",QFails, "  D-Fails:", DFails)
    //                print("\n")
                }
            }
        }
        else { // Do particular tests
            me int: phase <- 0
                doOneTest(6, 3, 2, phase)
                doOneTest(8, 3, 2, phase)
                doOneTest(9, 5, 3, phase)
                doOneTest(10,3, 2, phase)
                doOneTest(10,5, 2, phase)
                doOneTest(12,3, 2, phase)
                doOneTest(12,4, 3, phase)
                doOneTest(12,5, 3, phase)
                doOneTest(12,5, 2, phase)
                doOneTest(12,6, 4, phase)
                doOneTest(12,7, 4, phase)
                doOneTest(12,8, 3, phase)
        }
            print("\n\n D-Fails:",DFails, "    Q-Fails:",QFails, "    Total:", total, "   D-zeros:",Dzeros, "   Q-zeros:",Qzeros, "   D-Invlds:", DInvld, "   Q-Invlds:", QInvld,"\n")
    }
}

struct infonWidget: inherits=DashboardWidget{
    me List<our inf>: infons

    void: addInfonToScene(me int: size, me int: val, me int: dispMode <- 0, me int: dispArg <- 0) <- {
        our inf:: masterBaseline
        masterBaseline.initAsBaseline(size, masterBaseline)
        our inf:: term; term.initInf(masterBaseline, size, val)
        term.dispMode <- dispMode
        term.dispArg <- dispArg
        infons.append(term)
    }

    void: init() <- {
        cosetColors.append(cdColor(255,0,0,255))
        cosetColors.append(cdColor(0,255,0,255))
        cosetColors.append(styler.Yellow)
        cosetColors.append(cdColor(255,12,200,255))
        cosetColors.append(cdColor(2,200,200,255))
        cosetColors.append(styler.Orange)
        Allocate(textFont,"Ariel", "12")

//Shouldn't fail
addInfonToScene(5, 4, 2, 5)	//INVLD  ID:33
addInfonToScene(6, 5, 2, 6)	//INVLD  ID:57
addInfonToScene(7, 6, 2, 7)	//INVLD  ID:71
addInfonToScene(8, 7, 2, 8)	//INVLD  ID:103
addInfonToScene(9, 8, 2, 9)	//INVLD  ID:130

// Normal fails
addInfonToScene(6, 3, 2, 3)	//INVLD
addInfonToScene(8, 3, 2, 4)	//INVLD
addInfonToScene(9, 5, 2, 3)	//INVLD
addInfonToScene(10, 3, 2, 5)	//INVLD
addInfonToScene(10, 5, 2, 5)	//INVLD
addInfonToScene(10, 7, 2, 5)	//INVLD
addInfonToScene(12, 3, 2, 6)	//INVLD
addInfonToScene(12, 4, 2, 4)	//INVLD
addInfonToScene(12, 5, 2, 4)	//INVLD
addInfonToScene(12, 5, 2, 6)	//INVLD
addInfonToScene(12, 6, 2, 3)	//INVLD
addInfonToScene(12, 7, 2, 3)	//INVLD
addInfonToScene(12, 8, 2, 4)	//INVLD
addInfonToScene(12, 9, 2, 6)	//INVLD

        // withEach val in RANGE(0..11){
        //     addInfonToScene(12, val, 1, 4)
        //     addInfonToScene(12, val, 2, 4)
        // }

//exit(1)
        //~ me innerAdd: iAdd
        //~ iAdd.init(3, 2, 5)

        //~ me testRebaseCombos: test1
        //~ test1.doTest(5)
    }
    void: draw(their GUI_ctxt: cr) <- {
        cr.setColor(styler.White)
        cr.setLineWidth(1)
        cr.rectangle(0,0,1200,1400)
        cr.fillNow()

        me int: yPos <- 50
        me int: xPos <- 40
        withEach infn in infons{
            me int: infonSize <- infn.items.size()
            me int: infonVal <- infn.value()
            me int: colIdx <- infn.dispArg
            me int: dispArg <- infn.dispArg
            me int: dispMode <- infn.dispMode
            me int: Q_size <- 0
            me int: D_size <- 0

               D_size <- dispArg
               Q_size <- infonSize/D_size

            me int: divisorVal <- infonVal / Q_size
            me int: quotientVal <- infonVal % Q_size
            me string: label <- 'Expected: {*'+toString(D_size)+'+'+toString(divisorVal)+' *'+toString(Q_size)+'+'+toString(quotientVal)+'} ==  *'+toString(infonSize)+'+'+toString(infonVal)
            cr.setColor(cdColor(0,0,0,200))
            cr.rectangle(xPos-5, yPos-20, 330, 90); cr.strokeNow()
            renderText(cr, label, textFont, xPos, yPos-25)
            cr.setColor(cdColor(230,230,230,200))

            infn.draw(cr, xPos, yPos, 0.75)
            if(xPos>700){xPos <- 40; yPos <+- 200}
            else{xPos <+- 350}


        }
    }
}

struct infonWidgetTable: inherits=DashboardWidget{
    me int: infonSize <- 12
    me List<int>: cols <- [1, 2, 3, 4, 6]
    our inf: masterBaseline

    void: init() <- {
        Allocate(masterBaseline)
        masterBaseline.initAsBaseline(infonSize, masterBaseline)

        cosetColors.append(cdColor(255,0,0,255))
        cosetColors.append(cdColor(0,255,0,255))
        cosetColors.append(styler.Yellow)
        cosetColors.append(cdColor(255,12,200,255))
        cosetColors.append(cdColor(2,200,200,255))
        cosetColors.append(styler.Orange)
        Allocate(textFont,"Ariel", "8")
        Allocate(hugeFont, "Ariel", "72")
    }

    void: draw(their GUI_ctxt: cr) <- {
        cr.setColor(styler.White)
        cr.setLineWidth(1)
        cr.rectangle(0,0,2000,2000)
        cr.fillNow()

        me int: yPos <- 40
        me string: tsz <- toString(infonSize)
        withEach row in RANGE(0..infonSize){
            cr.setColor(cdColor(230,230,230,255))
            renderText(cr, to_string(row), hugeFont, 20, yPos+70)
            cr.strokeNow()

            our inf:: term; term.initInf(masterBaseline, infonSize, row)

            withEach colIdx in RANGE(0..cols.size){
                me int: Q_size <- cols[colIdx]
                me int: D_size <- infonSize/Q_size
                me int: quotientVal <- row / D_size
                me int: divisorVal <- row % D_size
                me string: label <- '{*'+toString(Q_size)+'+'+toString(quotientVal)+' *'+toString(infonSize/Q_size)+'+'+toString(divisorVal)+'} ==  *12+'+toString(row)
                cr.setColor(cdColor(50,50,50,200))
                me int: xPos <- 150+colIdx*300
                cr.rectangle(xPos-5, yPos-20, 250, 145); cr.strokeNow()
                renderText(cr, label, textFont, xPos, yPos-3)
                term.dispMode <- 2
                term.dispArg <- Q_size
                term.draw(cr, xPos, yPos+10, 0.5)

                term.dispMode <- 1
                term.draw(cr, xPos, yPos+75, 0.5)

            }
            yPos <+- 150
        }
    }
}

struct GLOBAL{
    their GUI_canvas: drawing_area
    their infonWidget: infCanvas            // Uncomment this one to use the infonWidget
   // their infonWidgetTable: infCanvas     // Uncomment this one to use the display all the size 12s (for example)
    me int: fontSize
    our fontSpec:: textFont
    our fontSpec:: hugeFont
    me cdColor: lineColor1
    me cdColor: lineColor2
}

struct APP{
    me void: createAppArea(me GUI_Frame: frame) <- {
        Allocate(infCanvas)
        infCanvas.init()
        drawing_area  <- gui.newCanvas()
        drawing_area.setParent(infCanvas)
        gui.setWidgetSize(drawing_area, 1800, 1800)
        infCanvas.EventDispatcher.registerWidgetForEventDispatcher(drawing_area, infCanvas)
        addToContainerAndExpand (frame, drawing_area)
    }
}

do GeneratePtrSymbols(inf)
