
// Infon List

model POV{
    our infon: item
    our POV: next
    our POV: prev
    our POV: altPOV     // NEXT OR
    our POV: outerPOV  // POV outside of an alt
    their POV: pParent
    flag: looseMode
    flag: looseTop
    flag: looseInhtd
    flag: wasRejected
    flag: altWasTried
    flag: readyToResolve
    flag: addNewSubDots
    flag: keepDots
    me int: AlternativesNestLvl
    our POV[map string]: pctTags
    our POV[list]: predecessors
    our POV[list]: candidatesForLastItem
    me int: linearAltID
    flag: rejected         // At least one item on the worklist was rejected.

    me bool: isFirst() <- {return(prev==NULL)}
    me bool: isLast()  <- {return(next==NULL)}
    me bool: looseSize() <- {
        return(looseInhtd!=false or looseTop!=false)
    }
    void: insertNewPctTag(me string: tag, our POV: newPOV) <- {
        /*our POV[itr map string]: tagPOV <- pctTags.find(tag)
        if(tagPOV == pctTags.end()){
            pctTags.insert(tag, newPOV)
        }else{
            tagPOV.val.item.addInfItrToWrkList(newPOV)
        }*/
    }
    void: insertChildDotsBefore(our POV: position) <- {
        our infon:: newSubDots
        newSubDots.itmMode <- mSubItems
        newSubDots.infMode <- isLiteral
        newSubDots.value.tailUnfinished <- true
        newSubDots.value.fType <- LST
        newSubDots.value.format <- fLiteral
        item.value.items.insertBefore(position, newSubDots)
        item.value.tailUnfinished <- false
    }
    void: closeItemsAtPOV(our POV: lastItem) <- {
        log("closeItemsAtPOV:" + stringify() + "  lastItem:"+lastItem.stringify())
        while(!item.value.items.isEmpty() and !(item.value.items.last() === lastItem.item)){
            item.value.items.popLast()
        }
        our POV: pov <- item.value.items.head
        while(pov != NULL){
            pov.item.isTentative <- false
            log("Validating:"+stringifyInfon(pov.item)+"   addNewSubDots:"+dispBool(pov.addNewSubDots))
            if(pov.addNewSubDots){
                pov.pParent.insertChildDotsBefore(pov)
                pov.pParent.keepDots <- false
            }
            pov <- pov.next
        }
        if(!keepDots){
            item.value.tailUnfinished <- false
            item.countSize()
        }
    }
    our POV: findOrAddPctTag(me string: tag) <- {
        our POV: retVal
        our POV[itr map string]: tagPOV <- pctTags.find(tag)
        if(tagPOV == pctTags.end()){
            Allocate(retVal)
            Allocate(retVal.item)
            pctTags.insert(tag, retVal)
        }else{
            retVal <- tagPOV.val
        }
        return(retVal)
    }
    our POV: tryAddingTentativeChild() <- {
        me string: lenStatus <- item.lengthStatus()
        if(lenStatus == "L" or lenStatus == "?"){
            our infon:: newInfon
            our infon: infonType <- item.value.listSpec
            if(infonType != NULL){
                newInfon <deep- infonType // MUST: be a lazy cow copy
            }else{
                newInfon.value.fType   <- tUnknown
                newInfon.infMode       <- isUnknown
                newInfon.itmMode       <- mItem
                newInfon.value.format  <- fUnknown
            }
            if(lenStatus == "?"){newInfon.isTentative <- true}
            our POV: newInfNode <- item.value.items.pushLast(newInfon)
            return(newInfNode)
        }else if(lenStatus == "E"){
            item.value.tailUnfinished <- false
            return(NULL)
        }else if(lenStatus == "G"){log("INFON TOO BIG")}
        return(NULL)
    }
    our POV: getFirst(me bool: skipDots) <- { // WARNING: item must be a literal List.
        our POV: firstNode
        if(item.value.items.isEmpty()){
            if(!skipDots and item.value.tailUnfinished){
                firstNode <- tryAddingTentativeChild()
                if(firstNode == NULL){return(NULL)}
            }
            else{return(NULL)}
        }
        else{
            firstNode <- item.value.items.begin()
        }
        firstNode.pParent <- self
        return(firstNode)
    }
    our POV: getNext(me bool: skipDots) <- {
        while(true){
            our POV: nextNode <- next
            if(nextNode==NULL){
                if(!skipDots){
                    if(pParent != NULL and pParent.item != NULL and pParent.item.value.tailUnfinished){
                        nextNode <- pParent.tryAddingTentativeChild()
                    }
                }
            }
            if(nextNode != NULL){nextNode.pParent <- pParent}
            if(nextNode != NULL and nextNode.item.itmMode == mTagDefn){
                registerClass(nextNode.item)
            }else{
                return(nextNode)
            }
        }
    }
    our POV: getFirstTight(our infItr: ii, me bool: skipDots, their bool: was2ndVisit) <- {
        me bool: dummyFlag
        our POV: nextPOV <- getFirst(skipDots)
        if(nextPOV != NULL and nextPOV.item.itmMode == mSubItems){
            our POV: firstPOV <- nextPOV.getFirstTight(ii, skipDots, dummyFlag)
            if(firstPOV == NULL){nextPOV <- nextPOV.getNextTight(ii, skipDots, was2ndVisit, false)}
            else{nextPOV <- firstPOV}
        }
        if(nextPOV!=NULL and nextPOV.item.isTentative){nextPOV.altPOV <- nextPOV.getNextTight(ii, true, dummyFlag, false)}
        return(nextPOV)
    }
    our POV: getNextTight(our infItr: ii, me bool: skipDots, their bool: was2ndVisit, me bool: getDeep) <- {
        me bool: dummyFlag
        was2ndVisit <- false
        our POV: nextPOV <- getNext(skipDots)
        if(nextPOV == NULL){
            if(pParent != NULL and pParent.item.itmMode != mSubItems){was2ndVisit <- true}
            if(pParent === ii.topPOV){return(NULL)}
            if(pParent==NULL){return(NULL)}
            nextPOV <- pParent.getNextTight(ii, skipDots, dummyFlag, getDeep)
        }else if(nextPOV.item.itmMode == mSubItems or getDeep){
            our POV: firstPOV <- nextPOV.getFirstTight(ii, skipDots, dummyFlag)
            if(firstPOV == NULL){nextPOV <- nextPOV.getNextTight(ii, skipDots, was2ndVisit, getDeep)}
            else{nextPOV <- firstPOV}
        }
        if(nextPOV!=NULL and nextPOV.item.isTentative){nextPOV.altPOV <- nextPOV.getNextTight(ii, true, dummyFlag, getDeep)}
        return(nextPOV)
    }

    me string: stringify()<-{
        me string: S
        if(self == NULL){S <- "NULL"}
        else{S <+- item.mySymbol(item)+":"+stringifyInfon(item)
            if(predecessors.size() >0){
                S <+- " PREDS["
                withEach pred in predecessors{
                    S <+- ":"+pred.mySymbol(pred)
                }
                S <+- "] "
            }
            if(altPOV!=NULL){S <+- "  ALT_OR:" + altPOV.stringify()}
            if(outerPOV!=NULL){S <+- "  outerPOV:" + outerPOV.stringify()}
        }
        return (S)
    }
}

model DblLinkedList: implements = list {
    our POV: head
    our POV: tail

    void: clear() <- {head <- NULL; tail <- NULL;}

    our POV: pushLast(our infon: i) <- {
        our POV:: newNode {i, NULL, tail}
        if(tail!=NULL) {tail.next <- newNode}
        if(head==NULL) {head <- newNode}
        tail <- newNode
        return(newNode)
    }
    our POV: pushFirst(our infon: i) <- {
        our POV:: newNode {i, head, NULL}
        if(head!=NULL){head.prev <- newNode}
        if(tail==NULL) {tail <- newNode}
        head <- newNode
        return(newNode)
    }
    our POV: pushAsAlt(our POV: pov, our infon: toPush) <- {
        our POV: newNode <- pushLast(toPush)
        newNode.outerPOV <- pov
        newNode.predecessors <- pov.predecessors
        //log("PUSH_AS_ALT():"+newNode.stringify())
        return(newNode)
    }
    our POV: erase(our POV: toDel) <- {
        our POV: retVal <- toDel.prev
        if(toDel===head){head<-head.next}
        if(toDel===tail){tail<-tail.prev}
        if(toDel.prev){toDel.prev.next <- toDel.next}
        if(toDel.next){toDel.next.prev <- toDel.prev}
        return(retVal)
    }

    our POV: insertBefore(our POV: position, our infon: i) <- {
        our POV: prevNode <- position.prev
        our POV:: newNode {i, position, prevNode}
        if(prevNode!=NULL){prevNode.next <- newNode}
        position.prev <- newNode
        if(head === position){head <- newNode}
        return(newNode)
    }

    our POV: insertAfter(our POV: position, our infon: i) <- {
        our POV: nextNode <- position.next
        our POV:: newNode {i, nextNode, position}
        if(nextNode!=NULL){nextNode.prev <- newNode}
        position.next <- newNode
        if(tail === position){tail <- newNode}
        return(newNode)
    }

    our infon: popFirst() <- {
        our infon: retVal <- head.item
        if(head!=NULL){
            head <- head.next
            if(head==NULL){tail <- NULL}
        }
        return(retVal)
    }

    our infon: popLast() <- {
        our infon: retVal <- tail.item
        if(tail!=NULL){
            tail <- tail.prev
            if(tail==NULL){head <- NULL}
            else{tail.next <- NULL}
        }
        return(retVal)
    }

    me bool: isEmpty() <- {
        return(head==NULL)
    }

    our infon: first() <- {
        if(head) {return(head.item)}
        return(NULL)
    }

    our infon: last() <- {
        if(tail) {return(tail.item)}
        return(NULL)
    }

    our POV: begin()  <- {return(head)}
    our POV: end()    <- {return(NULL)}
    our POV: rbegin() <- {return(tail)}
    our POV: rend()   <- {return(NULL)}

    our POV: at(me int: N)  <- {
        if (head == NULL){return(NULL)}
        our POV: retVal <- begin()
        withEach x in RANGE(0..N){
            retVal <- retVal.next
            if (retVal == NULL){return(NULL)}
        }
        return(retVal)
    }

    me int: size() <- {
        me int: count <- 0
        our POV: pov <- head
        while(pov != NULL){
            count <- count+1
            pov <- pov.next
        }
        return(count)
    }
}

struct POV {}
struct DblLinkedList {}
