
// Infon List

model POV{ // Point-Of-View
    our infon: pItem   // The POV item
    our POV: next
    our POV: prev
    our POV: altPOV     // NEXT OR
    our POV: outerPOV   // POV outside of an alt
    their POV: pParent
    flag: looseMode
    flag: looseTop      // Top LHS/RHS pair is looseMode
    flag: looseInhtd    // Parent was looseMode
    flag: wasRejected
    flag: tentFromDots
    flag: isFromALT
    flag: readyToResolve
    flag: addNewSubDots
    flag: keepDots
    flag: listClosed
    flag: hasPropagated
    me int: AlternativesNestLvl
    me Map<me string, our POV>: pctTags
    me List<our POV>: predecessors
    me List<our POV>: candidatesForLastItem
    flag: forLastUseLastItem
    flag: forLastUseOutrPov
    flag: isOutrFeed
    me int: linearAltID
    flag: rejected         // At least one item on the worklist was rejected.
    flag: doReply          // Flag that this should reply back to user/stream.

    our infon: dpItem() <- {
        our infon: retVal <- NULL
        our infon: crntProxy <- pItem
        while(crntProxy){
            retVal <- crntProxy
            if(retVal===crntProxy.proxy){return(retVal)} // TODO: Can we just avoid setting proxy to itself?
            crntProxy <- crntProxy.proxy
        }
        return(retVal)
    }
    me bool: isFirst() <- {return(prev==NULL)}
    me bool: isLast()  <- {return(next==NULL)}
    me bool: looseSize() <- {return(looseInhtd or looseTop)}
    me bool: looseType() <- {return(looseMode or looseTop or looseInhtd)}
    void: insertNewPctTag(me string: tag, our POV: newPOV) <- {
        /*our POV[itr map string]: tagPOV <- pctTags.find(tag)
        if(tagPOV == pctTags.end()){
            pctTags.insert(tag, newPOV)
        }else{
            tagPOV.val.item.addInfItrToWrkList(newPOV)
        }*/
    }
    void: addCandidateForLastItem(our POV: candidate) <- {
        withEach cdat in candidatesForLastItem {
            if(cdat===candidate){return()}
        }
        candidatesForLastItem.append(candidate)
    }
    void: insertChildDotsBefore(our POV: position) <- {
        our infon:: newSubDots
        newSubDots.itmMode <- mSubItems
        newSubDots.infMode <- isLiteral
        newSubDots.value.tailUnfinished <- true
        newSubDots.value.fType <- LST
        newSubDots.value.format <- fLiteral
        pItem.value.items.insertBefore(position, newSubDots)
        pItem.value.tailUnfinished <- false
    }
    void: closeItemsAtPOV(our POV: lastItem) <- {
        if(listClosed){return()}else{listClosed<-true}
        //log("closeItemsAtPOV:" + stringify() + "  lastItem:"+lastItem.stringify())
        while(!pItem.value.items.isEmpty() and !(pItem.value.items.last() === lastItem.pItem)){
            pItem.value.items.popLast()
        }
        our POV: pov <- pItem.value.items.head
        while(pov != NULL){
            if(pov.pItem.isTentative){logSeg("-resetTent:A")}
            pov.pItem.isTentative <- false
            //log("reseting_isTentative:"+toString(pov.pItem)+"   addNewSubDots:"+toString(pov.addNewSubDots))
            if(pov.addNewSubDots){
                pov.pParent.insertChildDotsBefore(pov)
                pov.pParent.keepDots <- false
            }
            pov <- pov.next
        }
        if(!keepDots){
            pItem.value.tailUnfinished <- false
            pItem.countSize(false)
        }
    }
    our POV: findOrAddPctTag(me string: tag) <- {
        our POV: retVal
        itr Map<me string, our POV>: tagPOV <- pctTags.find(tag)
        if(tagPOV == pctTags.end()){
            Allocate(retVal)
            Allocate(retVal.pItem)
            pctTags.insert(tag, retVal)
        }else{
            retVal <- tagPOV.val
        }
        return(retVal)
    }
    me bool: seedTypeSpecs(our infon: newInfon, me bool: infonIsBlank) <- {
        if(newInfon.typeSpecsAlreadyCopied){return(true)}else{newInfon.typeSpecsAlreadyCopied<-true}
        their POV: lSpec <- self
        me int: typesAdded <- 0
        me List<our TypeSpec>: newTypeSpecs
        while(lSpec != NULL){
            our infon: lSpecInf <- lSpec.pItem.value.listSpec
            if(lSpecInf!=NULL){
                our TypeSpec:: newTypeSpec
                    newTypeSpec.constModel <- lSpecInf
                    newTypeSpec.typeMode   <- tmListSpec
                if(lSpecInf.asWrkLstOutr){
                log("seedTypeSpecs:"+shortedStr(toString(lSpecInf.innr),100) + " sym:"+ lSpecInf.innr.mySymbol())
                    lSpecInf.innr.cnvtToFunc <- true
                    newTypeSpec.constModel <- lSpecInf.innr

                }
                newTypeSpecs.prepend(newTypeSpec)
                typesAdded <+- 1
            }
            if(lSpec.pItem.itmMode==mSubItems){lSpec <- lSpec.pParent}
            else{lSpec <- NULL}
        }
        if(typesAdded==0){return(false)}
        withEach tSpec in newTypeSpecs{
            //TODO: optimize with COW
            if(infonIsBlank){
                tSpec.constModel.copyAsTypeTo(newInfon, true);
                infonIsBlank<-false
            }
            else{newInfon.addInfonToWrkList(tSpec.constModel, false)} // TODO: Make this a copyAsTypeTo copy
        }

        newInfon.typeSpecs <- newTypeSpecs
        //TODO: apply outr idents
        return(true)
    }
    our infon: makePotentialMemberInfon() <- {
        our infon:: newInfon
        if(!seedTypeSpecs(newInfon, true)){
            newInfon.value.fType   <- tUnknown
            newInfon.value.format  <- fUnknown
            newInfon.infMode       <- isUnknown
        }
        newInfon.itmMode       <- mItem
        return(newInfon)
    }
    our POV: tryAddingTentativeChild() <- {
        me string: lenStatus <- pItem.lengthStatus()
        if(lenStatus == "L" or lenStatus == "?"){
            our infon: newInfon <- makePotentialMemberInfon()
            our POV: newInfNode <- pItem.value.items.append(newInfon)
            if(lenStatus == "?"){
                newInfon.isTentative  <- true
                newInfNode.tentFromDots <- true
            }
            return(newInfNode)
        }else if(lenStatus == "E"){
            pItem.value.tailUnfinished <- false
            return(NULL)
        }else if(lenStatus == "G"){log("INFON TOO BIG")}
        return(NULL)
    }
    our POV: getFirst(me int64: skipDots) <- { // WARNING: pItem must be a literal List.
        if (streamingNormMode) {
            me MutexMngr: mtxMgr{streamingNormMutex}
            while(pItem.stillParsing and pItem.value.items.isEmpty()){
                print("###NORM getFirstPOV-LOCKING:"+shortedStr(toString(pItem),100)+"\n")
                streamingNormLock.wait(mtxMgr)
                print("###NORM getFirstPOV-UNLOCKED:"+shortedStr(toString(pItem),100)+"\n")
            }
            print("###NORM getFirstPOV-DONE_WAITING on:"+shortedStr(toString(pItem),100)+"\n")
        }

        our POV: firstNode
        if(pItem.value.items.isEmpty()){
            if(skipDots<=0 and pItem.value.tailUnfinished){
                firstNode <- tryAddingTentativeChild()
                if(firstNode == NULL){return(NULL)}
            }else{return(NULL)}
        }else{
            firstNode <- pItem.value.items.begin()
           // seedTypeSpecs(firstNode.pItem, false)//, true)
        }
        firstNode.pParent <- self
        return(firstNode)
    }
    our POV: getNext(me int64: skipDots) <- {
        if (streamingNormMode) {
            me MutexMngr: mtxMgr{streamingNormMutex}
            while(!((next==NULL and ((pParent != NULL and !pParent.pItem.stillParsing) or pParent==NULL))
               or (next!=NULL and (!next.pItem.stillParsing or canStreamThoNotDone(next.pItem))))){
                print("###NORM getNextPOV-LOCKING:"+shortedStr(toString(pItem),100)+"\n")
                streamingNormLock.wait(mtxMgr)
                print("###NORM getNextPOV-UNLOCKED:"+shortedStr(toString(pItem),100)+"\n")
            }
            print("###NORM getNextPOV-DONE_WAITING on:"+shortedStr(toString(pItem),100)+"\n")
        }

        our POV: nextNode <- next
        if(nextNode==NULL){
            if(skipDots<=0){ //log("DOTS:"+toString(skipDots))
                if(pParent != NULL and pParent.pItem != NULL and pParent.pItem.value.tailUnfinished){
                    nextNode <- pParent.tryAddingTentativeChild()
                }
            } else if(skipDots<1000000 and pParent != NULL and pParent.pItem != NULL and pParent.pItem.itmMode != mSubItems){ //log("FINISHING:"+pParent.stringify());
                pParent.forLastUseLastItem<-true;
            }
        }//else{seedTypeSpecs(nextNode.pItem, false)}
        if(nextNode != NULL){nextNode.pParent <- pParent}
        return(nextNode)
    }
    our POV: getFirstTight(our infItr: ii, me int64: skipDots, their int64: numLvlsUp) <- {
        //log("[GFT: infItr:"+ii.mySymbol())
        me int64: dummyFlag
        our POV: nextPOV <- getFirst(skipDots)
        if(nextPOV != NULL and nextPOV.pItem.itmMode == mSubItems){
            our POV: firstPOV <- nextPOV.getFirstTight(ii, skipDots, dummyFlag)
            if(firstPOV == NULL){nextPOV <- nextPOV.getNextTight(ii, skipDots, numLvlsUp, false, false)}
            else{nextPOV <- firstPOV}
        }
        //log("]gft")
        return(nextPOV)
    }
    our POV: getNextTight(our infItr: ii, me int64: skipDots, their int64: numLvlsUp, me bool: getDeep, me bool: itrBeginning) <- {
        //log("[GNT: infItr:"+ii.mySymbol()+"  skipdots:"+toString(skipDots)+"   pItem:"+pItem.mySymbol()+":"+toString(pItem))
        our POV: nextPOV
        me int64: dummyFlag
        if(itrBeginning){nextPOV <- getFirstTight(ii, skipDots, numLvlsUp)}
        else{
            nextPOV <- getNext(skipDots)
            if(nextPOV == NULL){
                our infItr: nxtInfItr <- ii
                if(pParent==NULL or pParent.pItem.itmMode != mSubItems){
                    numLvlsUp <+- 1
                if(pParent==NULL){/*log("]gnt-NULLa")*/ return(NULL)} else {skipDots <+- 1}
                    if(ii.iParent!=NULL){nxtInfItr <- ii.iParent}
                }else if(pParent === ii.topPOV){/*log("]gnt-NULLb")*/ return(NULL)}
                if(pParent.outerPOV!=NULL){//log("UP-OTR")
                    nextPOV <- pParent.outerPOV.getNextTight(nxtInfItr, skipDots-1, numLvlsUp, getDeep, itrBeginning)
                }else{//log("UP")
                    nextPOV <- pParent.getNextTight(nxtInfItr, skipDots-1, numLvlsUp, getDeep, itrBeginning)
                }
            }else if(nextPOV.pItem.itmMode == mSubItems or (nextPOV.pItem.value.fType==LST and getDeep)){
                our POV: firstPOV <- nextPOV.getFirstTight(ii, skipDots, dummyFlag)
                if(firstPOV == NULL){nextPOV <- nextPOV.getNextTight(ii, skipDots, numLvlsUp, getDeep, itrBeginning)}
                else{nextPOV <- firstPOV}
            }
        }
        if(nextPOV!=NULL and nextPOV.altPOV==NULL and nextPOV.pItem.isTentative){nextPOV.altPOV <- nextPOV.getNextTight(ii, INT64_MAX, dummyFlag, getDeep, false)}
        //if(nextPOV){log("]gntA:"+nextPOV.stringify())} else{log("]gntA: NULL")}
        return(nextPOV)
    }

    me bool: applyAsNot(our POV: RHS)<-{
        if(RHS!=NULL and RHS.pItem!=NULL and RHS.pItem.asRHSInternalIdent){return(false)}
        return(pItem.asNot)
    }

    void: pushPredecessor(our POV: pred)<-{
        withEach crntPred in predecessors{
            if(crntPred===pred){
               // log("WARNING: "+pred.mySymbol()+" already exists in "+mySymbol())
                return()
            }
        }
        predecessors.append(pred)
    }
    void: INIT() <- {clearSymbol(self);}

    me string: stringify()<-{
        me string: S
        if(self == NULL){S <- "NULL"}
        else{S <+- pItem.mySymbol()+":"+toString(pItem)
            if(predecessors.size() >0){
                //S <+- " PREDS["
                withEach pred in predecessors{
                    //S <+- ":"+pred.mySymbol()
                }
                //S <+- "] "
            }
            if(altPOV!=NULL){S <+- "  ALT_OR:" + altPOV.stringify()}
            if(outerPOV!=NULL){S <+- "  <outerPOV:" +outerPOV.mySymbol()+" " + outerPOV.stringify()+">"}
        }
        return (S)
    }
}

model PovList: implements = list {
    our POV: head
    our POV: tail
    me Mutex: povLstMtx

    void: clear() <- {
        protect(povLstMtx){
            head <- NULL; tail <- NULL;
        }
    }


    our POV: appendPov(our POV: newNode) <- {
        protect(povLstMtx){
            newNode.prev <- tail
            newNode.next <- NULL
            if(tail!=NULL) {tail.next <- newNode}
            if(head==NULL) {head <- newNode}
            tail <- newNode
        }
        return(newNode)
    }

    our POV: append_actual_(our infon: i) <- {
        our POV:: newNode
        newNode.pItem <- i
        newNode.next  <- NULL
        newNode.prev  <- tail
        if(tail!=NULL) {tail.next <- newNode}
        if(head==NULL) {head <- newNode}
        tail <- newNode
        return(newNode)
    }

    our POV: append(our infon: i) <- {
        our POV: newNode
        protect(povLstMtx){
            newNode <- append_actual_(i)
        }
        return(newNode)
    }
    our POV: prepend(our infon: i) <- {
        our POV:: newNode
        protect(povLstMtx){
            newNode.pItem <- i
            newNode.next  <- head
            newNode.prev  <- NULL
            if(head!=NULL){head.prev <- newNode}
            if(tail==NULL) {tail <- newNode}
            head <- newNode
        }
        return(newNode)
    }
    our POV: pushAsAlt(our POV: pov, our infon: toPush, our POV: pred) <- {
        our POV: newAlt
        protect(povLstMtx){
            newAlt <- append_actual_(toPush)
            newAlt.outerPOV <- pov
                newAlt.looseInhtd <- pov.looseInhtd
                newAlt.looseTop   <- pov.looseTop
                newAlt.looseMode  <- pov.looseMode
            newAlt.pushPredecessor(pred)
        }
        return(newAlt)
    }
    our POV: erase(our POV: toDel) <- {
        our POV: retVal
        protect(povLstMtx){
            retVal <- toDel.prev
            if(toDel===head){head<-head.next}
            if(toDel===tail){tail<-tail.prev}
            if(toDel.prev){toDel.prev.next <- toDel.next}
            if(toDel.next){toDel.next.prev <- toDel.prev}
        }
        return(retVal)
    }

    our POV: insertBefore(our POV: position, our infon: i) <- {
//        if(position==NULL){return(append_actual_(i))}
        our POV:: newNode
        protect(povLstMtx){
            our POV: prevNode <- position.prev
            newNode.pItem <- i
            newNode.next  <- position
            newNode.prev  <- prevNode
            if(prevNode!=NULL){prevNode.next <- newNode}
            position.prev <- newNode
            if(head === position){head <- newNode}
        }
        return(newNode)
    }

    our POV: insertAfter(our POV: position, our infon: i) <- {
//        if(position==NULL){return(append_actual_(i))}
        our POV:: newNode
        protect(povLstMtx){
            our POV: nextNode <- position.next
            newNode.pItem <- i
            newNode.next  <- nextNode
            newNode.prev  <- position
            if(nextNode!=NULL){nextNode.prev <- newNode}
            position.next <- newNode
            if(tail === position){tail <- newNode}
        }
        return(newNode)
    }

    our infon: popFirst() <- {
        our infon: retVal
        protect(povLstMtx){
            retVal <- head.pItem
            if(head!=NULL){
                head <- head.next
                if(head==NULL){tail <- NULL}
            }
        }
        return(retVal)
    }

    our infon: popLast() <- {
        our infon: retVal
        protect(povLstMtx){
            retVal <- tail.pItem
            if(tail!=NULL){
                tail <- tail.prev
                if(tail==NULL){head <- NULL}
                else{tail.next <- NULL}
            }
        }
        return(retVal)
    }

    me bool: isEmpty() <- {
        return(head==NULL)
    }

    our infon: first() <- {
        our infon: retVal <- NULL
        protect(povLstMtx){
            if(head) {retVal <- head.pItem}
        }
        return(retVal)
    }

    our infon: last() <- {
        our infon: retVal <- NULL
        protect(povLstMtx){
            if(tail) {retVal <- tail.pItem}
        }
        return(retVal)
    }

    our POV: begin()  <- {return(head)} // Remove these 4 when iterators work correctly
    our POV: end()    <- {return(NULL)}
    our POV: rbegin() <- {return(tail)}
    our POV: rend()   <- {return(NULL)}

    our POV: front()  <- {return(head)}
    our POV: back()   <- {return(tail)}

    our POV: at(me int: N)  <- {
        our POV: retVal
        protect(povLstMtx){
            if (head == NULL){return(NULL)}
            retVal <- begin()
            withEach x in RANGE(0..N){
                retVal <- retVal.next
                if (retVal == NULL){return(NULL)}
            }
        }
        return(retVal)
    }

    me int: size() <- {
        me int: count <- 0
        protect(povLstMtx){
            our POV: pov <- head
            while(pov != NULL){
                count <- count+1
                pov <- pov.next
            }
        }
        return(count)
    }
    void: __opAssign(me PovList: povLst) <- {head<-povLst.head; tail<-povLst.tail;}
}

struct POV {}
struct PovList {}
