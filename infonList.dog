
// Infon List

model POV{ // Point-Of-View
    our infon: pItem   // The POV item
    our POV: next
    our POV: prev
    our POV: altPOV     // NEXT OR
    our POV: outerPOV   // POV outside of an alt
    their POV: pParent
    flag: looseMode
    flag: looseTop      // Top LHS/RHS pair is looseMode
    flag: looseInhtd    // Parent was looseMode
    flag: internalIdent
    flag: wasRejected
    flag: tentFromDots
    flag: isFromALT
    flag: readyToResolve
    flag: addNewSubDots
    flag: keepDots
    flag: listClosed
    flag: hasPropagated
    me int: AlternativesNestLvl
    our POV[map string]: pctTags
    our POV[list]: predecessors
    our POV[list]: candidatesForLastItem
    flag: forLastUseOutrPov
    flag: isOutrFeed
    me int: linearAltID
    flag: rejected         // At least one item on the worklist was rejected.

    our infon: dpItem() <- {
        our infon: retVal <- NULL
        our infon: crntProxy <- pItem
        while(crntProxy){
            retVal <- crntProxy
            if(retVal===crntProxy.proxy){return(retVal)} // TODO: Can we just avoid setting proxy to itself?
            crntProxy <- crntProxy.proxy
        }
        return(retVal)
    }
    me bool: isFirst() <- {return(prev==NULL)}
    me bool: isLast()  <- {return(next==NULL)}
    me bool: looseSize() <- {return(looseInhtd or looseTop)}
    me bool: looseType() <- {return(looseMode or looseTop or looseInhtd)}
    void: insertNewPctTag(me string: tag, our POV: newPOV) <- {
        /*our POV[itr map string]: tagPOV <- pctTags.find(tag)
        if(tagPOV == pctTags.end()){
            pctTags.insert(tag, newPOV)
        }else{
            tagPOV.val.item.addInfItrToWrkList(newPOV)
        }*/
    }
    void: insertChildDotsBefore(our POV: position) <- {
        our infon:: newSubDots
        newSubDots.itmMode <- mSubItems
        newSubDots.infMode <- isLiteral
        newSubDots.value.tailUnfinished <- true
        newSubDots.value.fType <- LST
        newSubDots.value.format <- fLiteral
        pItem.value.items.insertBefore(position, newSubDots)
        pItem.value.tailUnfinished <- false
    }
    void: closeItemsAtPOV(our POV: lastItem) <- {
        //log("closeItemsAtPOV:" + stringify() + "  lastItem:"+lastItem.stringify())
        if(listClosed){return()}else{listClosed<-true}
        while(!pItem.value.items.isEmpty() and !(pItem.value.items.last() === lastItem.pItem)){
            pItem.value.items.popLast()
        }
        our POV: pov <- pItem.value.items.head
        while(pov != NULL){
            pov.pItem.isTentative <- false
            //log("reseting_isTentative:"+toString(pov.pItem)+"   addNewSubDots:"+toString(pov.addNewSubDots))
            if(pov.addNewSubDots){
                pov.pParent.insertChildDotsBefore(pov)
                pov.pParent.keepDots <- false
            }
            pov <- pov.next
        }
        if(!keepDots){
            pItem.value.tailUnfinished <- false
            pItem.countSize(false)
        }
    }
    our POV: findOrAddPctTag(me string: tag) <- {
        our POV: retVal
        our POV[itr map string]: tagPOV <- pctTags.find(tag)
        if(tagPOV == pctTags.end()){
            Allocate(retVal)
            Allocate(retVal.pItem)
            pctTags.insert(tag, retVal)
        }else{
            retVal <- tagPOV.val
        }
        return(retVal)
    }
    me bool: seedTypeSpecs(our infon: newInfon, me bool: infonIsBlank) <- {
        if(newInfon.typeSpecsAlreadyCopied){return(true)}else{newInfon.typeSpecsAlreadyCopied<-true}
        their POV: lSpec <- self
        me int: typesAdded <- 0
        our TypeSpec[list]: newTypeSpecs
        while(lSpec != NULL){
            our infon: lSpecInf <- lSpec.pItem.value.listSpec
            if(lSpecInf!=NULL){
                our TypeSpec:: newTypeSpec
                    newTypeSpec.constModel <- lSpecInf
                    newTypeSpec.typeMode   <- tmListSpec
                if(lSpecInf.asWrkLstOutr){
                log("seedTypeSpecs:"+toString(lSpecInf.innr) + " sym:"+ lSpecInf.innr.mySymbol())
                    lSpecInf.innr.cnvtToFunc <- true
                    newTypeSpec.constModel <- lSpecInf.innr

                }
                newTypeSpecs.pushFirst(newTypeSpec)
                typesAdded <+- 1
            }
            if(lSpec.pItem.itmMode==mSubItems){lSpec <- lSpec.pParent}
            else{lSpec <- NULL}
        }
        if(typesAdded==0){return(false)}
        withEach tSpec in newTypeSpecs{
            //TODO: optimize with COW
            if(infonIsBlank){
                tSpec.constModel.copyAsTypeTo(newInfon, true);
                infonIsBlank<-false
            }
            else{newInfon.addInfonToWrkList(tSpec.constModel, false)} // TODO: Make this a copyAsTypeTo copy
        }

        newInfon.typeSpecs <- newTypeSpecs
        //TODO: apply outr idents
        return(true)
    }
    our POV: tryAddingTentativeChild() <- {
        me string: lenStatus <- pItem.lengthStatus()
        if(lenStatus == "L" or lenStatus == "?"){
            our infon:: newInfon
            if(!seedTypeSpecs(newInfon, true)){
                newInfon.value.fType   <- tUnknown
                newInfon.value.format  <- fUnknown
                newInfon.infMode       <- isUnknown
            }
            newInfon.itmMode       <- mItem
            our POV: newInfNode <- pItem.value.items.pushLast(newInfon)
            newInfNode.internalIdent<-false
            if(lenStatus == "?"){
                newInfon.isTentative  <- true
                newInfNode.tentFromDots <- true
            }
            return(newInfNode)
        }else if(lenStatus == "E"){
            pItem.value.tailUnfinished <- false
            return(NULL)
        }else if(lenStatus == "G"){log("INFON TOO BIG")}
        return(NULL)
    }
    our POV: getFirst(me bool: skipDots) <- { // WARNING: pItem must be a literal List.
        if(streamingNormMode){
            me MutexMngr: MtxMgr{streamingNormMutex}
            while(!pItem.parseFinished and (pItem.value.items.isEmpty() or !canStreamThoNotDone(pItem.value.items.first()))){
                streamingNormLock.wait(MtxMgr)
            }
        }
        our POV: firstNode
        if(pItem.value.items.isEmpty()){
            if(!skipDots and pItem.value.tailUnfinished){
                firstNode <- tryAddingTentativeChild()
                if(firstNode == NULL){return(NULL)}
            }else{return(NULL)}
        }else{
            firstNode <- pItem.value.items.begin()
           // seedTypeSpecs(firstNode.pItem, false)//, true)
        }
        firstNode.pParent <- self
        return(firstNode)
    }
    our POV: getNext(me bool: skipDots) <- {
        if(streamingNormMode){
            me MutexMngr: MtxMgr{streamingNormMutex}
            //log("###GNext")
            //log("    parseFinished:" + toString(pItem.parseFinished) + ";  isEmpty{}:" + next.stringify() )
            while(!pParent.pItem.parseFinished and (next==NULL or !canStreamThoNotDone(next.pItem))){
                //log("### GN-LOCKING")
                streamingNormLock.wait(MtxMgr)
                //log("### GN-UNLOCKED")
            }
            //log("### GN-DONE_WAITING on:"+toString(pItem))
        }
        our POV: nextNode <- next
        if(nextNode==NULL){
            if(!skipDots){
                if(pParent != NULL and pParent.pItem != NULL and pParent.pItem.value.tailUnfinished){
                    nextNode <- pParent.tryAddingTentativeChild()
                }
            }
        }//else{seedTypeSpecs(nextNode.pItem, false)}
        if(nextNode != NULL){nextNode.pParent <- pParent}
        return(nextNode)
    }
    our POV: getFirstTight(our infItr: ii, me bool: skipDots, their bool: was2ndVisit) <- {
        me bool: dummyFlag
        was2ndVisit <- false
        our POV: nextPOV <- getFirst(skipDots)
        if(nextPOV != NULL and nextPOV.pItem.itmMode == mSubItems){
            our POV: firstPOV <- nextPOV.getFirstTight(ii, skipDots, dummyFlag)
            if(firstPOV == NULL){nextPOV <- nextPOV.getNextTight(ii, skipDots, was2ndVisit, false, false)}
            else{nextPOV <- firstPOV}
        }
        if(nextPOV!=NULL and nextPOV.pItem.isTentative){nextPOV.altPOV <- nextPOV.getNextTight(ii, true, dummyFlag, false, false)}
        return(nextPOV)
    }
    our POV: getNextTight(our infItr: ii, me bool: skipDots, their bool: was2ndVisit, me bool: getDeep, me bool: itrBeginning) <- {
        our POV: nextPOV
        was2ndVisit <- false
        if(itrBeginning){nextPOV <- getFirstTight(ii, skipDots, was2ndVisit)}
        else{
            me bool: dummyFlag
            nextPOV <- getNext(skipDots)
            if(nextPOV == NULL){
                if(pParent==NULL or pParent.pItem.itmMode != mSubItems){was2ndVisit <- true}
                if(pParent==NULL){return(NULL)}
                our infItr: nxtInfItr <- ii
                if(was2ndVisit and ii.iParent!=NULL){nxtInfItr <- ii.iParent}
                else{if(pParent === ii.topPOV){return(NULL)}}
                if(pParent.outerPOV!=NULL){
                    nextPOV <- pParent.outerPOV.getNextTight(nxtInfItr, skipDots, dummyFlag, getDeep, itrBeginning)
                } else{
                    nextPOV <- pParent.getNextTight(nxtInfItr, skipDots, dummyFlag, getDeep, itrBeginning)
                }
            }else if(nextPOV.pItem.itmMode == mSubItems or (nextPOV.pItem.value.fType==LST and getDeep)){
                our POV: firstPOV <- nextPOV.getFirstTight(ii, skipDots, dummyFlag)
                if(firstPOV == NULL){nextPOV <- nextPOV.getNextTight(ii, skipDots, was2ndVisit, getDeep, itrBeginning)}
                else{nextPOV <- firstPOV}
            }
            if(nextPOV!=NULL and nextPOV.pItem.isTentative){nextPOV.altPOV <- nextPOV.getNextTight(ii, true, dummyFlag, getDeep, itrBeginning)}
        }
        return(nextPOV)
    }

    me bool: applyAsNot()<-{
        if(internalIdent){return(false)}
        return(pItem.asNot)
    }

    me string: stringify()<-{
        me string: S
        if(self == NULL){S <- "NULL"}
        else{S <+- pItem.mySymbol()+":"+toString(pItem)
            if(predecessors.size() >0){
                //S <+- " PREDS["
                withEach pred in predecessors{
                    //S <+- ":"+pred.mySymbol()
                }
                //S <+- "] "
            }
            if(altPOV!=NULL){S <+- "  ALT_OR:" + altPOV.stringify()}
            if(outerPOV!=NULL){S <+- "  <outerPOV:" +outerPOV.mySymbol()+" " + outerPOV.stringify()+">"}
        }
        return (S)
    }
}

model DblLinkedList: implements = list {
    our POV: head
    our POV: tail

    void: clear() <- {head <- NULL; tail <- NULL;}

    our POV: pushLast(our infon: i) <- {
        our POV:: newNode {i, NULL, tail}
        if(tail!=NULL) {tail.next <- newNode}
        if(head==NULL) {head <- newNode}
        tail <- newNode
        return(newNode)
    }
    our POV: pushFirst(our infon: i) <- {
        our POV:: newNode {i, head, NULL}
        if(head!=NULL){head.prev <- newNode}
        if(tail==NULL) {tail <- newNode}
        head <- newNode
        return(newNode)
    }
    our POV: pushAsAlt(our POV: pov, our infon: toPush, our POV: pred) <- {
        our POV: newAlt <- pushLast(toPush)
        newAlt.outerPOV <- pov
            newAlt.looseInhtd <- pov.looseInhtd
            newAlt.looseTop   <- pov.looseTop
            newAlt.looseMode  <- pov.looseMode
        newAlt.predecessors.pushLast(pred)
        return(newAlt)
    }
    our POV: erase(our POV: toDel) <- {
        our POV: retVal <- toDel.prev
        if(toDel===head){head<-head.next}
        if(toDel===tail){tail<-tail.prev}
        if(toDel.prev){toDel.prev.next <- toDel.next}
        if(toDel.next){toDel.next.prev <- toDel.prev}
        return(retVal)
    }

    our POV: insertBefore(our POV: position, our infon: i) <- {
        our POV: prevNode <- position.prev
        our POV:: newNode {i, position, prevNode}
        if(prevNode!=NULL){prevNode.next <- newNode}
        position.prev <- newNode
        if(head === position){head <- newNode}
        return(newNode)
    }

    our POV: insertAfter(our POV: position, our infon: i) <- {
        our POV: nextNode <- position.next
        our POV:: newNode {i, nextNode, position}
        if(nextNode!=NULL){nextNode.prev <- newNode}
        position.next <- newNode
        if(tail === position){tail <- newNode}
        return(newNode)
    }

    our infon: popFirst() <- {
        our infon: retVal <- head.pItem
        if(head!=NULL){
            head <- head.next
            if(head==NULL){tail <- NULL}
        }
        return(retVal)
    }

    our infon: popLast() <- {
        our infon: retVal <- tail.pItem
        if(tail!=NULL){
            tail <- tail.prev
            if(tail==NULL){head <- NULL}
            else{tail.next <- NULL}
        }
        return(retVal)
    }

    me bool: isEmpty() <- {
        return(head==NULL)
    }

    our infon: first() <- {
        if(head) {return(head.pItem)}
        return(NULL)
    }

    our infon: last() <- {
        if(tail) {return(tail.pItem)}
        return(NULL)
    }

    our POV: begin()  <- {return(head)}
    our POV: end()    <- {return(NULL)}
    our POV: rbegin() <- {return(tail)}
    our POV: rend()   <- {return(NULL)}

    our POV: at(me int: N)  <- {
        if (head == NULL){return(NULL)}
        our POV: retVal <- begin()
        withEach x in RANGE(0..N){
            retVal <- retVal.next
            if (retVal == NULL){return(NULL)}
        }
        return(retVal)
    }

    me int: size() <- {
        me int: count <- 0
        our POV: pov <- head
        while(pov != NULL){
            count <- count+1
            pov <- pov.next
        }
        return(count)
    }
}

struct POV {}
struct DblLinkedList {}
