
/- Infon List

struct infonNode{
    our infon: item
    our infonNode: next
    our infonNode: prev
}

struct infonList {
    our infonNode: head
    our infonNode: tail

    void: clear() <- {head <- NULL; tail <- NULL;}

    void: pushLast(our infon: i) <- {
        our infonNode:: newNode <- (i, NULL, tail)
        if(tail!=NULL) {tail.next <- newNode}
        if(head==NULL) {head <- newNode}
        tail <- newNode
    }
    void: pushFirst(our infon: i) <- {
        our infonNode:: newNode <- (i, head, NULL)
        if(head!=NULL){head.prev <- newNode}
        if(tail==NULL) {tail <- newNode}
        head <- newNode
    }
    void: erase(our infonNode: toDel) <- {
        if(toDel===head){head<-head.next}
        if(toDel===tail){tail<-tail.prev}
        if(toDel.prev){toDel.prev.next <- toDel.next}
        if(toDel.next){toDel.next.prev <- toDel.prev}
    }

    void: insertBefore(our infonNode: position, our infon: i) <- {
        our infonNode: prevNode <- position.prev
        our infonNode:: newNode <- (i, position, prevNode)
        if(prevNode!=NULL){prevNode.next <- newNode}
        position.prev <- newNode
        if(head === position){head <- newNode}
    }

    void: insertAfter(our infonNode: position, our infon: i) <- {
        our infonNode: nextNode <- position.next
        our infonNode:: newNode <- (i, nextNode, position)
        if(nextNode!=NULL){nextNode.prev <- newNode}
        position.next <- newNode
        if(tail === position){tail <- newNode}
    }

    our infonNode: begin()  <- {return(head)}
    our infonNode: end()    <- {return(NULL)}
    our infonNode: rbegin() <- {return(tail)}
    our infonNode: rend()   <- {return(NULL)}
}
