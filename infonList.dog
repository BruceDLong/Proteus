
// Infon List

model DblLinkedListNode{
    our infon: item
    our DblLinkedListNode: next
    our DblLinkedListNode: prev
    our infItr: altItr
    me bool: isFirst() <- {return(prev==NULL)}
    me bool: isLast()  <- {return(next==NULL)}
}

model DblLinkedList: implements = list {
    our DblLinkedListNode: head
    our DblLinkedListNode: tail

    void: clear() <- {head <- NULL; tail <- NULL;}

    our DblLinkedListNode: pushLast(our infon: i) <- {
        our DblLinkedListNode:: newNode <- (i, NULL, tail)
        if(tail!=NULL) {tail.next <- newNode}
        if(head==NULL) {head <- newNode}
        tail <- newNode
        return(newNode)
    }
    our DblLinkedListNode: pushFirst(our infon: i) <- {
        our DblLinkedListNode:: newNode <- (i, head, NULL)
        if(head!=NULL){head.prev <- newNode}
        if(tail==NULL) {tail <- newNode}
        head <- newNode
        return(newNode)
    }
    our DblLinkedListNode: pushAsAlt(our infItr: ii) <- {
        our DblLinkedListNode: newNode <- pushLast(ii.item)
        newNode.altItr <- ii
        return(newNode)
    }
    our DblLinkedListNode: erase(our DblLinkedListNode: toDel) <- {
        our DblLinkedListNode: retVal <- toDel.prev
        if(toDel===head){head<-head.next}
        if(toDel===tail){tail<-tail.prev}
        if(toDel.prev){toDel.prev.next <- toDel.next}
        if(toDel.next){toDel.next.prev <- toDel.prev}
        return(retVal)
    }

    our DblLinkedListNode: insertBefore(our DblLinkedListNode: position, our infon: i) <- {
        our DblLinkedListNode: prevNode <- position.prev
        our DblLinkedListNode:: newNode <- (i, position, prevNode)
        if(prevNode!=NULL){prevNode.next <- newNode}
        position.prev <- newNode
        if(head === position){head <- newNode}
        return(newNode)
    }

    our DblLinkedListNode: insertAfter(our DblLinkedListNode: position, our infon: i) <- {
        our DblLinkedListNode: nextNode <- position.next
        our DblLinkedListNode:: newNode <- (i, nextNode, position)
        if(nextNode!=NULL){nextNode.prev <- newNode}
        position.next <- newNode
        if(tail === position){tail <- newNode}
        return(newNode)
    }

    our infon: popFirst() <- {
        our infon: retVal <- head.item
        if(head!=NULL){
            head <- head.next
            if(head==NULL){tail <- NULL}
        }
        return(retVal)
    }

    our infon: popLast() <- {
        our infon: retVal <- tail.item
        if(tail!=NULL){
            tail <- tail.prev
            if(tail==NULL){head <- NULL}
            else{tail.next <- NULL}
        }
        return(retVal)
    }

    me bool: isEmpty() <- {
        return(head==NULL)
    }

    our infon: first() <- {
        if(head) {return(head.item)}
        return(NULL)
    }

    our infon: last() <- {
        if(tail) {return(tail.item)}
        return(NULL)
    }

    our DblLinkedListNode: begin()  <- {return(head)}
    our DblLinkedListNode: end()    <- {return(NULL)}
    our DblLinkedListNode: rbegin() <- {return(tail)}
    our DblLinkedListNode: rend()   <- {return(NULL)}

    our DblLinkedListNode: at(me int: N)  <- {
        if (head == NULL){return(NULL)}
        our DblLinkedListNode: retVal <- begin()
        withEach x in RANGE(0..N):{
            retVal <- retVal.next
            if (retVal == NULL){return(NULL)}
        }
        return(retVal)
    }

    me int: size() <- {
        me int: count <- 0
        our DblLinkedListNode: i <- head
        while(i != NULL){
            count <- count+1
            i <- i.next
        }
        return(count)
    }
}

struct DblLinkedListNode {}
struct DblLinkedList {}
