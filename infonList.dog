
// Infon List

model POV{
    our infon: item
    our POV: next
    our POV: prev
    our POV: altPOV
    flag: looseMode
    flag: looseTop
    flag: looseInhtd
    flag: wasRejected
    flag: readyToResolve
    flag: addNewSubDots
    me int: AlternativesNestLvl
    our infItr[map string]: pctTags
    our AItem[list]: predecessors
    our POV: linearAltList
    mode[cmdNoOp, delDots, keepDots, insB4Dots, insAftDots]: stitchCmd

    me bool: isFirst() <- {return(prev==NULL)}
    me bool: isLast()  <- {return(next==NULL)}
    me bool: looseSize() <- {
        return(looseInhtd!=false or looseTop!=false)
    }
    void: insertNewPctTag(me string: tag, our infItr: newItr) <- {
        /*our infItr[itr map string]: tagItr <- pctTags.find(tag)
        if(tagItr == pctTags.end()){
            pctTags.insert(tag, newItr)
        }else{
            tagItr.val.item.addInfItrToWrkList(newItr)
        }*/
    }
    our infItr: findOrAddPctTag(me string: tag) <- {
        our infItr: retVal
        our infItr[itr map string]: tagItr <- pctTags.find(tag)
        if(tagItr == pctTags.end()){
            Allocate(retVal)
            Allocate(retVal.item)
            pctTags.insert(tag, retVal)
        }else{
            retVal <- tagItr.val
        }
        return(retVal)
    }
    our infItr: makeOrItr(our infItr: nextItr) <- {
        our infon:: newListInfon
            newListInfon.itmMode        <- mItem
            newListInfon.infMode        <- isLiteral
            newListInfon.infSize.fType  <- NUM
            newListInfon.infSize.format <- fUnknown
            newListInfon.infSize.num    <- 1
            newListInfon.value.fType    <- LST
            newListInfon.value.format   <- fLiteral
            newListInfon.value.items.pushAsAlt(nextItr.infNode, nextItr.item)
        our infon:: newAltInfon
            newAltInfon.itmMode         <- mItem
            newAltInfon.infMode         <- isUnknown
            newAltInfon.intersectPos    <- ipGetLast
            newAltInfon.infSize.format  <- fUnknown
            newAltInfon.source          <- newListInfon
        our infItr:: newAltInfItr
            newAltInfItr.item           <- newAltInfon
            newAltInfItr.state          <- sNonIterable
	linearAltList			<- nextItr.infNode
        return(newAltInfItr)
    }
}

model DblLinkedList: implements = list {
    our POV: head
    our POV: tail

    void: clear() <- {head <- NULL; tail <- NULL;}

    our POV: pushLast(our infon: i) <- {
        our POV:: newNode {i, NULL, tail}
        if(tail!=NULL) {tail.next <- newNode}
        if(head==NULL) {head <- newNode}
        tail <- newNode
        return(newNode)
    }
    our POV: pushFirst(our infon: i) <- {
        our POV:: newNode {i, head, NULL}
        if(head!=NULL){head.prev <- newNode}
        if(tail==NULL) {tail <- newNode}
        head <- newNode
        return(newNode)
    }
    our POV: pushAsAlt(our POV: pov, our infon: i) <- {
        our POV: newNode <- pushLast(i)
        newNode.altPOV <- pov
        return(newNode)
    }
    our POV: erase(our POV: toDel) <- {
        our POV: retVal <- toDel.prev
        if(toDel===head){head<-head.next}
        if(toDel===tail){tail<-tail.prev}
        if(toDel.prev){toDel.prev.next <- toDel.next}
        if(toDel.next){toDel.next.prev <- toDel.prev}
        return(retVal)
    }

    our POV: insertBefore(our POV: position, our infon: i) <- {
        our POV: prevNode <- position.prev
        our POV:: newNode {i, position, prevNode}
        if(prevNode!=NULL){prevNode.next <- newNode}
        position.prev <- newNode
        if(head === position){head <- newNode}
        return(newNode)
    }

    our POV: insertAfter(our POV: position, our infon: i) <- {
        our POV: nextNode <- position.next
        our POV:: newNode {i, nextNode, position}
        if(nextNode!=NULL){nextNode.prev <- newNode}
        position.next <- newNode
        if(tail === position){tail <- newNode}
        return(newNode)
    }

    our infon: popFirst() <- {
        our infon: retVal <- head.item
        if(head!=NULL){
            head <- head.next
            if(head==NULL){tail <- NULL}
        }
        return(retVal)
    }

    our infon: popLast() <- {
        our infon: retVal <- tail.item
        if(tail!=NULL){
            tail <- tail.prev
            if(tail==NULL){head <- NULL}
            else{tail.next <- NULL}
        }
        return(retVal)
    }

    me bool: isEmpty() <- {
        return(head==NULL)
    }

    our infon: first() <- {
        if(head) {return(head.item)}
        return(NULL)
    }

    our infon: last() <- {
        if(tail) {return(tail.item)}
        return(NULL)
    }

    our POV: begin()  <- {return(head)}
    our POV: end()    <- {return(NULL)}
    our POV: rbegin() <- {return(tail)}
    our POV: rend()   <- {return(NULL)}

    our POV: at(me int: N)  <- {
        if (head == NULL){return(NULL)}
        our POV: retVal <- begin()
        withEach x in RANGE(0..N){
            retVal <- retVal.next
            if (retVal == NULL){return(NULL)}
        }
        return(retVal)
    }

    me int: size() <- {
        me int: count <- 0
        our POV: i <- head
        while(i != NULL){
            count <- count+1
            i <- i.next
        }
        return(count)
    }
}

struct POV {}
struct DblLinkedList {}
