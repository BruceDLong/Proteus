// This file implements parsing and printing of infons

struct infon{
    flag: isFunc
    flag: isFuncArg
    flag: invertFunc
    flag: parseFinished
    mode[seprNone, seprComma, seprBar]: seperator

    void: moveThisToInnr() <- {
        Allocate(innr)
        innr.itmMode      <- mItem
        innr.infMode      <- infMode
        innr.infSize      <- infSize
        innr.value        <- value
        innr.intersectPos <- ipNoIntersect
        innr.argsOnLeft   <- argsOnLeft
        innr.argPos       <- argPos
        innr.funcArgs     <- funcArgs
        value.clear()
        infSize.clear()
        argsOnLeft          <- false
        argPos              <- apNoArgs
        infMode             <- isLiteral
        value.fType         <- tUnknown
        funcArgs            <- NULL
    }
    void: postParseProcessingEtc(their ProteusCore: CORE) <- {
        if(doReply){log("DO_REPLY:True");}
        me int: numItems <- value.items.size()
        if(numItems > 0){
            our infon: lastItem <- value.items.last()
            if(lastItem.value.tailUnfinished and lastItem.itmMode == mSubItems and lastItem.infSize.format == fUnknown){
                value.tailUnfinished <- true
                value.items.popLast()
            }
        }

        // Verify all seperators are the same
        me int64: seprMode <- -1
        our POV: pov <- value.items.head
        while(pov != NULL){
            our infon: item <- pov.pItem
            pov <- pov.next
            me int64: sepr<-item.seperator
            if(seprMode==-1){
                seprMode <- sepr
                if(seprMode==seprComma and intersectPos==ipNoIntersect){
                    unordered <- true
                }
            }else if(sepr!=seprMode){
                if(sepr!=seprNone and pov!=NULL){
                    print("All Seperators in a list must match.\n\n"); exit(3)
                }
            }
        }

        if(value.tailUnfinished == false){countSize(false)}

        if(isFunc or isFuncArg){
            if(isFuncArg != 0){  // Swap func body with args
                our infon:: CI_args
                CI_args <deep- self
                self <deep- CI_args.funcArgs
                invertFunc <- CI_args.invertFunc
                funcArgs <- CI_args
                funcArgs.funcArgs <- NULL
                funcArgs.isFunc <- false
                funcArgs.isFuncArg <- false
                argsOnLeft <- true
            } else {argsOnLeft <- false}
            isFunc <- false
            isFuncArg <- false

            if(invertFunc){argPos <- apArgIsLastItem}
            else{argPos <- apArgIsFirstItem}
        }else{argPos <- apNoArgs}

        if(value.intersectPosParse == ipSquareBrackets and innr==NULL){
            moveThisToInnr()
            if(invertFunc){
                intersectPos <- ipGetFirst
            } else {
                intersectPos <- ipGetLast
            }
        }

//log("****** POST_PARSED:" + infonPrinter.printInfon(self))
        me MutexMngr: MtxMgr{streamingNormMutex}
        parseFinished <- true
        streamingNormLock.notifyOne()
//log("POST_PARSED-Z:" + infonPrinter.printInfon(self))
    }
}


struct ProteusParser: inherits=EParser{
    their ProteusCore: CORE

    void: postParseProcessingEtc_infon(their infon: infn) <- {
        infn.postParseProcessingEtc(CORE)
    }

    void: filterAmbiguities(our stateRec: SRec, our List<our stateRec>:causeList) <- {
        // Modifiy this function externally to adjust for ambiguous grammars.
        if(causeList.size()>1){
            //log("AMGIBUITY:"+toString(prodID)+" ("+grammar[prodID].nameToStr(rnames)+")")
            me int: prodID <- SRec.productionID
            if(prodID==POV_str){
                me int: highestSpanIdx <- 0
                me int64: highestSpan  <- 0
                me int: count <- 0
                withEach cause in causeList{
                    me int: span <- cause.span()
                    if(span > highestSpan){
                        highestSpanIdx <- count
                        highestSpan    <- span
                    }
                    count <+- 1
                }
                our stateRec: itemChosen <- causeList[highestSpanIdx]
                causeList.clear()
                causeList.append(itemChosen)
            }
        }
    }

}

struct POV{
    void: postParseProcessing() <- {
        withEach part in pItem.parts{
            if(part.pathMode==upField){}
        }
    }
}

struct WordDefn{
    void: postParseProcessing() <- {
        withEach utag in UsageTags{trimWS(utag)}
    }
}
///////////////////////////////// Parse definitions
#define LISTBODY(LEFT_BRKT, RIGHT_BRKT) <% >{ "%"[opt]:altUse "LEFT_BRKT" "T"[opt]:timelike  >me listInfo[opt] >our listItem[list]: items >wsc "RIGHT_BRKT" } %>

string WordUse{ >UniID:asGiven}

string UsageTag{ >UniID:UsageTags >wsc}

string WordDefn{
    >{>UniID:defWord >wsc >{"<" >wsc >UsageTag[list]:UsageTags ">"}[opt]}
}
string PartPath{
    >{>[ ("." <=> pathMode = dotField;hasSemiColon = true;)
       | ("^" <=> pathMode = upField; hasSemiColon = true;)
       | ("#" <=> pathMode = idxField;hasSemiColon = true;)
     //  | (":" <=> pathMode = colonField;)
       ] > our infon:path > ws ";" >wsc}
}
string PartRef{
    >{>[ ("." <=> pathMode = dotField;)
       | ("^" <=> pathMode = upField;)
       | ("#" <=> pathMode = idxField;)
       ] > our infon:path >wsc}
}
string POV{
    >[ ("=" <=> looseMode=false;) | ("==" <=> looseMode=true;) ] ":"[opt]:looseTop > our infon:pItem
}
string listInfo[
        >{ >{"~" >our pureInfon: size}[opt]:Size >ws "C" >our infon:listSpec "|"[opt]}
     |  >{ >{"~" >our pureInfon: size}[opt]:Size         >our infon:listSpec "|"}
     |  >{ "~" >our pureInfon: size >wsc "|"[opt]}
]
string listItem{
    >wsc
     >[ (>{"@" > ws > WordDefn:definedWord > wsc "=" > our infon:funcArgs} <=> itmMode=mWordDefn;)
      | (>our infon:inf <=> itmMode=mItem;)
      | ("..." <=>
            itmMode             = mSubItems;
            value.format        = fLiteral;
            infSize.format      = fUnknown;
            value.fType         = LST;
            infMode             = isLiteral;
            value.tailUnfinished= true;
      )
      | (>{"&" >our infon:inf} <=> itmMode=mSubItems;)
      | (>{"%INSERT " >toEOL:includeSpec} <=> itmMode=mIncludeStream;)
      | (>{"%proteus:" >our infon:includeInfn} <=> itmMode=mIncludeParseStr;)
      ]
      >{ >wsc >[("," <=> seperator=seprComma;) | ("|" <=> seperator=seprBar;)] }[opt]
}
string pureInfon{
    >wsc
    >[ ( >[ (>{>["0x"|"0X"]>HexNum: num} <=> format = fLiteral; numBase = bHex;)
          | (>{>["0b"|"0B"]>BinNum: num} <=> format = fLiteral; numBase = bBin;)
          |(>FlexNum: num <=> format = fLiteral; numBase = bDec;)
          | ("_" <=> format = fUnknown; num=0; )
          ]   <=>  fType = NUM;)
     | ( >[ (>string: str <=> format = fLiteral;) | ("$" <=> format = fUnknown; str="";)]   <=>  fType = STR;)
     | ( >[ (LISTBODY({,}) <=> format=fLiteral; intersectPosParse=ipDefault;)
          | (LISTBODY([,]) <=> format=fLiteral; intersectPosParse=ipSquareBrackets;)
          | (LISTBODY((,)) <=> format=fConcat;  intersectPosParse=ipDefault;)
          ]  <=>  fType = LST;)
     ]
}
string funcParts{
    >our POV[list]:wrkList
    >{ >[ ("<:" <=> isFunc=true; isFuncArg=false; invertFunc=false;)
        | (":>" <=> isFunc=false; isFuncArg=true; invertFunc=false;)
        | ("<!" <=> isFunc=true; isFuncArg=false; invertFunc=true;)
        | ("!>" <=> isFunc=false; isFuncArg=true; invertFunc=true;)
        | ("<~" <=> hasInnrOutr=true;)
        ]
        >our infon:funcArgs
    }[opt]
    >our PartPath[list]: parts
    >our PartRef[opt]: partRef
}
string innerInfon{
    >[ ( "?" <=> infMode=isUnknown;  value.format=fUnknown;  infSize.format=fUnknown;)
     | ( >{ "%" >
         [ ("this" <=> cursorMode=cThis;)
         | ("W"    <=> cursorMode=cWorld;)
         | ("ctx"  <=> cursorMode=cContext;)
         | ("args" <=> cursorMode=cArgs;)
         | ("vars" <=> cursorMode=cVars;)
         ]} <=> infMode=newCursor;)
     | ( >
          [(>
            { > [("*" <=>  infSize.inverted = false; )
                |("/" <=>  infSize.inverted = true;  )
                ]
               > me pureInfon: infSize >wsc >
                [("+" <=> value.inverted = false; )
                |("-" <=> value.inverted = true;  )
                ]
               > me pureInfon: value
            } <=> infSize.fType=NUM; value.sizeMode=fromGiven;)
          | (>{ >wsc >[("+" <=> value.inverted = false; ) | ("-" <=> value.inverted = true; ) ] > me pureInfon: value}  <=> infSize.num=0; infSize.fType=NUM; infSize.format=fUnknown; value.sizeMode=fromContext;)
          | (>{ >me pureInfon: value}  <=> infSize.num=0; infSize.fType=NUM; infSize.format=fUnknown; value.sizeMode=fromCount;)
          ]   <=>   infMode=isLiteral;
        )
     ]
}
string infon: StartSymbol="true" {
    >wsc
    "!"[opt]:asNot
    >[>{>WordUse:type}
     |( >{>WordUse:type >ws ":" >wsc >innerInfon}  <=> hasTypeAndValue = true;)
     |>innerInfon
     ]
    >ws>funcParts
    "`"[opt]:doReply
}

///////////////////////////////// Infon to string
struct GLOBAL{
    me InfonPrinter: infonPrinter

    me string: stringifyPreds(our POV: pov, me string: indent) <- {
        me string: S <- indent + pov.mySymbol() +":"+pov.stringify()+"\n"
        indent <+- "    "
        withEach pred in pov.predecessors{
            S <+- indent +"PRED:"+ pred.mySymbol() +":"+pred.stringify()+"\n"
        }
        withEach last in pov.candidatesForLastItem{
            S <+- indent +"LAST:"+ last.mySymbol() +":"+last.stringify()+"\n"
        }
        if(pov.pItem.value.fType == LST){
            our POV: itm <- pov.pItem.value.items.head
            while(itm != NULL){
                S <+- stringifyPreds(itm, indent+">>")
                itm <- itm.next
            }
        }
        if(pov.pItem.innr != NULL){
            S <+- indent+"-------\n"
            our POV: srcItm <- pov.pItem.innr.value.items.head
            while(srcItm != NULL){
                S <+- stringifyPreds(srcItm, indent)
                srcItm <- srcItm.next
            }
            S <+- indent+"-------\n"
        }
        return(S)
    }
    me string: bigStringify(our infon: i, me string: indent) <- {
        me string: S <- indent + i.mySymbol()+ ":" +toString(i)+"\n"
        withEach pov in i.wrkList{
            S <+- indent + "        =" + pov.mySymbol()+"\n"
            S <+- bigStringify(pov.pItem, indent + "            =")
        }
        me int: count <- 0
        our POV: p <- i.value.items.head
        while(p != NULL){
            S <+- indent + "    |" + p.mySymbol()+"\n"
            S <+- bigStringify(p.pItem, indent + "      |")
            count <- count+1
            p <- p.next
        }
        return(S)
    }
    me string: toString(their infon: i) <- {
        return(infonPrinter.printInfon(i))
    }
}
struct InfonPrinter{
    me bool: debugPrint <- true
    me bool: isListWithDots(their pureInfon: pure) <- {
        if(pure.fType!=LST){ return(false)}
        if(pure.format==fLiteral){
            our POV: pov <- pure.items.head
            while(pov != NULL){
                our infon: item <- pov.pItem
                if(item.value.tailUnfinished){
                    return(true)
                }
                pov <- pov.next
            }
        }
        if(pure.tailUnfinished){return(true)}
        return(false)
    }

    me string: addFuncArgs(me string: funcStr, me string: argStr, me int: argsOnLeft, me int: argPos, me string: tmpChar) <- {
        me string: S
        me string: invertChar <- ":"
        if(argPos==apArgIsLastItem){invertChar <- "!"}
        if(argsOnLeft){S <- argStr + invertChar + ">" + funcStr}
        else{S <- funcStr + "<" + tmpChar+ invertChar + argStr}
        return(S)
    }

    me bool: isNiceList(their pureInfon: pure, their infon: parentInfon) <- {
        return(parentInfon.wasProcessed and pure.format==fLiteral and !pure.tailUnfinished)
    }

    me string: printPureInfon(their pureInfon: pure, their pureInfon: size, me bool: asInnr, their infon: parentInfon, our Map<me string,me int>: used) <- {
        me string: S <- ""
        me bool: showSize <- size!=NULL and (
            (((pure.sizeMode==fromGiven) and (pure.fType!=LST or pure.format!=fLiteral))
            or (pure.fType!=NUM and size.format==fUnknown and pure.format==fLiteral))
            and !isListWithDots(pure)
        )
        if(showSize){S <+- printPureInfon(size, NULL, false, parentInfon, used)}
        if(pure.inverted){
            if(size!=NULL or pure.sizeMode==fromContext){S <+- "-"}
            else if(pure.isLstSize==0){S <+- "/"}
        }else{
            if(showSize or pure.sizeMode==fromContext){S <+- "+"}
            else if(size==NULL and pure.isLstSize==0){S <+- "*"}
        }
        if(pure.fType == NUM){
            if(pure.format == fUnknown){S <+- "_"}
            else{
                me FlexNum:N <- pure.num
                S <+- N.stringify()
            }
        }else if(pure.fType == STR){
            if(pure.format == fUnknown){S <+- "$"}
            else{
                me string: str <- pure.str
                S <+- "'"+ str + "'"
            }
        }else if(pure.fType == LST){
            me bool: showBar<-false
            me string: strtBrkt<-"{"
            me string: endBrkt <-"}"
            if(asInnr){strtBrkt<-"["; endBrkt<-"]"}
            else if(pure.format == fConcat) {strtBrkt<-"("; endBrkt<-")"}
            S <+- strtBrkt
            if(pure.timelike){S <+- "T "}
            if(pure.size!=NULL) {pure.size.isLstSize <- true}
            if(pure.size!=NULL and pure.format==fLiteral){S <+- "~"+printPureInfon(pure.size, NULL, false, parentInfon, used) showBar<-true}
            if(pure.listSpec!=NULL and !isNiceList(pure, parentInfon)){
                if(showBar){S <+- " "}
                S <+- printInfonActual(pure.listSpec, used)
                showBar<-true
            }
            if(showBar){S <+- "| "}
            our POV: itemItr <- pure.items.begin()
            me bool: firstTime <- true
            while(itemItr){
                if(!firstTime){
                    if(parentInfon.unordered){S <+- ", "}
                    else{S <+- " "}
                } else {firstTime <- false}
                S <+- printInfonActual(itemItr.pItem, used)
                itemItr <- itemItr.next
            }
            if(pure.tailUnfinished){S <+- " ... "}
            S <+- endBrkt
        }else if(pure.fType == tUnknown){
        }else if(pure.fType == tUnset){
            S <+- "tUnset"
        }else{logFatalError("Unknown fType in printPureInfon(): "+ toString(pure.fType))}
        return(S)
    }

    me string: printInfonActual(their infon: i, our Map<me string, me int>: used) <- {
        me string: S <- ""
        if(i ==  NULL){return("NULL")}
        if(i.isTentative){S <+- "t"}
        me string: iSymbol <- i.mySymbol()
        if(used.containsKey(iSymbol)){return(iSymbol)}
        else{used[iSymbol]<-1}
        if(i.asNot){S <+- "!"}
        if(i.type!=NULL and i.itmMode!=mWordDefn){
            me string: wordSysString <- i.type.asGiven
            if(wordSysString==""){wordSysString<-"ERROR: NULL-TAG"}
            S <+- wordSysString
            if(i.infMode == isUnknown){
                return(S)
            }else{S <+- ":"}
        }
        me bool: isMDots
        if(i.itmMode==mSubItems){
            if((i.value.tailUnfinished and i.infSize.format==fUnknown and i.value.items.size()==0) and i.value.listSpec==NULL){
                S<+-"..."
                isMDots <- true
            }
            else{
                if(debugPrint){S<+-"&"}
                else{
                    if(i.value.format==fLiteral){
                        our POV: itemItr <- i.value.items.begin()
                        me bool: firstTime <- true
                        while(itemItr){
                            if(!firstTime){S <+- " "} else {firstTime <- false}
                            S <+- printInfonActual(itemItr.pItem, used)
                            itemItr <- itemItr.next
                        }
                        if(i.value.tailUnfinished){S <+- " ... "}
                        isMDots <- true
                    }
                }
            }
        }
        else if(i.itmMode==mWordDefn){
            S<+-"@"+i.definedWord.defWord +" "
            if(! i.definedWord.UsageTags.isEmpty()){S<+-"<"}
            withEach usageTag in i.definedWord.UsageTags{
                S <+- usageTag+" "
            }
            if(! i.definedWord.UsageTags.isEmpty()){S<+-">"}
            S<+-"= "+printInfonActual(i.funcArgs, used)
            return(S)
        }
        else if(i.itmMode==mIncludeStream){
            S<+-"%INSERT "+i.includeSpec
        }
        if(!isMDots){
            if(i.infMode==isUnknown){ S <+-"?"}
            else if(i.infMode==newCursor){
                S <+- "%"
                switch(i.cursorMode){
                    case cThis:   {S <+- "this"}
                    case cWorld:  {S <+- "W"}
                    case cContext:{S <+- "ctx"}
                    case cArgs:   {S <+- "args"}
                    case cVars:   {S <+- "vars"}
                }
            }
            else if(i.infMode==isLiteral){
                if(i.intersectPos == ipNoIntersect){
                    S <+- printPureInfon(i.value, i.infSize, false, i, used)
                } else {
                    S <+- printPureInfon(i.innr.value, i.innr.infSize, true, i, used)
                    if (i.innr.argPos != apNoArgs){
                        S <- addFuncArgs(S, printInfonActual(i.innr.funcArgs, used), i.innr.argsOnLeft, i.innr.argPos, "")
                    }
                }
            }
            else {logFatalError("Invalid infMode in printInfonActual()\n")}
        }
        if(i.isNormed ==0){
            withEach WorkItm in i.wrkList{
                if(!WorkItm.looseMode and !WorkItm.looseInhtd){ S <+- " ="}
                else { S <+- " =="}
                if(WorkItm.looseTop){ S <+- ":"}
                S <+- " "
                S <+- printInfonActual(WorkItm.pItem, used)
            }

            if (i.argPos != apNoArgs){
                S <- addFuncArgs(S, printInfonActual(i.funcArgs, used), i.argsOnLeft, i.argPos, "")
            }
        }

        withEach part in i.parts{
            if(! part.wasTransfered){
                if(part.pathMode == dotField){S <+- "."}
                else if(part.pathMode == colonField){S <+- ":"}
                S <+- printInfonActual(part.path, used)
                if(part.hasSemiColon){S <+- "; "}
            }
        }
        if(i.partRef != NULL){
            if(i.partRef.pathMode == dotField){S <+- "."}
            else if(i.partRef.pathMode == colonField){S <+- ":"}
            S <+- printInfonActual(i.partRef.path, used)
        }
if(i.doReply){S <+- "~"}
//S <- "("+S+")"
        return(S)
    }
    me string: printInfon(their infon: i) <- {
        our Map<me string, me int>:: used
        return(printInfonActual(i, used))
    }

}
