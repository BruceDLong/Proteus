struct ModelManager {
    our WordDefn[multimap string]: classToModel
    void: indexDefinition(our WordDefn: classID, our infon: infModel) <- {
        classID.meaning <- infModel
        if(!classID.usageTags.isEmpty()){
            classID.localeTag <- unicodeMgr.normalizeStr(classID.usageTags[0])
        }
        classToModel.insert(unicodeMgr.normalizeStr(classID.asGiven), classID)
    }
    our infon: fetchModel(their Agent: agent, our WordDefn: classID) <- {
        our infon: retVal
        our infon: lastMatch
        me string: asGiven <- unicodeMgr.normalizeStr(classID.asGiven)
        me string: locale  <- unicodeMgr.normalizeStr(agent.getLocaleBaseName())
        withEach wordDef in classToModel from asGiven to asGiven{
            if(wordDef.localeTag==locale){retVal <- wordDef.meaning}
            lastMatch <- wordDef.meaning
        }
        if(retVal==NULL){retVal<-lastMatch}
        return(retVal)
    }
}
