struct ModelManager {
    our WordDefn[multimap string]: classToModel
    void: indexDefinition(our WordDefn: wordS, our infon: infModel) <- {
        wordS.meaning <- infModel
        wordS.asGiven <- unicodeMgr.normalizeStr(wordS.asGiven)
        me int: underScorePos <- findString(wordS.asGiven, "_")
        if(underScorePos!=-1){
            wordS.wordID  <- wordS.asGiven.subStr(underScorePos+1, wordS.asGiven.size())
            wordS.asGiven <- wordS.asGiven.subStr(0, underScorePos)
        }
        if(!wordS.usageTags.isEmpty()){
            wordS.localeTag <- unicodeMgr.normalizeStr(wordS.usageTags[0])
        }
        classToModel.insert(unicodeMgr.normalizeStr(wordS.asGiven), wordS)
    }
    our infon: fetchModel(their Agent: agent, our WordDefn: wordS) <- {
        our infon: retVal
        our infon: lastMatch
        me string: asGiven      <- unicodeMgr.normalizeStr(wordS.asGiven)
        me string: agentLocale  <- unicodeMgr.normalizeStr(agent.getLocaleBaseName())
        me string: wordLocale   <- wordS.localeTag
        if(wordLocale==""){wordLocale<-agentLocale}
        me string: wordID
        me int: underScorePos   <- findString(asGiven, "_")
        if(underScorePos!=-1){
            wordID  <- asGiven.subStr(underScorePos+1, asGiven.size())
            asGiven <- asGiven.subStr(0, underScorePos)
        }
        if(wordID!=""){
            withEach wordDef in classToModel from asGiven to asGiven{
                if(wordID==wordDef.wordID){
                    if(wordLocale==agentLocale){
                        retVal <- wordDef.meaning
                        return(retVal)
                    }
                }
            }
        }else{
            withEach wordDef in classToModel from asGiven to asGiven{
                if(wordLocale==agentLocale){
                    retVal <- wordDef.meaning
                    return(retVal)
                }
                lastMatch <- wordDef.meaning
            }
            if(retVal==NULL){retVal<-lastMatch}
        }
        return(retVal)
    }
}
