// ModelManager.dog

struct GLOBAL{
    const int: tvFalse    <- 0
    const int: tvTrue     <- 1
    const int: tvUnknown  <- 2
    me int: currentSessionModelID <- 0
    me Inflect: inflect
}
//struct partOfSpeech: inherits=<mode[posUnknown, posNone, posFuncWord, posNoun, posVerb, posAdj, posAdv, posNegotiator, posName, posNum]> {}

model WordDefn{
    me string: defWord
    me string: modelID
    me List<me string>: UsageTags
    our infon: meaning
    me string: langSpecTag      // e.g., 'eng:us:southern::slang'
    mode[posUnknown, posNone, posFuncWord, posNoun, posVerb, posAdj, posAdv, posNegotiator, posName, posNum]: defPOS     // The primary use for this word in speech
    me bool: tagExists(me string: tag) <- {
        withEach usageTag in UsageTags{
            if(usageTag==tag){return(true)}
        }
        return(false)
    }
    void: clear() <- {defWord<-""; modelID<-""; UsageTags.clear()}
}
struct WordDefn{}

model WordUse{
    me string: asGiven
    me string: normedWord
    me string: modelID
    flag: typeInitialized  // True if an infon of this type has been initialized by this type
    our WordDefn: baseDefinition
    our infon: defToUse  // Definition after POS mods
    mode[mpNotDone, normIsBase, N2Plural, N2Genative, N2PluralGenative, V2S_form, V2ed, V2ing,
         adj2er, adj2est, edv2er, adv2est, adj2adv_ly, wordFromAffixes, compoundWord, mpOther]: mapFromBase
    mode[posUnknown, posNone, posFuncWord, posNoun, posVerb, posAdj, posAdv, posNegotiator, posName, posNum]: usePOS

    mode[wmPreFetch, wmFetchModels, wmTryHarder, wmAssembleAlt, wmDONE]: nextStage
    mode[vfNone, vfBase, vfPastSimple_ed1, vfPastParticiple_ed2, vfPresentParticiple_ing, vf3rdPersonPresentSimple_s]: verbForm
    mode[fConjunction, fPreposition, fAuxVerb, fPronoun, fDeterminer, fQuantifer]: functionWordType
    mode[numWord, numOrdinal, numCardinal, numNominal, numInfonal]: numberWordType
    flag: meaningNotFound
    flag: plural
    flag: possessive
    flag: base_ING_AsGerund   // Change a verb to a noun: *Swimming* is fun. *Eating sweets* can harm your teeth

    void: setAsGiven(me string: given) <- {
        asGiven<-given
        normedWord <- unicodeMgr.normalizeStr(given)
    }
    me string: givenType() <- { // This returns the words just as they were given
        return(asGiven)
    }
    me string: normalType() <- { // This returns the normalized form of the words
        return(normedWord)
    }
    me string: typeID() <- { // This returns the selected, normalized type. Use for comparing types.
      //  if(mapFromBase==mpNotDone){return("")} // Type is not yet valid.
        if(modelID==""){return(normedWord)}
        return(normedWord+"_"+modelID)
    }
    me string: langWord( ) <- { // This returns the words for printing in a language.
        return(normedWord)
    }
    me string: definitionID() <- { // This returns an ID unique to the base definition.
        return("")
    }
    void: clear() <- {flags <- 0; asGiven<-""; normedWord<-""}
    me string: stringify() <- {
        me string: S <- ""
        if(asGiven!=""){S<+-" asGiven:"+asGiven}
        if(defToUse){S<+-" defToUse:"+toString(defToUse)}
        return(S)
    }
    none: WordUse(me string: word, our WordDefn: wordD) <- {
        setAsGiven(word)
        modelID        <- wordD.modelID
        baseDefinition <- wordD
        defToUse       <- wordD.meaning
        usePOS         <- wordD.defPOS
    }
}
struct WordUse{}

struct vocabularySpec{
    me string: langSpec
    me string: baseLang
    void: init(me string: languageSpec) <- {
        // TODO: add more detail as needed
        langSpec       <- unicodeMgr.normalizeStr(languageSpec)
        baseLang       <- ""
        withEach pos in RANGE(0..langSpec.size()){
            me char: ch  <- langSpec[pos]
            if(ch=="_" or ch=="-"){break()}
            baseLang <+- ch
        }
    }
}

struct GLOBAL{
    me bool: checkEnd(me string: word, me string: sufx, their int: sSze) <- {
        me int: wSize <- word.size()
        me int: sSize <- sufx.size()
        if(wSize <= sSize){return(false)}
        withEach idx in RANGE(1..sSize+1){
            if(word[wSize-idx] != sufx[sSize-idx]){
                return(false)
            }
        }
        sSze <deep- sSize
        return(true)
    }
}

struct AgentContext {
    our infon: topicHistory

    void: addContextItem(our infon: itemToAdd) <- {
        if(itemToAdd.asNot){return()}
        if(topicHistory.value.items.first() === itemToAdd){return()}
        //:l/PAI::logSeg("-add2Ctx")
        // Remove any already-existing references to itemToAdd
        our POV: pov <- topicHistory.value.items.head
        while(pov != NULL){
            if(pov.dpItem() === itemToAdd){
                pov <- topicHistory.value.items.erase(pov)
            } else {pov <- pov.next}
        }

        topicHistory.value.items.prepend(itemToAdd, 400)
        //log("  ADD_TO_CTX: added:"+itemToAdd.mySymbol()+": "+toString(itemToAdd)+"  size:"+toString(topicHistory.value.items.size()))
        if(itemToAdd.proxy!=NULL){log("       PROXY:"+itemToAdd.proxy.mySymbol())}
        cull(10)
    }
    our infon: searchFor() <- {
        return(NULL)
    }
    void: cull(me int: maxItems) <- {
        while(topicHistory.value.items.size()>maxItems){
            topicHistory.value.items.popLast()
        }
    }

    void: init() <- {
        Allocate(topicHistory)
        topicHistory.setToList()
        topicHistory.value.tailUnfinished <- false
        topicHistory.dontProcess <- true
    }
}
struct ModelManager {
    me Multimap<me string, our WordDefn>: wordToModel
    // TODO: me Multimap<me string, our infon>: wordsWaitingForDefinition

    me bool: completeItemsType(our infon: item) <- {
        if(item.type==NULL){
            our pureInfon: val <- item.value
            if(val.fType==LST and val.format==fLiteral){
                our infon: listSpec <- val.listSpec
                if(listSpec!=NULL and listSpec.type!=NULL and listSpec.type.asGiven!="" and listSpec.type.plural==false){
                    me string: newTypeStr <- inflect.convert_to_modern_plural(listSpec.type.normalType())
                    our WordUse:: newType
                    newType.setAsGiven(newTypeStr)
                    newType.plural  <- true
                    item.type       <- newType
                    item.wordDerefed <- true
                }
            }
        }else{return(false)}
        return(true)
    }

    void: indexDefinition(their Agent: agent, our WordDefn: wordD, our infon: infModel) <- {
        // Set Meaning
        wordD.meaning <- infModel
        //Normalize and separate the word and modelID
        wordD.defWord <- unicodeMgr.normalizeStr(wordD.defWord)
        me int: underScorePos <- findString(wordD.defWord, "_")
        if(underScorePos!=-1){
            wordD.modelID <- wordD.defWord.subStr(underScorePos+1, wordD.defWord.size())
            wordD.defWord <- wordD.defWord.subStr(0, underScorePos)
        }else{
            currentSessionModelID <+- 1
            wordD.modelID <- "ses"+toString(currentSessionModelID)
        }
        // Set the locale
        if(!wordD.UsageTags.isEmpty()){
            wordD.langSpecTag <- unicodeMgr.normalizeStr(wordD.UsageTags[0])
        }else{wordD.langSpecTag <- unicodeMgr.normalizeStr(agent.getLocaleBaseName())}

        withEach tag in wordD.UsageTags{
            if(tag=="det" or tag=="quantfr" or tag=="quantfr" or tag=="ProN" or tag=="verbHlpr" or tag=="prep" or tag=="conj"){wordD.defPOS <- posFuncWord}
            else if(tag=="noun"){wordD.defPOS <- posNoun; log("SET_AS_NOUN")}
            else if(tag=="verb"){wordD.defPOS <- posVerb}
            else if(tag=="adj") {wordD.defPOS <- posAdj}
            else if(tag=="adv") {wordD.defPOS <- posAdv}
            else if(tag=="nego"){wordD.defPOS <- posNegotiator}
            else if(tag=="name"){wordD.defPOS <- posName}
            else if(tag=="num"){wordD.defPOS  <- posNum}
            else{wordD.defPOS  <- posNone}
        }
        // Store to multimap
        //log("STORE_DEF: '"+wordD.defWord+"'")
        wordToModel.insert(wordD.defWord, wordD)
    }

    //me ModelID: findModelIDFromInfon(our infon: inf) <- {}
    //our infon: findModelFromModelID(me ModelID: modelID) <- {}
    //our wordList: findWordsForMeaningID(me ModelID: modelID, their vocabularySpec: vSpec) <- {}

    me bool: wordValidForLang(me string: lSpec, their vocabularySpec: vSpec) <- {
        if(lSpec=="" or lSpec==vSpec.baseLang or lSpec==vSpec.langSpec){return(true)}
        return(false)
    }

    me int: lookupWord(me string: word, their vocabularySpec: vSpec, their List<our WordDefn>:results) <- {
        me int: count <- 0
        withEach wordDef in wordToModel from word to word{
            //log("DE_REF_WORD:"+word+"  -->  "+wordDef.defWord+"_"+wordDef.modelID)
            if(wordValidForLang(wordDef.langSpecTag, vSpec)){
                results.append(wordDef)
                count <+- 1
            }
        }
        return(count)
    }

    me int: FetchBasePlusPOS_forms_stage1(me string: word, their vocabularySpec: vSpec, their List<our WordUse>:results) <- {
        // TODO: Reversably tablize this
        me int: numDefsBefore <- results.size()
        me List<our WordDefn>: resultDefns
        me int: numAdded <- lookupWord(word, vSpec, resultDefns)
        withEach idx in RANGE(numDefsBefore..numDefsBefore+numAdded){
            our WordUse:: newWordUse{word, resultDefns[idx]}
            newWordUse.mapFromBase    <- normIsBase
            results.append(newWordUse)
        }
        if(numAdded==1 and resultDefns[0].defPOS==posFuncWord){
            return(numAdded)
        }
        me string: wrd <- word
        me int: wLen <- wrd.size()
        me int: sSze <- 0
        me string: baseTry
        numDefsBefore <- resultDefns.size()
        if(checkEnd(wrd, "s'", sSze)){
            me string: preSufx <- wrd.subStr(0, wLen-sSze)
            numAdded <- lookupWord(preSufx, vSpec, resultDefns)
            withEach idx in RANGE(numDefsBefore..numDefsBefore+numAdded){
                if(resultDefns[idx].defPOS==posNoun){
                    our WordUse:: newWordUse{word, resultDefns[idx]}
                    newWordUse.mapFromBase    <- N2PluralGenative
                    newWordUse.possessive     <- true
                    newWordUse.plural         <- true
                        Allocate(newWordUse.defToUse)
                        newWordUse.defToUse.setSelfAsAPluralOf(resultDefns[idx].meaning)
                    results.append(newWordUse)
                }
            }
        } else if(checkEnd(wrd, "'s", sSze)){
            me string: preSufx <- wrd.subStr(0, wLen-sSze)
            numAdded <- lookupWord(preSufx, vSpec, resultDefns)
            withEach idx in RANGE(numDefsBefore..numDefsBefore+numAdded){
                if(resultDefns[idx].defPOS==posNoun){
                    our WordUse:: newWordUse{word, resultDefns[idx]}
                    newWordUse.mapFromBase    <- N2Genative
                    newWordUse.possessive     <- true
                    results.append(newWordUse)
                }
            }
        } else if(checkEnd(wrd, "ed", sSze) or checkEnd(wrd, "ing", sSze) or checkEnd(wrd, "er", sSze) or checkEnd(wrd, "est", sSze)){
            me string: preSufx <- wrd.subStr(0, wLen-sSze)
            me int: preSSze <- preSufx.size()
            if(preSSze >= 2){
                me string: preSfx <- preSufx.subStr(preSSze-2, 2)
                if(preSfx=="ll"){
                    baseTry <- preSfx.subStr(0, preSSze-1)  // eng:us
                    baseTry <- preSfx                       // eng:uk
                } else if(preSfx=="ng" or preSfx=="el" or preSfx=="al" or preSfx=="ol"){
                    baseTry <- preSfx
            //    } else if(isConsonant(preSfx[0]) and preSfx[0]==preSfx[1]){
            //        baseTry <- preSfx.subStr(0, preSSze-1)
                } else{
                    baseTry <- preSfx
                }
            }
        } else if(checkEnd(wrd, "ly", sSze)){
            me string: preSufx <- wrd.subStr(0, wLen-sSze)
            numAdded <- lookupWord(preSufx, vSpec, resultDefns)
            withEach idx in RANGE(numDefsBefore..numDefsBefore+numAdded){
                if(resultDefns[idx].defPOS==posAdj){
                    our WordUse:: newWordUse{word, resultDefns[idx]}
                    newWordUse.mapFromBase    <- adj2adv_ly
                    newWordUse.usePOS         <- posAdv
                    results.append(newWordUse)
                }
            }
        } else {
            me string: wrdSingular <- inflect.convert_to_singular(wrd)
            if(wrdSingular!=wrd){
                numAdded <- lookupWord(wrdSingular, vSpec, resultDefns)
                //log("Plural_TRY:"+wrdSingular + "  numAdded:"+toString(numAdded))
                withEach idx in RANGE(numDefsBefore..numDefsBefore+numAdded){
resultDefns[idx].defPOS<-posNoun
                    if(resultDefns[idx].defPOS==posNoun){
                        our WordUse:: newWordUse{word, resultDefns[idx]}
                        newWordUse.mapFromBase    <- N2Plural
                        newWordUse.plural         <- true
                            Allocate(newWordUse.defToUse)
                            newWordUse.defToUse.setSelfAsAPluralOf(resultDefns[idx].meaning)
                        results.append(newWordUse)
                    }else if(resultDefns[idx].defPOS==posVerb){
                        our WordUse:: newWordUse{word, resultDefns[idx]}
                        newWordUse.mapFromBase    <- V2S_form
                        newWordUse.verbForm       <- vf3rdPersonPresentSimple_s
                        results.append(newWordUse)
                    }
                }
            }
        }
        return(results.size())
    }

    me int: FetchBasePlusPOS_forms_stage2(me string: word, their vocabularySpec: vSpec, their List<our WordUse>:results) <- {
        // Try any items missed or not chosen yet. Try making words from context including from prefixes and suffixes.
        return(0)
    }


    our infon: constructAltModelFromWord(their Agent: agent, our WordUse: wordS, their vocabularySpec: vSpec, me string: scopeID) <- {
        me string: wordsType <- wordS.normalType()
        if(wordS.nextStage==wmPreFetch){
            // Normalize and separate the word and modelID
            me int: underScorePos <- findString(wordsType, "_")
            if(underScorePos!=-1){
                wordS.modelID <- wordsType.subStr(underScorePos+1, wordS.asGiven.size())
                wordS.asGiven <- wordsType.subStr(0, underScorePos)
            }
            // TODO: As optimization, if modelID is given, look it up and verify that a word derivable from asGiven matches. Then skip stage 1.

            wordS.nextStage <- wmFetchModels
        }
        me List<our WordUse>: results
        if(wordS.nextStage==wmFetchModels){
            me int: numAlts <- FetchBasePlusPOS_forms_stage1(wordsType, vSpec, results)
            if(numAlts==0){
                numAlts <- FetchBasePlusPOS_forms_stage2(wordsType, vSpec, results)
            }
            if(numAlts==0){
                wordS.defToUse <- NULL
                wordS.meaningNotFound <- true
                wordS.nextStage <- wmDONE
            }else if(numAlts==1){
                Allocate(wordS.defToUse)
                results[0].defToUse.copyAsTypeTo(wordS.defToUse, true, true)
                wordS.flags <- results[0].flags
                wordS.nextStage <- wmDONE
            }else if(numAlts>1){
                wordS.nextStage <- wmAssembleAlt
            }
        }
        if(wordS.nextStage==wmAssembleAlt){
            // sortResultsByScore(results, scopeID)   //: TODO finish this
            //
            our infon: newInnr <- makeInnrInfon()
            withEach infMatch in results{
                our infon:: defToUse
                infMatch.defToUse.copyAsTypeTo(defToUse, true, false)
                newInnr.value.items.append(defToUse, false, 401)
            }
            our infon:: newAltInfon
            newAltInfon.convertThisToIntersection(newInnr, fromGiven) // Make [ ] and add innr to it
            wordS.defToUse <- newAltInfon
            wordS.nextStage <- wmDONE
        }
        if(wordS.nextStage==wmDONE){
            return(wordS.defToUse)
        }
        return(NULL)
    }

    void: clear()<-{wordToModel.clear()}
}
