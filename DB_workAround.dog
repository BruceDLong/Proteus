// Work around for V1 of ProteusDB

struct GLOBAL{
    me string: stripString(me string: s) <- {
        if(s=="") {return("")}
        while(s[s.size()-1]==" "){s <- s.subStr(0, s.size()-1)}
        while(s[0]==" "){s <- s.subStr(1, s.size()-1)}
        return(s)
    }

    me string: rmWS(me string: s) <- {
        if(s=="") {return("")}
        me int: pos<-0
        me string: space <- " "
        while(pos < s.size()){
            if(s[pos]=="\n"){s[pos]<-space[0]}
            pos <- pos+1
        }
        return(s)
    }

    void: split(me string: s, me string: divider, me string[their list]: strList, me int: max <- 0) <- {
        me int: strLen <- s.size()
        me int: divLen <- divider.size()
        me int: numMatches <- 0
        me string: segment
        withEach pos in RANGE(0..strLen){
            if(s.subStr(pos, divLen)==divider and (max==0 or max > numMatches)){
                strList.pushLast(segment)
                segment <- ""
                pos <- pos + (divLen-1)
                numMatches <- numMatches + 1
            } else {segment <- segment + s[pos]}
        }
        segment <- stripString(segment)
        if(segment != ""){strList.pushLast(segment)}
    }

    me bool: isNumberSegment(me string: seg, their int64: result) <- {
        if(seg[0]=="T" and seg.size()>2 and seg[1]=="_"){
            me int: strSize <- seg.size()
            me int64: acc <- 0
            withEach pos in RANGE(2..strSize){
                me char: ch <- seg[pos]
                if(isdigit(ch)){
                    acc <- (acc*10)+(ch-48)
                } else {return(false)}
            }
            result <deep- acc
            return(true)
        }
        return(false)
    }

    me bool: isNumberRange(me string: seg, their int64: earliest, their int64: latest) <- {
        if(seg[0]=="R" and seg.size()>2 and seg[1]=="_"){
            me int: strSize <- seg.size()
            me int64: EarliestAcc <- 0
            me int64: LatestAcc <- 0
            me int: crntSegment <- 1
            withEach pos in RANGE(2..strSize){
                me char: ch <- seg[pos]
                if(isdigit(ch)){
                    if(crntSegment==1){
                        EarliestAcc <- (EarliestAcc*10)+(ch-48)
                    } else {
                        LatestAcc <- (LatestAcc*10)+(ch-48)
                    }
                } else if(ch=="_"){
                    crntSegment <- crntSegment + 1
                } else {return(false)}
            }
            if(crntSegment != 2){return(false)}
            earliest <deep- EarliestAcc
            latest <deep- LatestAcc
            return(true)
        }
        return(false)
    }

    our infon: fetchInfonByNameSeg(our infon: infIn, me string: seg)<-{
        if(infIn.value.fType==LST){
            withEach infItem in infIn.value.items{
                if(infItem.type!=NULL and infItem.type.asGiven==seg){
                    our infon: infOut
                    Allocate(infOut)
                    infOut    <- infItem
                    return(infOut.wrkList[0].item)
                }
            }
        }
        return(NULL)
    }

    our infon: ProteusQuery(their ProteusCore: CORE, me string: protText, me bool: writeToSession) <- {
        our infon: result
        if (protText==""){return(NULL)}
        else if (protText[0]=="%"){
            me string[list]: withEquals
            me string[list]: nameSegs
            split(protText, "=", withEquals, 1)
            split(withEquals[0], ".", nameSegs)
            our infon: infLevel
            me bool: itemWasFound <- false
            withEach seg in nameSegs{
                me bool: segFound <- false
                if(seg=="%W"){infLevel <- CORE.WORLD}
                else{
                    if(infLevel!=NULL){
                        if(infLevel.value.fType==LST){
                            withEach infItem in infLevel.value.items{
                                if(infItem.type!=NULL and infItem.type.asGiven==seg){
                                    infLevel <- infItem
                                    segFound <- true
                                    break()
                                }
                            }
                        }else{
                            me int64: segSlotPos
                            me int64: earliest
                            me int64: latest
                            if(isNumberSegment(seg, segSlotPos)){
                                our infon[itr multimap int64]: T_item <- infLevel.value.T_index.find(segSlotPos)
                                if(T_item != infLevel.value.T_index.end()){
                                    infLevel <- T_item.val
                                    segFound <- true
                                } else { // if it wasn't found but there is a '=', add it.
                                    if(withEquals.size()>1 and seg_key == (nameSegs.size()-1)){
                                        //print("ADDING: ", rmWS(protText))
                                        if(writeToSession) {CORE.addStatementToSession(rmWS(protText))}
                                        our infon: newItem <- CORE.parseAndExtract(withEquals[1])
                                        if(newItem==NULL){print(CORE.errorMesg); exit(2);}
                                        infLevel.value.T_index.insert(segSlotPos, newItem)
                                        infLevel <- newItem
                                        segFound <- true
                                        withEquals.clear()
                                    }
                                }
                            } else if(isNumberRange(seg, earliest, latest)){
                               // print("For "+seg+" returning:"+toString(earliest) + " - " + toString(latest), "\n")
                                our infon:: newItem
                                newItem.value.fType  <- LST
                                newItem.value.format <- fLiteral
                                newItem.value.timelike <- true
                                newItem.itmMode <- mItem
                                newItem.infMode <- isLiteral
                                withEach point in infLevel.value.T_index from earliest to latest {
                                     newItem.value.T_index.insert(point_key, point)
                                }
                                infLevel <- newItem
                                //me Agent: a; print("MEMBER:", a.printInfon(infLevel), "\n")
                            }
                        }
                        if(segFound){
                            itemWasFound <- true;
                        }
                        else{
                            itemWasFound <- false
                            break();
                        }
                    }
                }
            }
            if(itemWasFound and withEquals.size()>1){
                me string: infonText <- withEquals[1]
                our infon: newRHS <- CORE.parseAndExtract(infonText)
                if(newRHS!=NULL){
                    our infItr:: ii
                    ii.item <- newRHS
                    infLevel.wrkList.pushFirst(ii)
                    infLevel.isNormed <- false
                    infLevel.wrkItmsAdded <- false
                    CORE.agent.normalize(infLevel)
                    if(writeToSession){CORE.addStatementToSession(rmWS(protText))}
                    result <- infLevel
                } else {
                    result <- NULL
                }
            } else {
                result <- infLevel
            }
        } else {
            our infon: crntInfon <- CORE.parseAndExtract(protText)
            if(crntInfon!=NULL){
                CORE.agent.appendToWorld(crntInfon)
                CORE.agent.normalize(crntInfon)
                result <- crntInfon
            } else {
                result <- NULL
            }
        }
        return(result)
    }

    void: loadProteusSessionFile(their ProteusCore: CORE, me string: filename) <- {
        me sessionFile: session
        if(session.openToRead(filename)){return()}
        me string: fLine
        while(! session.eof()){
            fLine <- session.readEntry()
            ProteusQuery(CORE, fLine, false)
        }
        session.closeReading()

    }

    void: saveIntToModel(their ProteusCore: CORE, me string: name, me int64: val) <- {
        me string: query <- name + " = " + longToString(val)
        ProteusQuery(CORE, query, true)
    }

    void: saveStringToModel(their ProteusCore: CORE, me string: name, me string: val) <- {
        me string: query <- name + " = '" + val +"'"
        ProteusQuery(CORE, query, true)
    }

    me bool: isInfonDataValid(our infon: inf) <- {
        if (inf == NULL or inf.wrkList.isEmpty()){
            return(false)
        }
        return(true)
    }

    me FlexNum: extractNumFromInfon(our infon: inf) <- {
        return (inf.wrkList[0].item.value.num)
    }
    me string: extractStringFromInfon(our infon: inf) <- {
        return (inf.wrkList[0].item.value.str)
    }
    our infon: loadInfonFromModel(their ProteusCore: CORE, me string: name) <- {
        our infon: result <- ProteusQuery(CORE, name, true)
        return (result)
    }

    me string: loadStringFromModel(their ProteusCore: CORE, me string: name) <- {
        our infon: result <- ProteusQuery(CORE, name, true)
        if (result == NULL or result.wrkList.isEmpty()){return("NULL")}
        return (result.wrkList[0].item.value.str)
    }
} // END GLOBAL
