/- Work around for V1 of ProteusDB

struct GLOBAL{
    me string: stripString(me string: s) <- {
        if(s=="") {return("")}
        while(s[s.size()-1]==" "){s <- s.subStr(0, s.size()-1)}
        while(s[0]==" "){s <- s.subStr(1, s.size()-1)}
        return(s)
    }

    void: split(me string: s, me string: divider, me string[their list]: strList) <- {
        me int: strLen <- s.size()
        me int: divLen <- divider.size()
        me string: segment
        withEach pos in RANGE(0..strLen){
            if(s.subStr(pos, divLen)==divider){
                strList.pushLast(segment)
                segment <- ""
                pos <- pos + (divLen-1)
            } else {segment <- segment + s[pos]}
        }
        segment <- stripString(segment)
        if(segment != ""){strList.pushLast(segment)}
    }

    me bool: isNumberSegment(me string: seg, their int64: result) <- {
        if(seg[0]=="T" and seg.size()>2 and seg[1]=="_"){
            me int: strSize <- seg.size()
            me int64: acc <- 0
            withEach pos in RANGE(2..strSize){
                me char: ch <- seg[pos]
                if(isdigit(ch)){
                    acc <- (acc*10)+(ch-48)
                } else {return(false)}
            }
            result <deep- acc
            return(true)
        }
        return(false)
    }

    me bool: isNumberRange(me string: seg, their int64: earliest, their int64: latest) <- {
        if(seg[0]=="R" and seg.size()>2 and seg[1]=="_"){
            me int: strSize <- seg.size()
            me int64: EarliestAcc <- 0
            me int64: LatestAcc <- 0
            me int: crntSegment <- 1
            withEach pos in RANGE(2..strSize){
                me char: ch <- seg[pos]
                if(isdigit(ch)){
                    if(crntSegment==1){
                        EarliestAcc <- (EarliestAcc*10)+(ch-48)
                    } else {
                        LatestAcc <- (LatestAcc*10)+(ch-48)
                    }
                } else if(ch=="_"){
                    crntSegment <- crntSegment + 1
                } else {return(false)}
            }
            if(crntSegment != 2){return(false)}
            earliest <deep- EarliestAcc
            latest <deep- LatestAcc
            return(true)
        }
        return(false)
    }

    our infon: ProteusQuery(their ProteusCore: CORE, me string: protText) <- {
        our infon: result
        if (protText==""){return(NULL)}
        else if (protText[0]=="%"){
            /-print("    QUERY:", protText, "\n")
            me string[list]: withEquals
            me string[list]: nameSegs
            split(protText, "=", withEquals)
            split(withEquals[0], ".", nameSegs)
            our infon: infLevel
            me bool: itemWasFound <- false
            withEach seg in nameSegs{
                me bool: segFound <- false
                if(seg=="%W"){infLevel <- CORE.WORLD}
                else{
                    print(seg, "-\n")
                    if(infLevel!=NULL){
                        if(infLevel.value.fType==LST){
                            withEach infItem in infLevel.value.items{
                                if(infItem.type!=NULL and infItem.type.asGiven==seg){
                                print("     <", infItem.type.asGiven, ">  ", seg, "\n")
                                    infLevel <- infItem
                                    segFound <- true
                                    break()
                                }
                            }
                        }else{
                            me int64: segSlotPos
                            me int64: earliest
                            me int64: latest
                            if(isNumberSegment(seg, segSlotPos)){
                                our infon[itr multimap int64]: T_item <- infLevel.value.T_index.find(segSlotPos)
                                if(T_item != infLevel.value.T_index.end()){
                                    infLevel <- T_item.val
                                    segFound <- true
                                } else { /- if it wasn't found but there is a '=', add it.
                                    if(withEquals.size()>1 and seg_key == (nameSegs.size()-1)){
                                        our infon: newItem <- CORE.parseAndExtract(withEquals[1])
                                        infLevel.value.T_index.insert(segSlotPos, newItem)
                                        infLevel <- newItem
                                        segFound <- true
                                        withEquals.clear()
                                    }
                                }
                            } else if(isNumberRange(seg, earliest, latest)){
                                /-log("For "+seg+" returning:"+toString(earliest) + " - " + toString(latest))
                            }
                        }
                        if(segFound){itemWasFound <- true;}
                        else{
                            itemWasFound <- false
                            log("Segment not found:"+seg)
                            break();
                        }
                    }
                }
            }
            if(itemWasFound and withEquals.size()>1){
                me string: infonText <- withEquals[1]
                our infon: newRHS <- CORE.parseAndExtract(infonText)
                if(newRHS!=NULL){
                    our infItr:: ii
                    ii.item <- newRHS
                    infLevel.wrkList.pushLast(ii)
                    infLevel.isNormed <- false
                    infLevel.wrkItmsAdded <- false
                    log("Normalizing:"+CORE.a.printInfon(infLevel))
                    CORE.a.normalize(infLevel)
                    CORE.addStatementToSession(protText)
                    log("Normalized:"+CORE.a.printInfon(infLevel))
                    result <- infLevel
                } else {
                    result <- NULL
                }
            } else {
                result <- infLevel
            }
        } else {
            our infon: crntInfon <- CORE.parseAndExtract(protText)
            if(crntInfon!=NULL){
                CORE.a.appendToWorld(crntInfon)
                CORE.a.normalize(crntInfon)
                result <- crntInfon
            } else {
                result <- NULL
            }
        }
        return(result)
    }

    void: loadProteusSessionFile(me string: filename) <- {
        me sessionFile: session
        if(session.openToRead(filename)){return()}
        me string: fLine
        while(! session.eof()){
            fLine <- session.readEntry()
            ProteusQuery(CORE, fLine)
        }
        session.closeReading()

    }

} /- END GLOBAL

struct timeIntervalSpec{
    me timeValue: start
    me timeValue: end
}

struct dataPoint: {
    me double: medianValue
    me double: precision
}

struct dataCache{
    me bool: request(me timeValue: start, me timeValue: end) <- {
    }
    me bool: endOfData() <- {}
    me dataPoint: getNext() <- {}

    me timeIntervalSpec[map int64]: cacheContents
    void: condenseContentsList() <- {}

}

struct vessel{
    me string: name
    me double: circm
    me double: length
    me string[list]: inputs
    me string[list]: outputs
}

struct bodySim{
    me string: name
    me timeValue: birthday
    me int: height
    me int: weight
    me int: BMI
    me int: percentFat

    our vessel[map string]: bloodVessels



    void: constructBodySystem() <- {
        our WordSystem: word
        Allocate(word, "Circulatory_system")
        our infon: infModel <- modelMngr.fetchModel(word)
        withEach item in infModel.value.items {
            me agent: a
            our vessel:: V
            me int: cursor <- 0
            V.name <- item.value.items.at(cursor).item.value.str
            print("# ", V.name, "\n")

            /- HERE: load either 3 numbers OR a negative number
            cursor <- cursor+1
            /-  Like this:
            me int: nextNum <- item.value.items.at(cursor).item.value.num
            if(nextNum >= 0){
            /-          /* read two more numbers;*/
                cursor <- cursor+3
            } else {  /- Its negative
                cursor <- cursor+1
            }

            our infon: vesselInfon <- item.value.items.at(cursor).item
            withEach inputItem in vesselInfon.value.items.at(0).item.value.items {
                print("    IN>", a.printInfon(inputItem), "\n")
                V.inputs.pushLast(inputItem.value.str)
            }
            withEach outputItem in vesselInfon.value.items.at(1).item.value.items {
                print("    OUT>", a.printInfon(outputItem), "\n")
                V.inputs.pushLast(outputItem.value.str)
            }

            /- HERE: store V in bloodVessels map: bloodVessels[V.name] <- V
        }

        our infon: result <- ProteusQuery(CORE, "%W.user.Human.Circulatory_system")
        print("%W.user.Human.Circulatory_system: ", CORE.resultString(result))
    }

    void: fetchInitialData() <- {
    }

    void: init() <- {
        constructBodySystem()
        fetchInitialData()
    }

    void: runSim(me timeValue: start, me timeValue: end) <- {
    }
}


