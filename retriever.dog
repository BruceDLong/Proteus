/- retriever.dog

model aItem{
    me int:           priority
    our infDeepItr:   LHS
    our infDeepItr:   RHS
    our aItem[list]:  predecessors
    our aItem:        successor
    me flag:          copyRHSTypeToLHS
    me flag:          rejected
    me mode[valueFailed, valueVerified, copyValueLHStoRHS, copyValueRHStoLHS]:        valueAction
    me mode[sizeFailed, sizeVerified, copySizeLHStoRHS, copySizeRHStoLHS]:        sizeAction

    me mode[getAllPlusSize, startPos, endPos, query, size, length, first, last, Nth, tagged, typed]:opTypes

    me void: init(me int: Priority, our infDeepItr: lhs, our infDeepItr: rhs)<-{
        priority <- Priority
        Allocate(LHS)
        Allocate(RHS)
        lhs.copyThisTo(LHS)
        rhs.copyThisTo(RHS)
    }

    me string: printAgendaItem()<-{
        if(self == NULL){return("NULL")}
        me agent: a
        me string: itemStr <- "["
        me string: innrStr
        itemStr <- itemStr + toString(priority) + ": "
        if (LHS.crntCursor !=NULL){
            innrStr <- a.printInfon(LHS.crntCursor.item)
            if(LHS.state==sSecondVisit) {innrStr <- "<"+innrStr + ">"}
            itemStr <- itemStr + innrStr;
        }
        else{itemStr <- itemStr +" ITEM-NULL"}
        itemStr <- itemStr + " |=| "
        if (RHS.crntCursor !=NULL){
            innrStr <- a.printInfon(RHS.crntCursor.item)
            if(RHS.state==sSecondVisit) {innrStr <- "<"+innrStr + ">"}
            itemStr <- itemStr + innrStr;
        }else{itemStr <- itemStr +"ITEM-NULL"}
        itemStr <- itemStr + "]"
        return(itemStr)
    }

}

struct priorityQ{
    our aItem[multimap int]: PQ

    me void: push(our aItem: newItem) <- {
        PQ.insert(newItem.priority, newItem)
    }

    our aItem: pop() <- {
        our aItem: min <- PQ.front()
        PQ.erase(PQ.front())
        return(min)
    }

    me bool: isDuplicate(our aItem: agendaItem) <- {
        me bool: retVal<-false
        withEach item in PQ from agendaItem.priority to agendaItem.priority {
            retVal<-true
            if(!(agendaItem.LHS.crntCursor===item.LHS.crntCursor)){return(false)}
            if(!(agendaItem.RHS.crntCursor===item.RHS.crntCursor)){return(false)}
        }
        if(retVal){print("DUPLICATE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n")}
        return(retVal)
    }

    me bool: isEmpty() <- {
        return(PQ.size() == 0)
    }
}

struct retriever{
    me priorityQ: agenda
    me int: errorCode
    me string: errorMsg
    their agent: parentAgent

    void: addItem(our aItem: agendaItem)<-{
        if(!agenda.isDuplicate(agendaItem)){
            agenda.push(agendaItem)
 /- VIEWER           TopAItemDash.updatePush(agendaItem)
        }
    }

    void: printAgenda()<-{
        print("    |PRINT AGENDA____________\n")
        withEach agendaItem in agenda.PQ {
            print("    |        item: ", agendaItem.printAgendaItem(), "\n")
        }
        print("    |______________________\n")
    }

    our aItem: resolve(our aItem: agendaItem, me string: indent)<-{
        our aItem: retVal
        if(agendaItem.predecessors.size()>0){
            /- Choose pedigree
            me int: pedigreeChosen <- agendaItem.predecessors.size()-1 /- 0 /- TODO: if chosen has RHS=NULL, choose another if there is one.
            our aItem: pred <- agendaItem.predecessors[pedigreeChosen]
            pred.successor <- agendaItem
            retVal <- resolve(pred, indent +"    ")
            if(retVal==NULL){retVal<-pred}
        }

        return(retVal)
    }

    void: processAgenda()<-{
        withEach count in WHILE(!agenda.isEmpty()) {
            if (count > 200){break()}  /-TODO: remove this when safe
            processAgendaItem(agenda.pop())
        }
    }

    void: addItemsToAgenda(our aItem: pred, our infDeepItr: LHSChain, our infDeepItr: RHSChain)<-{
        me int: priority <- pred.priority
        if(pred.LHS.crntCursor.item.value.fType!=LST and (pred.RHS.crntCursor==NULL or pred.RHS.crntCursor.item.value.fType!=LST)){priority <- priority+1}
        our infDeepItr: currentLHS <- LHSChain
        while(currentLHS != NULL){
            if(currentLHS.state != sEOL){
                parentAgent.prepWorkList(currentLHS)
                parentAgent.addWorkItemsToAgenda(priority, pred, currentLHS)
                our infDeepItr: currentRHS <- RHSChain
                withEach count in WHILE(currentRHS != NULL) {
                    /-if(currentRHS.state == sEOL){print("rEOL ", count, " ")}
                    our aItem: nextItem
                    Allocate(nextItem)
                    nextItem.init(priority, currentLHS, currentRHS)
                    if(pred!=NULL){nextItem.predecessors.pushLast(pred)}
                    addItem(nextItem)
                    currentRHS <- currentRHS.next
                }
            }
            currentLHS <- currentLHS.next
        }
        /-printAgenda()
    }

    me bool: readyToResolve(our aItem: agendaItem)<-{
        our infDeepItr: LHS <- agendaItem.LHS
        our infDeepItr: RHS <- agendaItem.RHS
       /- print("    CONDITIONS: ", " |RHS.nestLvl: ", RHS.nestLvl, " |RHS.state: ", RHS.state, " |LHS.nestLvl: ", LHS.nestLvl, "\n")

        if(LHS.nestLvl == 0 and RHS.nestLvl == 0 and LHS.state == sSecondVisit){return(true)}
        if(LHS.nestLvl == 0 and RHS.nestLvl == 0 and RHS.state == sEOL and !RHS.isAList){return(true)}

        return(false)
    }

    void: processAgendaItem(our aItem: agendaItem)<-{
        /-print("processAgendaItem: ", agendaItem.printAgendaItem() ,"\n")
        our infDeepItr: LHS <- agendaItem.LHS
        our infItr: crntCursor <- LHS.crntCursor
        me int: agendaLHS_state <- agendaItem.LHS.state
        me bool: RHS_Empty <- agendaItem.RHS.crntCursor==NULL
        me int: numItemsAdded <- 0
        our infDeepItr: remainder <- NULL
/- VIEWER        dataManager.styler.crntLHS <- LHS.crntCursor.item
/- VIEWER        if(!RHS_Empty){dataManager.styler.crntRHS <- agendaItem.RHS.crntCursor.item}
/- VIEWER        theClip.dispAndWait("To Process:"+ agendaItem.printAgendaItem())
        if(agendaLHS_state == sNotASeq or agendaLHS_state == sFirstVisit){
            if(!RHS_Empty){
                if(agendaItem.RHS.state != sSecondVisit){
                    remainder <- parentAgent.tryMERGE(agendaItem)
                    if(agendaItem.rejected){return();}
                } else {
                    if(agendaItem.RHS.crntCursor.item.itmMode!=mSubItems){ /- TODO: Or if parent is in concat
                        return()
                    }
                }
            }

            if(LHS.nestLvl == 0 and agendaLHS_state == sNotASeq){   /- Stitching
   /-             log("STITCH FROM Process NOT-SEQ | FirstVisit")
                parentAgent.stitch(agendaItem, "")
            }

   /*         /- Handle when parent is a CONCAT
            if(crntCursor.parent!=NULL and crntCursor.parent.item!=NULL and (crntCursor.parent.item.value.format==fConcat)){
                if(crntCursor.idx==0){ /- Set parent's type
                } else {
                    our infon: prev <- crntCursor.getPrevPtr()
                    if(parentAgent.joinOnRight(prev, crntCursor.item)){
                        LHS.deleteCrnt()
                    } else {}  /- Subscribe
                }
            }*/

        } else if(agendaLHS_state == sSecondVisit){
            if(readyToResolve(agendaItem)){
                our aItem: topItem <- resolve(agendaItem, "    resolve: ")
      /-          log("STITCH FROM Process SecondVisit")
                parentAgent.stitch(topItem, "")
            }

   /*         /- If this was a CONCAT with only one item:
            if(crntCursor.item.value.format==fConcat and crntCursor.item.value.items.size()==1){
                crntCursor.item <deep- crntCursor.item.value.items[0]
            }*/

        } else {print("IMPOSSIBLE LHS-STATE:", agendaLHS_state); exit(2)}

        our infDeepItr: LHSChain <- NULL
        our infDeepItr: RHSChain <- NULL

        if(RHS_Empty){
            LHSChain <- agendaItem.LHS.getNextDeDotted()
            Allocate(RHSChain);  RHSChain.crntCursor <- NULL
        } else {
            me bool: remainderSideRHS <- true  /- Later this may be false if the LHS has a remainder
            if(remainder != NULL){
                if(remainderSideRHS){
                    RHSChain <-remainder
                } else {
                    LHSChain <-remainder
                }
            }

            me int: LHSfType <- agendaItem.LHS.crntCursor.item.value.fType
            me int: RHSfType <- 0; if(!RHS_Empty){RHSfType <- agendaItem.RHS.crntCursor.item.value.fType}
            if (LHSChain == NULL){
                if (LHSfType != LST and RHSfType == LST){
                    LHSChain <- agendaItem.LHS
                }else {
                    LHSChain <- agendaItem.LHS.getNextDeDotted()
                }
            }
            if (RHSChain == NULL){
                if (LHSfType == LST and RHSfType != LST){
                    RHSChain <- agendaItem.RHS
                }else{
                    RHSChain <- agendaItem.RHS.getNextDeDotted()
                  /-  if(RHSChain.state==sEOL){print("<EOL> "); return()} /- REturn here makes testItem/test1 fail
                }
            }
        }
        addItemsToAgenda(agendaItem, LHSChain, RHSChain)

/- VIEWER      dataManager.styler.crntLHS <- NULL;  dataManager.styler.crntRHS <- NULL; /- Reset colors for dashboard
    }

}

do codeDataDisplay(aItem, TAG_infonDumpMode)
