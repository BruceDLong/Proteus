/-////////////////  Structures For Working with Proteus
/- Proteus.dog

LinuxTestBuild: Platform='Linux' CPU='amd64' Lang='CPP' testMode='makeTests';
/-LinuxBuild:     Platform='Linux' CPU='amd64' Lang='CPP' optimize='speed';

FileName = "Proteus"
Version = "0.8"
CopyrightMesg = "Copyright (c) 2015-2016 Bruce Long"
Authors = "Bruce Long"
Description = "Proteus Engine"
ProgramOrLibrary = "program"
TestSpec = "ProteusTests.dog"

featuresNeeded = [ ]

LicenseText = `This file is part of the "Proteus Language suite" All Rights Reserved.`
infonDumpMode='text'

do ManageCmdLine(cmd)


model pureInfon{
    me mode[tUNKNOWN, NUM, STR, LST]: fType
    me mode[fUNKNOWN, fConcat, fLiteral]: format
    me mode[fDefault, fFloat, fFraction, fSingleQuote, fHereDoc, fSizedBin]: literalFormat
    me mode[bDec, bBin, bHex]:numBase
    me mode[cDefault, cGetLast, cGetFirst, cGetMarked]: cursor
    me flag: inverted
    me flag: timelike
    flag: sizeGiven
    flag: isLstSize
    me uint64: num
    me string: str
    our infon[list]: items
    our infon: listSpec

    our pureInfon: size

    me string: dump(me string: indent)<-{
        me string: S <- ""
     /*   if(fType==NUM){
            if(format==fLiteral){S<-S+' +%i`num`'}
            else {S<-S+" _ "}
        }
        else if(fType==STR){
            if(format==fLiteral){S<-S+' '+str}
            else {S<-S+" $ "}
        }
        else if(fType==LST){
            S<-S+"\n"+indent+"{ "
            if(listSpec){S<- S+listSpec.dump(indent+"  ")+" | "}
            S<-S+"\n   "+indent
            withEach Inf in items:{
                S<-S+Inf.dump(indent+"    ")
            }
            S<-S+"\n"+indent+"}\n"+indent
        }  */
        return(S)
    }
    void: deleteNth(me int: toDel) <- {items.erase(items.nthItr(toDel))}
    void: clear() <- {num<-0 str<-'' items.clear() listSpec<-NULL}
}

#define LISTBODY(LEFT_BRKT, RIGHT_BRKT) <% >{ "LEFT_BRKT" "T"[opt]:timelike  >me listInfo[opt] >our listItem[list]: items >ws "RIGHT_BRKT" } %>
model infon{
    flag: asNot
    flag: isFunc
    flag: isFuncArg
    flag: invertFunc
    mode[isUnknown, newCursor, isTag, isLiteral]: infMode
    me mode[mItem, mSubItems, mDots, mTagDefn]: itmMode
    me pureInfon: size
    me pureInfon: value
    me string: tag
    flag: isNormed
    flag: hasSelector
    our infon: aux1
    our infon: aux2
    our infItr[list]: wrkList
    flag: wrkListIsAlts
    me string: dump(me string: indent)<-{
        me string: S <- ""
        S<-S+value.dump(indent+"  ")
        return(S)
    }
    our infon: getLastItem() <- {
        /- ASSERT(Should be already normed and a non-concat list)
        our infon: lastItem
        if(value.items.size()>0) {
            lastItem <- value.items[value.items.size()-1]
        }  else {return(NULL)}
        switch(lastItem.itmMode){
            case mItem:{
                return(lastItem)
            }
            case mSubItems:{return(lastItem.getLastItem())}
            case mDots:{exit(3)}
            case mTagDefn:{exit(4)}
        }
        return(lastItem)
    }
    our infon: getFirstItem() <- {
        /- ASSERT(Should be already normed and a non-concat list)
        our infon: firstItem
        if(value.items.size()>0) {
            firstItem <- value.items[0]
        }  else {return(NULL)}
        switch(firstItem.itmMode){
            case mItem:{
                return(firstItem)
            }
            case mSubItems:{return(firstItem.getFirstItem())}
            case mDots:{exit(3)}
            case mTagDefn:{exit(4)}
        }
        return(firstItem)
    }
    void: deleteNth(me int: toDel) <- {
        /- Low level delete of an item in list. Does not update size.
        if(value.fType==LST){
            value.deleteNth(toDel)
        }
    }
    void: clear() <- {size.clear() value.clear()}
}

model infItr{
    our infon: item
    our infItr: parent
    me  int: idx
    mode [asID, asFirst, asLast, asMarked, asFirstParent, asLastParent, asMarkedParent]: target
/*
    me infItr: childItr() <- {
        me infItr: ret
        ret.idx <- 0
        if(item.value.fType==LST and item.value.items.size() > 0){
            ret.item <- item.value.items[0]
        } else {ret.item <- NULL}
  /-      ret.parent <- this
        return(ret)
    } */

    our infItr: nextItr() <- {
        our infItr:: ret();
        if(parent!=NULL and item!=NULL) {
            ret.idx <- idx+1
            if(ret.idx < parent.item.value.items.size()){ret.item <- parent.item.value.items[ret.idx]}
            else {ret.item <- NULL}
        }
        ret.parent <- parent
        return(ret)
    }

    our infon: getPrevPtr() <- {
        if(parent==NULL or item==NULL or idx==0) {return(NULL)}
        return(parent.item.value.items[idx-1])
    }


    our infItr:subItemNextItr() <- {
        our infItr: nxt <- nextItr()
        withEach r in WHILE(nxt!= NULL and nxt.item == NULL and nxt.idx>1 and nxt.parent!=NULL and nxt.parent.item.itmMode==mSubItems):{
            nxt <- nxt.parent
            nxt <- nxt.nextItr()
        }
        if(nxt.item == NULL){ nxt<-NULL }
        return(nxt)
    }

    void: deleteCrnt() <- {
        parent.item.deleteNth(idx)
    }

    void: insertAtIDX(our infon: i) <- {
        parent.item.value.items.insert(parent.item.value.items.nthItr(idx), i)
    }

    /-me none: infItr(our infon: Item, our infon: Parent, me uint: Idx)<- {item<-item; parent.allocate(Parent); idx<-Idx;}
}

string infItr{
    "=" > ws > our infon:item
}
string listInfo[
        >{ >{"~" >ws >our pureInfon: size}[opt]:Size >ws "C" >ws >our infon:listSpec "|"[opt]}
     |  >{ >{"~" >ws >our pureInfon: size}[opt]:Size         >ws >our infon:listSpec "|"}
     |  >{ "~" >ws >our pureInfon: size >ws }
]

string listItem{
    me mode[mItem, mSubItems, mDots, mTagDefn]: itmMode
     >[ (>{"class" >ws > CID:tag > ws > our infon:inf} <=> itmMode=mTagDefn;)
      | (>our infon:inf <=> itmMode=mItem;)
      | ("..." <=> itmMode=mDots; value.format=fUNKNOWN;)
      | (>{"#" >ws >our infon:inf} <=> itmMode=mSubItems;)
      ]
}


string pureInfon{
    >ws
    >[ ( >[ (>uint64: num <=> format = fLiteral;) | ("_" <=> format = fUNKNOWN; num=0; )]   <=>  fType = NUM;)
     | ( >[ (>string: str <=> format = fLiteral;) | ("$" <=> format = fUNKNOWN; str="";)]   <=>  fType = STR;)
     | ( >[ (LISTBODY({,}) <=> format=fLiteral; cursor=cDefault;)
          | (LISTBODY([,]) <=> format=fLiteral; cursor=cGetLast;)
          | (LISTBODY((,)) <=> format=fConcat;  cursor=cDefault;)
          ]  <=>  fType = LST;)
     ]
}

string infon: StartSymbol="true" {
    "!"[opt]:asNot
   >[ ( "?" <=> infMode=isUnknown;)

    | ( >{ "%" >[ ("this" <=> tag="this";) | ("W" <=> tag="W";) | ("prev" <=> tag="prev";) | ("next" <=> tag="next";) ]} <=> infMode=newCursor;)

    | ( >[ (>{ >[("*" <=>  size.inverted = false; ) | ("/" <=>  size.inverted = true; ) ] > me pureInfon: size
               >[("+" <=> value.inverted = false; ) | ("-" <=> value.inverted = true; ) ] > me pureInfon: value
            } <=> size.fType=NUM; value.sizeGiven=true;)
         | (>{ >[("+" <=> value.inverted = false; ) | ("-" <=> value.inverted = true; ) ][opt] > me pureInfon: value}  <=> size.num=0; size.fType=NUM; size.format=fUNKNOWN; value.sizeGiven=false;)
         ]   <=>   infMode=isLiteral;
      )

    | ( >CID:tag <=> infMode=isTag;)
    ]
    >ws

    >our infItr[list]:wrkList

    >{ >[ ("<:" <=> isFunc=true; isFuncArg=false; invertFunc=false;)
        | (":>" <=> isFunc=false; isFuncArg=true; invertFunc=false;)
        | ("<!" <=> isFunc=true; isFuncArg=false; invertFunc=true;)
        | ("!>" <=> isFunc=false; isFuncArg=true; invertFunc=true;)
        ]
        >ws >our infon:aux1
    }[opt]
}


struct pureInfon {}
struct infItr {}
struct infon {}

/-////////////////////////
/- Infon Interface Routines


struct infDeepItr{
    our infItr: crntCursor
    me int: nestLvl
    mode[sInvalid, sInited, sFirstVisit, sSecondVisit, sEOL, sError]: state
    flag: alreadyIncremented   /- When an item is deleted, the cursor idx is already incremented.

    me bool: isASeq(our infon: i) <- {
        return ((i.value.format==fLiteral and i.value.fType==LST) or i.value.format==fConcat)
    }

    void: initialize(our infon: inf) <- {
        alreadyIncremented<-false
        if(inf==NULL) {state <- sError return()}
        state <- sInited
        our infItr:: newParent()
        crntCursor.allocate(inf, newParent, 0, 0)
        nestLvl <- 0
    }

    our infon: getNext() <- {
        switch(state) {
            case sFirstVisit:{
                if(!isASeq(crntCursor.item) or crntCursor.item.value.items.size()==0){
                    state <- sSecondVisit
                } else {
                    /-Prepare to iterate children
                    our infItr: tmp
                    Allocate(tmp); tmp.idx<-crntCursor.idx; tmp.parent<-crntCursor.parent; tmp.item <- crntCursor.item; crntCursor.parent  <- tmp;   /- After ptr bug is fixed, Allocate(crntCursor.parent, crntCursor)
                    crntCursor.idx <- 0
                    crntCursor.item <- crntCursor.item.value.items[0];
                    state <- sFirstVisit
                    nestLvl <- nestLvl+1
                }
            }
            case sSecondVisit:{
                me int: nextCursor <- crntCursor.idx
                if(alreadyIncremented==0){nextCursor<-nextCursor+1} else {alreadyIncremented<-false}
                if(nestLvl==0){
                    crntCursor.item <- NULL;
                    state <- sEOL
                } else if(nextCursor < crntCursor.parent.item.value.items.size()){
                    crntCursor.idx <- nextCursor
                    crntCursor.item <- crntCursor.parent.item.value.items[crntCursor.idx];   /- NextSibling()
                    state <- sFirstVisit
                }else{
                    crntCursor <- crntCursor.parent
                    state <- sSecondVisit
                    nestLvl <- nestLvl-1
                }
            }
            case sInited: {state <- sFirstVisit}
            case sEOL:    {crntCursor.item<-NULL}
            case sInvalid:{crntCursor.item<-NULL;   state <- sError}
            case sError:  {crntCursor.item<-NULL}
            default: {print("Error: invalid iterator state\n")}
        }
        return(crntCursor.item)
    }

    void: deleteCrnt() <- {
        if(state == sSecondVisit){
            crntCursor.deleteCrnt()
            alreadyIncremented <- true
        } else {state<-sError}
    }

    our infon: getNextDeDotted() <- {
        getNext()
        if(crntCursor.item==NULL){return(NULL)}
        if(crntCursor.item.itmMode == mDots){
            /- insert a new item of correct type, set crntCursor to it
           our infon: tentativeInf Allocate(crntCursor.parent.item.value.listSpec) /- should be a lazy cow copy
           crntCursor.insertAtIDX(tentativeInf)
        /*   me int: possibilityMode = getPossibilityMode()
           switch(possibilityMode){
               case: pMustBe:{
                   /- insert a new item of correct type, set crntCursor to it
                   our infon: tentativeInf(crntCursor.parent.item.value.listSpec) /- should be a lazy cow copy
                   crntCursor.insertAtIDX(tentativeInf)
               }
               case: pMayBe:{
                   /- Get parent.next
                   /- if it's not already an ALT, make an alt and add parent.next
                   /- add to alt a new item of correct type
                   /- crntCursor = this new ALT?
               }
               case: pCannotBe:{
                   /- crntCursor <- parent's next
               }
           }   */
        }
        return(crntCursor.item)
    }

}

#include retriever.dog

struct agent{
    our infon: world
    their infon: context
    /- me Locale locale

    me bool: joinOnRight(our infon: LHS, our infon: RHS) <- { /- Join RHS into LHS. Return true on success (so need no subscription).
        if(LHS.value.format==fLiteral and RHS.value.format==fLiteral){
            me int: LHSType <- LHS.value.fType
            if(LHSType == RHS.value.fType){
                switch(LHSType){
                    case NUM: {LHS.size.num<-LHS.size.num * RHS.size.num; LHS.value.num<-(LHS.value.num * RHS.size.num) + RHS.value.num;}
                    case STR: {LHS.value.str.append(RHS.value.str);  LHS.size.num<-LHS.value.str.size()}
                    case LST: {}
                    default: {return(false)}
                }
            } else {} /- TODO: handle type conversions
            return(true)
        }
        return(false)
    }

    our infItr: makeInfItr(our infon: i, our infItr: parent, me int: idx) <- {
        our infItr:: ret(i, parent, idx, 0)
        return(ret)
    }

    void: addIdent(our infItr: LHS, our infItr: RHS) <- {
    /- LHS gets RHS as a new ident in its wrkList
        if(RHS.item === LHS.item) {return()}

        /- Set propogation flag for #{} on LHS or RHS
        RHS.target <- asID
        if(RHS.item.itmMode==mSubItems){RHS.target<-asFirstParent}
        if(LHS.item.itmMode==mSubItems){RHS.target<-asFirst}            /- TODO: If bug, check this: What if it is both?
     /-   if(RHS.item.?==asLast){RHS.target<-asLastParent}
     /-   if(LHS.item.?==asLast){RHS.target<-asLast}

        me bool: isDuplicate<-false
 /*       withEach wrkItm in LHS.item.wrkList:{
            if (wrkItm.productionID==RHS.productionID and wrkItm.originPos==RHS.originPos){
                if(wrkItm.SeqPosition==RHS.SeqPos or (ProdType==parseREP and wrkItm.SeqPosition+1 == SeqPos)){
                    isDuplicate<-true
                    /- push cause/pred
                }
            }
        }  */
        if(!isDuplicate){
            LHS.item.wrkList.pushLast(RHS)
        }
    }

    void: prepWorkList(our infItr: ciItr) <- {
        our infon: CI <- ciItr.item
        me int: cursor <- CI.value.cursor
        withEach count in WHILE(true):{
            if(CI.isFunc!=0 or CI.isFuncArg!=0){
                if(CI.isFuncArg!=0){  /- Swap func bady with args
                    me infon: CITmp <- CI
                    CI <deep- CI.aux1
                    CI.isFunc <- true
                    CI.isFuncArg <- false
                    CI.invertFunc <- CITmp.invertFunc

                    Allocate( CI.aux1, CITmp)
                    CI.aux1.aux1 <- NULL
                    CI.aux1.isFunc <- true
                    CI.aux1.isFuncArg <- false
                }
                our infon: tmp
                if(CI.invertFunc!=0){tmp <- CI.getLastItem()}
                else {tmp <- CI.getFirstItem()}
                tmp.wrkList.pushLast(makeInfItr(CI.aux1, NULL, 0))
                CI.aux1 <- NULL
            }
            if(cursor != cDefault){
                CI.value.cursor <- cDefault
                our infon: aux Allocate(aux)
                aux <deep- CI
                normalize(aux)
                our infon: newTop
                switch(cursor){  /- TODO: ensure that, when possible, these return subscriptions if needed. e.g., for when last is tentative or a tag or concat.
                    case cGetLast   : {newTop <- aux.getLastItem()}
                    case cGetFirst  : {newTop <- aux.getFirstItem()}
         /-           case cGetMarked : {newTop <- aux.getMarked()}
                }
                if(newTop!=NULL) {
                    CI <deep- newTop
                    cursor <- CI.value.cursor
                }
            } else {break()}
        }
    }


    me int: PropogateIndirectItem(our infItr: LHS, our infItr: RHS) <- {
    /- HANDLE #{}, [....] and other cases of identities of child nodes:
        me int: ret <- 0
        their pureInfon: LHS_tmp <- LHS.item.value
        if(LHS_tmp.fType==LST and LHS_tmp.items.size()>0){
            if(RHS.target == asFirst)       {addIdent(makeInfItr(LHS_tmp.items[0], LHS, 0), RHS);  ret<-1;}
            /- if(RHS.target == asLast or LHS.target==asLastParent)   {addIdent(makeInfItr(LHS_tmp.items[LHS.item.value.items.size()-1], LHS, LHS_tmp.items.size()-1), RHS);  ret<-1;}
        }
        their pureInfon: RHS_tmp <- RHS.item.value
        if(RHS_tmp.fType==LST and RHS_tmp.items.size()>0){
            if(RHS.target == asFirstParent) {addIdent(LHS, makeInfItr(RHS.item.value.items[0], RHS, 0));  ret<-1;}
        }
        return(ret)
    }

    void: DO_COPY(their pureInfon: from, their pureInfon: to) <- {
        me int: fromsType <- from.fType
        if(fromsType==to.fType){
            to.format<-from.format
            to.sizeGiven <- from.sizeGiven
            switch(fromsType){
                case NUM: {to.num <- from.num}
                case STR: {to.str <- from.str}
                case LST: {}
            }
        } else {  /- TODO: Do Convert + copy
        }
    }

    bool: DO_VERIFY(their pureInfon: from, their pureInfon: to) <- {
        me int: fromsType <- from.fType
        if(fromsType==to.fType){
            switch(fromsType){
                case NUM: {return(to.num == from.num)}
                case STR: {return(to.str == from.str)}
                case LST: {
                    /- TODO: Is it sometimes OK to skip this or check each member at once?
                }
            }
        } else {  /- TODO: Do Convert + verify
        }
        return(true)
    }

    void: CO_SUBSCRIBE_VALUES(their infon: from, their infon: to) <- {}
    void: CO_SUBSCRIBE_SIZES(their infon: from, their infon: to) <- {}

    our infItr: doMERGE(our infItr: ciItr, our infItr: workItem) <- {
        our infon: CI <- ciItr.item
        our infon: item <- workItem.item
        our infItr: remainder <- NULL
        if(PropogateIndirectItem(ciItr, workItem) > 0){return(NULL)}

        me bool: copyItemsTypeToCI <- (CI.value.fType==tUNKNOWN and item.value.fType!=tUNKNOWN)
        if(copyItemsTypeToCI){CI.value.fType <- item.value.fType}

        /-----------------------
        me bool: LooseType<-false   /- Strict or loose typing?
        me bool: reject <- false    /- ReturnStatus
        if(! LooseType){
            me int: LHS_RHS_SIZE_Status  <- (CI.size.format*2)  + item.size.format
            switch(LHS_RHS_SIZE_Status){
                case 0: {reject <- !DO_VERIFY(CI.size, item.size)}    /- Both sizes are known
                case 1: {DO_COPY(CI.size, item.size)   }              /- Only CI's size is known
                case 2: {DO_COPY(item.size, CI.size)   }              /- Only item's size is known
                case 3: {CO_SUBSCRIBE_SIZES(CI, item)  }              /- Neither are known
            }
        }
        if(!reject){
            me int: LHS_RHS_VALUE_Status <- (CI.value.format*2) + item.value.format
            switch(LHS_RHS_VALUE_Status){
                case 0: {reject <- !DO_VERIFY(CI.value, item.value)}   /- Both values are known
                case 1: {DO_COPY(CI.value, item.value) }               /- Only CI's value is known
                case 2: {DO_COPY(item.value, CI.value) }               /- Only item's value is known
                case 3: {CO_SUBSCRIBE_VALUES(CI, item) }               /- Neither are known
            }
        }

        if(reject){ /- This failed to match so undo any changes and return(NULL)
            if(copyItemsTypeToCI){CI.value.fType <- tUNKNOWN}
            return(NULL)
        }

        /- Next list op: process remainder/next | descend
        if(CI.value.fType==LST and item.value.fType==LST and CI.value.items.size()>0  and item.value.items.size()>0){ /- Descend into lists
            addIdent(makeInfItr(CI.value.items[0], ciItr, ciItr.idx), makeInfItr(item.value.items[0], workItem, workItem.idx))
        } else {
            /- TODO: if LooseType, calculate partial remainders
            remainder <- workItem.subItemNextItr()   /- Get next but ascend through #{...}s
        }

        return(remainder)
    }

    our infItr[our list]: doWorkList(our infItr: ciItr) <- {
        our infItr[our list]:: IdentsForCIsFollower()
        our infon: CI <- ciItr.item
        withEach workItem in CI.wrkList:{
            our infItr: remainder <- doMERGE(ciItr, workItem)
            if(remainder != NULL){
                IdentsForCIsFollower.pushLast(remainder)
            }
        }
        return(IdentsForCIsFollower)
    }

    our infItr[our list]: fetchNodesNormalForm(their infDeepItr: cii) <- {
        prepWorkList(cii.crntCursor)
        our infItr[our list]: IdentsForCIsFollower <- doWorkList(cii.crntCursor)
        return(IdentsForCIsFollower)
    }

    void: normalize(our infon: i) <- {
        our infon: CI
        me infDeepItr: ii
        ii.initialize(i)
        our infItr[our list]: IdentsForCIsFollower<-NULL
        withEach count in WHILE(ii.getNextDeDotted()):{
            if(ii.state==sFirstVisit){
                if(IdentsForCIsFollower){
                    withEach ident in IdentsForCIsFollower:{
                        addIdent(ii.crntCursor, ident)
                    }
                }
                IdentsForCIsFollower <- fetchNodesNormalForm(ii)
            } else if(ii.state==sSecondVisit){
                CI <- ii.crntCursor.item
                CI.isNormed <- true

                /- Process CIs in a concat.
                if(ii.crntCursor.parent!=NULL and ii.crntCursor.parent.item!=NULL and (ii.crntCursor.parent.item.value.format==fConcat)){
                    if(ii.crntCursor.idx==0){ /- Set parent's type
                    } else {
                        our infon: prev <- ii.crntCursor.getPrevPtr()
                        if(joinOnRight(prev, CI)){
                            ii.deleteCrnt()
                        } else {}  /- Subscribe
                    }

                }
                if(ii.crntCursor.item.value.format==fConcat and ii.crntCursor.item.value.items.size()==1){
                    ii.crntCursor.parent.item.value.items[ii.crntCursor.idx] <- ii.crntCursor.item.value.items[0]
                }
            } /- else {logFatal("Unexpected iterator state in normalizer.")}

          /-  withEach L in RANGE(0..ii.nestLvl):{print("|    ")} print(printInfon(CI), "\n")

        }
    }

    me string: fetchAsStr(their infon: i) <- {return(i.value.str)}
    me uint64: fetchAsNum(their infon: i) <- {return(i.value.num)}
    our infon: fetchAsList(their infon: i, me int: idx) <- {return(i.value.items[idx])}

    me bool: loadAndParseData() <- {
        me string: data <- readFileAsString("data.pr")
        if(data==""){
            print("File Error!\n\n")
            exit(2)
        }

        me EParser: parser
        parser.populateGrammar()
        parser.initPosStateSets(parser.infon_str, data)

        parser.doParse()
        if(parser.doesParseHaveError()){
            print("\nParse Error:", parser.errorMesg, " at line ", parser.errLineNum,":", parser.errCharPos, "\n")
            exit(2)
        } else {print("\nParse Succeeded\n")}

        our stateRec: topItem <- parser.resolve(parser.lastTopLevelItem, "")
    /-    parser.displayParse(topItem, "")
    Allocate(world)
        parser.Extract_infon_to_infon(topItem, world)
    /-    trackerMgr.allData.topInfon <- settingsAndData

        return(true)
    }


    me string: printPureInfon(their pureInfon: pure, their pureInfon: size) <- {
        me string: S <- ""
        me bool: showSize <- (size!=NULL and (pure.sizeGiven !=0) and (pure.fType!=LST or pure.format!=fLiteral))
        if(showSize){S <- S+printPureInfon(size, NULL)}
        if(pure.inverted){
            if(size!=NULL){S <- S+"-"}
            else if(pure.isLstSize==0){S <- S+"/"}
        } else{
                if(showSize){S <- S+"+"}
                else if(size==NULL and pure.isLstSize==0){S <- S+"*"}
        }
        if(pure.fType == NUM){
            if(pure.format == fUNKNOWN){S<-S+"_"}
            else{
                me uint64:N <- pure.num
                S <- S+ toString(N)
            }
        } else if(pure.fType == STR){
            if(pure.format == fUNKNOWN){S<-S+"$"}
            else{
                me string: str <- pure.str
                S <- S+"'"+ str + "'"
            }
        } else if(pure.fType == LST){
            me bool: showBar<-false
            me string: endBrkt<-"}"
            if(pure.cursor == cGetLast)     {S<-S+"["  endBrkt<-"]"}
            else if(pure.format == fConcat) {S<-S+"("  endBrkt<-")"}
            else {S <- S+("{")}
            if(pure.timelike){S <- S+"T "}
            if(pure.size!=NULL) {pure.size.isLstSize <- true}
            if(pure.size!=NULL and pure.format==fLiteral){S <- S+"~"+printPureInfon(pure.size, NULL) showBar<-true}
            if(pure.listSpec){
                if(showBar){S <- S+" "}
                S <- S + printInfon(pure.listSpec)
                showBar<-true
            }
            if(showBar){S <- S+"| "}
            withEach item in pure.items:{
                if(item_key>0){S <- S+" "}
                S <- S+printInfon(item)
            }
            S <- S+endBrkt
        } else {print("Error In printPureInfon()\n") exit(2)}
        return(S)
    }

    me string: printInfon(our infon: i) <- {
        me string: S <- ""
        if(i.itmMode==mSubItems){S<-S+"#"}
        else if(i.itmMode==mDots){S<-S+"..." return(S)}
        else if(i.itmMode==mTagDefn){S<-S+"class "+i.tag+" "}

        if(i.asNot){S <- S+"!"}
        if(i.infMode==isUnknown){S <- S+"?"}
        else if(i.infMode==newCursor){S <- S+"%"+i.tag}
        else if(i.infMode==isTag){S <- S+i.tag}
        else if(i.infMode==isLiteral){
             S <- S+printPureInfon(i.value, i.size)
        } else {print("Error In PrintInfon()\n") exit(2)}

        if(i.isNormed ==0){
            withEach WorkItm in i.wrkList:{
                S <- S+" = "+printInfon(WorkItm.item)
            }

            if (i.isFunc){
                if(i.invertFunc){S <- S+"<!" + printInfon(i.aux1)}
                else{S <- S+"<:" + printInfon(i.aux1)}
            } else if(i.isFuncArg !=0){
                if(i.invertFunc){S <- S+"!>" + printInfon(i.aux1)}
                else{S <- S+":>" + printInfon(i.aux1)}
            }
        }
        return(S)
    }

    void: tmpTest(our infon: i) <- {
  /*      me infLItr: itmLItr
        our infon: inf <- itmLItr.getFirstNodeLvl(i)

        withEach cnt in WHILE(inf!=NULL):{
            print(printInfon(inf))
            inf <- itmLItr.getNextNodeLvl()
        } */
    }

}
/-///////////////////////////////////////
do codeDataDisplay(infon, TAG_infonDumpMode)
