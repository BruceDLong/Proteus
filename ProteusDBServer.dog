/- ProteusDBServer.dog

LinuxBuild: Platform='Linux' CPU='amd64' Lang='CPP' optimize='speed';
/-SwingBuild: Platform='Java' CPU='JavaVM' Lang='Java' optimize='speed';
/-AndroidBuild: Platform='Android' CPU='JavaVM' Lang='Java' optimize='power';
/-iPhoneBuild: Platform='IOS' CPU='amd64' Lang='Swift' optimize='speed';

Title = "Proteus Database Server"
FileName = "proteusDB"
Version = "0.8"
CopyrightMesg = "Copyright (c) 2015-2018 Bruce Long"
Authors = "Bruce Long"
Description = "Proteus Database Server"
ProgramOrLibrary = "program"

featuresNeeded = [Proteus, Websockets]

LicenseText = `This file is part of the "Proteus suite" All Rights Reserved.`


runCode=`runProteusServer()`


struct ProteusNetProtocol: inherits = 'webSocketProtocol' {
    void: send(me string: mesg) <- {}
    void: sendToAll(me string: mesg) <- {}
    me string: onRead(me string: mesg) <- {
        CORE.parser.initPosStateSets(CORE.parser.infon_str, mesg)
        CORE.parser.doParse()
        if(CORE.parser.doesParseHaveError()){
            return("Error:" + CORE.parser.errorMesg)
        } else {
            our stateRec: topItem <- CORE.parser.resolve(CORE.parser.lastTopLevelItem, "")
            our infon: topInfon
            Allocate(topInfon)
            CORE.parser.Extract_infon_to_infon(topItem, topInfon)
            CORE.a.normalize(topInfon)
            me string:result <- CORE.a.printInfon(topInfon)
            return(result)
        }
    }
    void: onConnection() <- {}
    void: onDisconnect() <- {}
}

struct GLOBAL{
    me ProteusCore: CORE

    void: runProteusServer()<-{
        me string: worldFileName <- "WORLD.pr"
        CORE.init(worldFileName)
        their ProteusNetProtocol: protProt Allocate(protProt)
        firstServer <- protProt
        me webServer: server;
        server.port <- 8080
        server.startServing()
    }
}
