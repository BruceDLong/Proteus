// test inflect
LinuxBuild:     Platform='Linux' LangVersion='GNU' Lang='CPP';
FileName = "testInflect"
ProgramOrLibrary = "program"
featuresNeeded = []


runCode=`testInflect()`

#include xlators/xlator_en.dog


struct GLOBAL{
    me bool: checkEnd(me string: word, me string: sufx, their int: sSze) <- {
        me int: wSize <- word.size()
        me int: sSize <- sufx.size()
        if(wSize <= sSize){return(false)}
        withEach idx in RANGE(1..sSize+1){
            if(word[wSize-idx] != sufx[sSize-idx]){
                return(false)
            }
        }
        sSze <deep- sSize
        return(true)
    }

    void: testInflect()<-{
        me Map<me string, me string>: words <- {
            "son-of-a-mom"               : "sons-of-moms",
            "alpah-phenomenon"           : "alpah-phenomena",
            "alpah-wildebeest"           : "alpah-wildebeests",
            "alpah-proboscis"            : "alpah-proboscises",
            "alpah-legomenon"            : "alpah-legomena",
            "alpah-bacillus"             : "alpah-bacilli",
            "knight-errant"              : "knights-errant",
            "mother-in-law"              : "mothers-in-law",
            "alpah-siemens"              : "alpah-siemens",
            "alpah-brother"              : "alpah-brothers",
            "alpah-sarcoma"              : "alpah-sarcomas",
            "alpah-stratum"              : "alpah-stratums",
            "alpah-nucleus"              : "alpah-nuclei",
            "alpah-measles"              : "alpah-measles",
            "alpah-glottis"              : "alpah-glottises",
            "alpah-person"               : "alpah-people",
            "alpah-mensch"               : "alpah-menschen",
            "alpah-hedron"               : "alpah-hedrons",
            "alpah-helion"               : "alpah-helions",
            "alpah-stave"                : "alpah-staves",
            "alpah-staff"                : "alpah-staffs",
            "alpah-genus"                : "alpah-genera",
            "alpah-hertz"                : "alpah-hertz",
            "alpah-child"                : "alpah-children",
            "alpah-knife"                : "alpah-knives",
            "alpah-shelf"                : "alpah-shelves",
            "alpah-thief"                : "alpah-thieves",
            "alpah-human"                : "alpah-humans",
            "alpah-goose"                : "alpah-geese",
            "alpah-louse"                : "alpah-lice",
            "alpah-mouse"                : "alpah-mice",
            "alpah-tooth"                : "alpah-teeth",
            "alpah-frizz"                : "alpah-frizzes",
            "alpah-drama"                : "alpah-dramas",
            "alpah-edema"                : "alpah-edemas",
            "alpah-lemma"                : "alpah-lemmas",
            "alpah-stoma"                : "alpah-stomas",
            "alpah-umbra"                : "alpah-umbras",
            "alpah-lumen"                : "alpah-lumens",
            "alpah-datum"                : "alpah-data",
            "alpah-helix"                : "alpah-helices",
            "alpah-sheep"                : "alpah-sheep",
            "alpah-craft"                : "alpah-craft",
            "alpah-hoof"                 : "alpah-hoofs",
            "alpah-leaf"                 : "alpah-leaves",
            "alpah-life"                 : "alpah-lives",
            "alpah-loaf"                 : "alpah-loaves",
            "alpah-wife"                 : "alpah-wives",
            "alpah-wolf"                 : "alpah-wolves",
            "alpah-foot"                 : "alpah-feet",
            "alpah-buzz"                 : "alpah-buzzes",
            "alpah-fizz"                 : "alpah-fizzes",
            "alpah-fuzz"                 : "alpah-fuzzes",
            "alpah-jazz"                 : "alpah-jazzes",
            "alpah-bema"                 : "alpah-bemas",
            "alpah-nova"                 : "alpah-novas",
            "alpah-bass"                 : "alpah-basses",
            "alpah-deer"                 : "alpah-deer",
            "alpah-fish"                 : "alpah-fish",
            "alpah-fowl"                 : "alpah-fowls",
            "alpah-lux"                  : "alpah-lux",
            "alpah-cow"                  : "alpah-cows",
            "alpah-elf"                  : "alpah-elves",
            "alpah-man"                  : "alpah-men",
            "alpah-pox"                  : "alpah-pox",
            "alpah-gas"                  : "alpah-gases",
            "alpah-ox"                   : "alpah-oxen",
            "alpah-oasis"                : "alpah-oases",
            "biceps"                     : "biceps",
            "penknife"                   : "penknives",
            "horse"                      : "horses",
            "matrix"                     : "matrixes",
            "protozoon"                  : "protozoa",
            "leaf"                       : "leaves",
            "case"                       : "cases",
            "oasis"                      : "oases",
            "shelf"                      : "shelves",
            "lynx"                       : "lynxes",
            "toe"                        : "toes",
            "boss"                       : "bosses",
            "campus"                     : "campuses",
            "zoo"                        : "zoos",
            "thigh"                      : "thighs",
            "city"                       : "cities",
            "box"                        : "boxes",
            "jazz"                       : "jazzes",
            "bus"                        : "buses"
        }
        print("================================\n")
        me Inflect: inflect
        withEach word in words{
            me string: wordS    <- word.key
            me string: wordP    <- word.val
            me string: plural   <- inflect.convert_to_modern_plural(wordS)
            me string: singular <- inflect.convert_to_singular(wordP)
            if(plural!=wordP)  {print("@@@ plural   given: ", wordP,"\t\t    calculated: ",plural,"\n")}
            if(singular!=wordS){print("@@@ singular given: ", wordS,"\t\t    calculated: ",singular,"\n")}
        }
        print("\n")
    }
}
