/- infonViewer.dog

LinuxBuild: Platform='Linux' CPU='amd64' Lang='CPP' optimize='speed';
/-SwingBuild: Platform='Java' CPU='JavaVM' Lang='Java' optimize='speed';
/-AndroidBuild: Platform='Android' CPU='JavaVM' Lang='Java' optimize='power';
/-SwiftBuild: Platform='XCODE' CPU='amd64' Lang='Swift' optimize='speed';

BuildCmd = "g++ -g -std=gnu++14 `pkg-config --cflags gtk+-3.0` infonViewer.cpp `pkg-config --libs gtk+-3.0` -o infonViewer"
Title = "Infomage - DataDog"
FileName = "infonViewer"
Version = "0.8"
CopyrightMesg = "Copyright (c) 2015-2016 Bruce Long"
Authors = "Bruce Long"
Description = "DataDog gives you the numbers of your life."
ProgramOrLibrary = "program"

featuresNeeded = [GUI_ToolKit, Dashboard, Proteus]

LicenseText = `This file is part of the "Proteus suite" All Rights Reserved.`

runCode=`
    thisApp.loadAndParseSettingsAndData()
    isFirstRun<-true
    dataManager.initialize()
    dashBoard.initialize(0,0,100,100,1,256)
`
UserActionSets = [
    {module = 'mainProgram' menuItems = [
            ['File|Configure Trackers', 3, 'printMgr.print()'],
            ['File|View / Print Reports', 3, 'printMgr.print()'],
            ['File|Goals',      3, ''],
            ['File|Close',      3, ''],
            ['Edit|Undo',       3, ''],
            ['Edit|Redo',       3, ''],
            ['Edit|Cut',        3, ''],
            ['Edit|Copy',       3, ''],
            ['Edit|Paste',      3, ''],
            ['Edit|Settings',   3, ''],
            ['Community',       3, ''],
            ['Help',            3, '']
        ]
    }
]
infonDumpMode='both'
do makeGUI(GUI_Spec)
do makeMenu(mainProgram)

/-////////////////////////
/- Infon Interface Routines


/-///////   I n f o r m a t i o n   S o u r c e   s p e c i f i c a t i o n s   s t r u c t s

struct infonTypeSpec{       /- Represents an infon source / views
    me string: IdTag
    me string: longTitle
    me string: shortTitle
    me bool: isDefault
/-    our infonView[list]: viewSpec
 /-   our paramSpec[list]: infonSpecParams
/-    our infonPoint[list]: infonPoints
}

/-//////////   D a t a M a n   a n d   i t s   s u p p o r t i n g   s t r u c t s

struct trackerConfigParams{
    me string: name
    me string: dateType
    me string: stringParam
    me double: doubleParam
    me int: intParam
}

struct dataSourceDetails{
    our infonTypeSpec: infonArchetype
    me string: infSpecTag
    me string: nickName
    me string[list]: subCategories
    me double: refrestRate
    me trackerConfigParams[list]: trackerParamsList
    me int: trackerID
/-    their RandomGen: dataRS
    me bool: isPaused
}

struct dispInfon{
    our infon: infToDisp
    void: run() <- {
        markDirtyArea(drawing_area, 0,0,1000,1000)
    }
}

struct dataMan{
    our dataSourceDetails[list]: currentTrackers

    me int: addTracker(our dataSourceDetails: sourceDetails) <- {
        me string: InfSrcTypeIDTag <- sourceDetails.infonArchetype.IdTag
     /-   me int: timerID

       if(InfSrcTypeIDTag=="dispInfon"){
            display_infon: dBoard Allocate(dBoard)
            dBoard.update("TopInfon", ">", Parse_infon("{ {'A'|...}  'AARON'} = 'AAAARON'"))
            dBoard.setPos(15,15,15+20)
            dashBoard.children.pushLast(dBoard)
           /- callPeriodically(dispInfon, dispInfonSrc, 100)
        }

    me int: trackerID <-0
        return(trackerID)
    }

    our infonTypeSpec[list]: TypesOfInfoSources_Views
    void: initTypesOfInfoSources_Views() <-{
        our infonTypeSpec: infSpec

        Allocate(infSpec)
        infSpec.IdTag <- "dispInfon"
        infSpec.longTitle <- "Infon"
        infSpec.shortTitle <- "infon"
        infSpec.isDefault <- true
        TypesOfInfoSources_Views.pushLast(infSpec)
    }

    void: initialize() <- {
        currentTrackers.clear()
        initTypesOfInfoSources_Views()     /- Load the supported types of infon tracking from literals
        if(isFirstRun){
            withEach srcInf in TypesOfInfoSources_Views:{
                if(srcInf.isDefault){
                    our dataSourceDetails: newTracker
                    Allocate(newTracker)
                    newTracker.infonArchetype <- srcInf
                    currentTrackers.pushLast(newTracker)
                    addTracker(newTracker)
                }
            }
        } else {
            /- Load currentTrackers from File
        }
    }

    me void: deinitialize() <- {

    }
}

/-//////////   A p p l i c a t i o n   a n d   G l o b a l s

struct GLOBAL{

    me bool: isFirstRun
    me dataMan: dataManager
    me dashboard: dashBoard
    me GUI_canvas: drawing_area

    me bool: drawAppArea_cb (me GUI_item: Widget, me GUI_ctxt: cr)  <- { /-, me gpointer: data)  <- {
        /-    gui.fetchAreaToBeDrawn(areaToBeDrawn)
        thisApp.gui.setWidgetSize(drawing_area, dashBoard.width, dashBoard.height)
        dashBoard.draw(cr)
        return(false)
    }

}


struct APP{
    my GUI: gui
    me GUI_ScrollingWindow: scrollerRef

    me infon: settingsAndData
    me bool: loadAndParseSettingsAndData() <- {
        return(true)
    }

    me void: createAppMenu(me GUI_frame: frame) <- {
        me GUI_menuBar: menubar
        me GUI_menu: MenuLvl1
        /-me GUI_menu: MenuLvl2
        MenuLvl1 <- gui.create_TopSubMenu(menubar, "File")
            gui.create_MenuItem(MenuLvl1, "Configure Trackers")    /- About this data, ( )Track, ( )Show, [Color |v], [Units |v]
            gui.create_MenuItem(MenuLvl1, "View / Print Reports")
            gui.create_MenuItem(MenuLvl1, "Goals")
            gui.create_MenuItem(MenuLvl1, "Close")
        MenuLvl1 <- gui.create_TopSubMenu(menubar, "Edit")
            gui.create_MenuItem(MenuLvl1, "Undo")
            gui.create_MenuItem(MenuLvl1, "Redo")
            gui.create_MenuItem(MenuLvl1, "Cut")
            gui.create_MenuItem(MenuLvl1, "Copy")
            gui.create_MenuItem(MenuLvl1, "Paste")

        gui.addMenuBar(frame, menubar)
    }

    me void: createAppArea(me GUI_frame: frame) <- {
        drawing_area  <- gui.newCanvas()
        me GUI_ScrollingWindow:: scroller(gui.newScrollingWindow(NULL, NULL))
        scrollerRef <- scroller
        gui.addToViewport(scroller, drawing_area)
        gui.setWidgetSize(drawing_area, widgetWidth(thisApp.scrollerRef), widgetHeight(thisApp.scrollerRef))
        gui.setCallback(drawing_area, "draw", G_CALLBACK(drawAppArea_cb))
        setMasterWidget(dashBoard)
        EventDispatcher.registerWidgetForEventDispatcher(drawing_area)
        gui.addToContainer (frame, scroller)
    }
}
