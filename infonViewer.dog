// infonViewer.dog

LinuxBuild: Platform='Linux' CPU='amd64' Lang='CPP' optimize='speed';
//SwingBuild: Platform='Java' CPU='JavaVM' Lang='Java' optimize='speed';
//AndroidBuild: Platform='Android' CPU='JavaVM' Lang='Java' optimize='power';
//iPhoneBuild: Platform='IOS' CPU='amd64' Lang='Swift' optimize='speed';

Title = "Infomage - Infon Viewer"
FileName = "infonViewer"
Version = "0.8"
CopyrightMesg = "Copyright (c) 2015-2016 Bruce Long"
Authors = "Bruce Long"
Description = "Infon Viewer is a tool for debugging Proteus core."
ProgramOrLibrary = "program"

featuresNeeded = [GUI_ToolKit, Dashboard, DataManager, Proteus, ReadMultiLine, Terminal]

LicenseText = `This file is part of the "Proteus suite" All Rights Reserved.`

runCode=`
    logMgr.init(OFile)
    log("InfonViewer started")
    thisApp.loadAndParseSettingsAndData()
    isFirstRun<-true
    Allocate(CORE); CORE.init("world.pr")
    Allocate(styler)
    log("Runcode completed")
`
infonDumpMode='draw'
mainStyle = {
    colors = {}
    fontNames = {}
    fontSizes = {}
    fontSizeMode = pp
}
do makeStyler(mainStyle)
do makeGUI(GUI_Spec)
do makeMenu(mainProgram)

//////////////////////////
// Infon Interface Routines


/////////   I n f o r m a t i o n   S o u r c e   s p e c i f i c a t i o n s   s t r u c t s

struct infonTypeSpec{       // Represents an infon source / views
    me string: IdTag
    me string: longTitle
    me string: shortTitle
    me bool: isDefault
//    our infonView[list]: viewSpec
 //   our paramSpec[list]: infonSpecParams
//    our infonPoint[list]: infonPoints
}

////////////   D a t a M a n   a n d   i t s   s u p p o r t i n g   s t r u c t s
struct trackerConfigParams{
    me string: name
    me string: dateType
    me string: stringParam
    me double: doubleParam
    me int: intParam
}

struct dataSourceDetails{
    our infonTypeSpec: infonArchetype
    me string: infSpecTag
    me string: nickName
    me string[list]: subCategories
    me double: refrestRate
    me trackerConfigParams[list]: trackerParamsList
    me int: trackerID
    me bool: isPaused
}

struct ViewController{
    our dataSourceDetails[list]: currentTrackers
    our DataManager: dataManager
    our Dashboard: VCDashboard

    me int: addTracker(our dataSourceDetails: sourceDetails) <- {
        me string: InfSrcTypeIDTag <- sourceDetails.infonArchetype.IdTag

       if(InfSrcTypeIDTag=="dispInfon"){
            Allocate(TopInfonDash)
            VCDashboard.addChild(TopInfonDash)
            TopInfonDash.update("World", ">", CORE.WORLD)
            TopInfonDash.setPos(15,15,15+20)
        }else{log("fail to add tracker:"+InfSrcTypeIDTag)}
        me int: trackerID <- 0
        return(trackerID)
    }

    our infonTypeSpec[list]: TypesOfInfoSources_Views
    void: initTypesOfInfoSources_Views() <-{
        our infonTypeSpec: infSpec

        Allocate(infSpec)
        infSpec.IdTag <- "dispInfon"
        infSpec.longTitle <- "Infon"
        infSpec.shortTitle <- "infon"
        infSpec.isDefault <- true
        TypesOfInfoSources_Views.pushLast(infSpec)
    }

    void: initialize(our DataManager: theDataMan, our Dashboard: dboard) <- {
        dataManager <- theDataMan
        VCDashboard <- dboard
        currentTrackers.clear()
        initTypesOfInfoSources_Views()
        if(isFirstRun){
            withEach srcInf in TypesOfInfoSources_Views{
                if(srcInf.isDefault){
                    our dataSourceDetails: newTracker
                    Allocate(newTracker)
                    newTracker.infonArchetype <- srcInf
                    currentTrackers.pushLast(newTracker)
                    addTracker(newTracker)
                }
            }
        } else {
            // Load currentTrackers from File
        }
    }

    me void: deinitialize() <- {

    }
}

////////////   A p p l i c a t i o n   a n d   G l o b a l s
struct clipViewDBW: inherits=DashboardWidget{
    their appComponentGUI: parentGuiMgr
    their GUI_Frame:       box

    their GUI_Frame: initWidget(me string: label)      <- {
        title                   <- 'clipViewDBW'
        dashboardDBW.init(title)
        box                     <- makeYStack(title)
        canvas                  <- thisApp.gui.newCanvas()
        canvas.setParent(self)
        dashboardDBW.dashParent <- self
        dashboardDBW.canvas     <- canvas
        dashboardDBW.sizingMode <- accomodateParent
        dashboardDBW.layoutMode <- verticalStack
        thisApp.gui.setWidgetSize(canvas,500,900)
        EventDispatcher.registerWidgetForEventDispatcher(canvas, self)
        addToContainer(box, canvas)
        return(box)
    }
    me int: getValue() <- {return(0)}
    me void: setValue(me int: val) <- {}
    void: onChanged()  <- {parentGuiMgr.onChanged()}
    me bool: keyTyped(their GUI_KeyboardEvent: event) <- {
        if(event.keyval==GDK_KEY_plus or event.keyval==GDK_KEY_KP_Add){
            scaleFactor <- scaleFactor+0.05
            requestRedraw()
        }
        else if(event.keyval==GDK_KEY_minus or event.keyval==GDK_KEY_KP_Subtract){
            scaleFactor <- max(0.01, scaleFactor-0.05)
            requestRedraw()
        }
        else if(event.keyval==GDK_KEY_p){
            clipDashBoard.dashboardDBW.drawToPDF('infonView.pdf', 11.0, 8.5, scaleFactor)
        }
        return(true)
    }
}

struct infonUpdateData {
    me string: txt1
    me string: txt2
    our infon: i
}
struct GLOBAL{
    me bool: isFirstRun
    their clip: theClip
    our ProteusCore: CORE
    our DataManager: dataManager
    our ViewController: viewController
    our clipViewDBW: clipDashBoard
    our display_infon: TopInfonDash

    bool: CallInfonUpdateInternal(their infonUpdateData: data) <- {
        their infonUpdateData:  IUD <- data
        TopInfonDash.update(IUD.txt1, IUD.txt2, IUD.i)
        TopInfonDash.requestRedraw()
        return(false)
    }
    void: addDisplayInfItr(me string: title, our infItr: itr2Add) <- {
        our display_infItr: newDash
        Allocate(newDash)
        clipDashBoard.dashboardDBW.addChild(newDash)
        newDash.update(title, ">", itr2Add)
        newDash.setPos(0,0,0)
    }
    void: addDisplayInfon(me string: title, our infon: infon2Add) <- {
        our display_infon: newDash
        Allocate(newDash)
        clipDashBoard.dashboardDBW.addChild(newDash)
        newDash.update(title, ">", infon2Add)
        newDash.setPos(0,0,0)
    }
}

struct clip: inherits = "Threads"{

    their readMultiLine: RML
    me bool: stepMode <- true

    void: CallInfonUpdateExternal(me string: txt1, me string: txt2, our infon: i) <- {
        their infonUpdateData: IUD; Allocate(IUD)
        IUD.txt1 <- txt1
        IUD.txt2 <- txt2
        IUD.i <- i
        their GMainContext: GUIContext <- g_main_context_get_thread_default()
        g_main_context_invoke(GUIContext, GSourceFunc(CallInfonUpdateInternal), IUD);
    }

    void: dispAndWait(me string: mesg) <- {
        if(RML!=NULL and stepMode){
            styler.userColors.clear()
            styler.setCustomColor(crntLHSMySymbol, styler.highlight2Color)
            styler.setCustomColor(crntRHSMySymbol, styler.highlight3Color)
            me char: key <- "x"
            while(key!=" "){
                RML.message <- mesg
                RML.refreshDisplay(0)
                CallInfonUpdateExternal("Top infon", ">", CORE.WORLD)
                key <- waitForKeyPressed(RML.readMultiLineGUIMode)
            }
            RML.message <- ""
        }
    }

    void: run()<-{
        Allocate(RML,1," >~$Ss=?#:")
        RML.initNCurses()
        RML.addUserMesg("The Proteus CLI. Type some infons, 'quit' or 'help':", 5+shiftLeft(8, 4))  // ColrMesg + tagMesg

        me bool: done <- false
        while(!done){
            me string: inputStr <- RML.readLines()
            if(inputStr=="quit" or  RML.cmd==4){break()}  //rml.cmd==CTRLD
            else if (inputStr=="help"){}
            else if (inputStr=="dict"){}
            else if (inputStr==""){continue()}
            else{
                our infon: crntInfon <- CORE.parseAndExtract(inputStr)
                if(crntInfon!=NULL){
                    CORE.agent.appendToWorld(crntInfon)
                    dispAndWait("Next: normalize()")
                    CORE.agent.normalize(crntInfon)
                    dispAndWait("NOMALIZED")
                    me string:result <- toString(crntInfon) //+ "   SIZE:" + CORE.agent.printPureInfon(crntInfon.calcSize(), NULL)
                    RML.addUserMesg(result, 3+shiftLeft(6, 4))  // ColrResultOK + tagResult
                } else {
                    RML.message <- "Parse Error:" + CORE.parser.errorMesg + " at line " + toString(CORE.parser.errLineNum) + ":" + toString(CORE.parser.errCharPos)
                }
            }
        }
    }
}


struct APP{
    my GUI: gui
    their GUI_ScrollingWindow: scrollerRef
    me infon: settingsAndData

    me bool: loadAndParseSettingsAndData() <- {
        return(true)
    }

    me void: createAppMenu(me GUI_Frame: frame) <- {
    }

    me void: createAppArea(me GUI_Frame: frame) <- {
        Allocate(dataManager)
        dataManager.initialize()
        Allocate(clipDashBoard)
        their GUI_Frame: CWBox <- clipDashBoard.initWidget("")
        clipDashBoard.dashboardDBW.setPos(15,15,0)
        Allocate(viewController)
        viewController.initialize(dataManager, clipDashBoard.dashboardDBW)
        scrollerRef <- newScrollingWindow()
        thisApp.gui.setWidgetSize(scrollerRef,500,900)
        addToContainer(scrollerRef, CWBox)
        addToContainer(frame, scrollerRef)
        Allocate(theClip)
        log("Starting Clip...")
        theClip.start()
    }
}
