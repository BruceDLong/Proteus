/- ProteusTests.dog

TestsToRun = `
    parser/misc/tUnknown
    parser/misc/isTag
    parser/misc/isNot
    parser/misc/world
    parser/misc/this
    parser/misc/prev
    parser/misc/next

    parser/num/bare
    parser/num/plus
    parser/num/sized
    parser/num/divd
    parser/num/unknown
    parser/num/neg

    parser/str/quote1
/-    parser/str/quote2
    parser/str/unknown
    parser/str/sized

    parser/list/simple
    parser/list/time
    parser/list/empty
    parser/list/unknown
    parser/list/defClass
    parser/list/classed
/-    parser/list/sized1
    parser/list/sized2
    parser/list/CandS1
    parser/list/CandS2
    parser/list/noC
    parser/list/partial
    parser/list/embedded
    parser/list/concat
    parser/list/square

    parser/ident/bare

    parser/func/left
    parser/func/right
    parser/func/leftInv
    parser/func/rightInv


    merge/num/typed1
    merge/num/typed2
    merge/num/typed3
    merge/num/typed4
    merge/num/typed5
    merge/num/typed6
    merge/num/typed7

    merge/str/typed1
    merge/str/typed2
    merge/str/typed3
    merge/str/typed4
    merge/str/typed5

    merge/list/empty
    merge/list/misc
    merge/list/multiID
    merge/list/N_dots
    merge/list/dots
    merge/list/dotsC

    EmbeddedLists/LHS
    EmbeddedLists/RHS
    EmbeddedLists/eLHS
    EmbeddedLists/eRHS
    EmbeddedLists/e_e
    EmbeddedLists/f_f

    concat/twoNums

    getLastItem/simple
    getLastItem/embedded

    pushArg/rightFirst
    pushArg/leftFirst
    pushArg/rightLast
    pushArg/leftLast

`

runCode=`RUN_SELECTED_TESTS()`
FileName = "TestProteus"

#define MULTITEST(NAME, MSG, SPEC) <% TEST_CASE(NAME, MSG){agent *a=0; multiNorm(&a, SPEC);} %>
#define PARSETEST(NAME, MSG, IN, OUT) <%void: DESLASH(NAME)()<-{ParseData(IN, OUT, false)}%>
#define NORMTEST (NAME, MSG, IN, OUT) <%void: DESLASH(NAME)()<-{ParseData(IN, OUT, true)}%>

struct GLOBAL {
    PARSETEST(parser/misc/tUnknown, "type unknown",     "?", "?")
    PARSETEST(parser/misc/isTag,    "parse a tag",      "ImATag", "ImATag")
    PARSETEST(parser/misc/isNot,    "Not tag",          "!ImATag", "!ImATag")
    PARSETEST(parser/misc/world,    "World cursor",     "%W", "%W")
    PARSETEST(parser/misc/this,     "this cursor",      "%this", "%this")
    PARSETEST(parser/misc/prev,     "prev cursor",      "%prev", "%prev")
    PARSETEST(parser/misc/next,     "next cursor",      "%next", "%next")

    PARSETEST(parser/num/bare,      "Simple number",    "34", "34")
    PARSETEST(parser/num/plus,      "Positive number",  "+34", "34")
    PARSETEST(parser/num/sized,     "Sized number",     "*64+34 ", "*64+34")
    PARSETEST(parser/num/divd,      "Sized number",     "/64-34", "/64-34")
    PARSETEST(parser/num/unknown,   "Unknown number",   "_", "_")
    PARSETEST(parser/num/neg,       "Negative number",  "-34", "-34")

    PARSETEST(parser/str/quote1,    "Single Quoted",    "'Hello There!'", "'Hello There!'")
    PARSETEST(parser/str/quote2,    "Double Quoted",    '"Hello There!"', "'Hello There!'")
    PARSETEST(parser/str/unknown,   "Unknown string",   "$", "$")
    PARSETEST(parser/str/sized,     "Size given",        "*4+$", "*4+$")

    PARSETEST(parser/list/simple,   "simple list",      "{'A' 12 {1 2 3}}", "{'A' 12 {1 2 3}}")
    PARSETEST(parser/list/time,     "time list",        "{T 'A' 12}", "{T 'A' 12}")
    PARSETEST(parser/list/empty,    "empty list",       "{}", "{}")
    PARSETEST(parser/list/unknown,  "Unknown list",     "{1 ... 3}", "{1 ... 3}")
    PARSETEST(parser/list/defClass, "define a class",   "{'A' class item {1 2 3} 12}", "{'A' class item {1 2 3} 12}")
    PARSETEST(parser/list/classed,  "classed list",     "{item| 'A' 12}", "{item| 'A' 12}")
/-    PARSETEST(parser/list/sized1,   "sized list1",      "{~2| 'A' 12}", "{~2| 'A' 12}")   /- TODO: This causes a parse-resolution-order issue
    PARSETEST(parser/list/sized2,   "sized list2",      "{~2 'A' 12}",  "{~2| 'A' 12}")
    PARSETEST(parser/list/CandS1,   "Both specs1",      "{~ 2 item| 'A' 12}", "{~2 item| 'A' 12}")
    PARSETEST(parser/list/CandS2,   "Both specs2",      "{~2 item | 'A' 12}", "{~2 item| 'A' 12}")
    PARSETEST(parser/list/noC,      "No C",             "{item| 'A' 12}", "{item| 'A' 12}")
    PARSETEST(parser/list/partial,  "partial lists",    "{ {...} {1 ... } {1 ... 5} {}}", "{{...} {1 ...} {1 ... 5} {}}")
    PARSETEST(parser/list/embedded, "Embedded list",    "{1 2 #{3 4 5} 6 7}", "{1 2 #{3 4 5} 6 7}")
    PARSETEST(parser/list/concat,   "concated list",    "(1 2 3)", "(1 2 3)")
    PARSETEST(parser/list/square,   "square brackets",  "[1 2 3]", "[1 2 3]")

    PARSETEST(parser/ident/bare,    "Simple identity",  "_=34", "_ = 34")

    PARSETEST(parser/func/left,     "Args on left",     "[_ 2 3]<:1", "[_ 2 3]<:1")
    PARSETEST(parser/func/right,    "Args on right",    "1:>[_ 2 3]", "1:>[_ 2 3]")
    PARSETEST(parser/func/leftInv,  "Invert on left",   "[_ 2 3]<!1", "[_ 2 3]<!1")
    PARSETEST(parser/func/rightInv, "Invert on right",  "1!>[_ 2 3]", "1!>[_ 2 3]")


    NORMTEST(merge/num/typed1,       "typed int merge 1",   "*16+10 = *16+10",  "*16+10")
    NORMTEST(merge/num/typed2,       "typed int merge 2",   "*16+_ = *16+9",    "*16+9")
    NORMTEST(merge/num/typed3,       "typed int merge 3",   "_ = *16+10",       "*16+10")
    NORMTEST(merge/num/typed4,       "typed int merge 4",   "*_+_ = *16+9",     "*16+9")
    NORMTEST(merge/num/typed5,       "typed int merge 5",   "*_+8 = *16+8",     "*16+8")
    NORMTEST(merge/num/typed6,       "typed int merge 6",   "*16+10 = *16+_",   "*16+10")
    NORMTEST(merge/num/typed7,       "typed int merge 7",   "*16+_ = *_+9",     "*16+9")

    /-            Add tests with zero size / value, value larger than size, later: negative, fractional, expression.
    /-            Add Rainy day tests: Mis-matched types, mis-matched sizes, mis-matched values

    NORMTEST(merge/str/typed1,       "typed str merge 1",   "*5+'Hello' = *5+'Hello'", "*5+'Hello'")
    NORMTEST(merge/str/typed2,       "typed str merge 2",   "*5+$ = 'Hello'",          "'Hello'")
    NORMTEST(merge/str/typed3,       "typed str merge 3",   "$ = 'Hello'",             "'Hello'")
    NORMTEST(merge/str/typed4,       "typed str merge 4",   "*_+$ = 'Hello'",          "'Hello'")
    NORMTEST(merge/str/typed5,       "typed str merge 5",   "'Hello' = *5+$",          "'Hello'")

    /-            Add tests with zero size / value, value larger than size, later: negative, fractional, expression.
    /-            Add Rainy day tests: Mis-matched types, mis-matched sizes, mis-matched values

    NORMTEST(merge/list/empty,       "Merge empty list",    "{} = {}", "{}")
    NORMTEST(merge/list/misc,        "Merge misc items",    "*4+{3 _ $ *3+{...}} = *4+{3 4 'hi' {5 6 7}}", "{3 4 'hi' {5 6 7}}")
    NORMTEST(merge/list/multiID,     "Merge many idents",   "{_ _ _} = {_ 2 _} = { 1 _ _} = { _ _ 3}", "{1 2 3}")
    NORMTEST(merge/list/N_dots,      "Merge N items ...",   "*3+{...} = {1 2 3}", "{*1+1 *1+2 *1+3 }")
    NORMTEST(merge/list/dots,        "Merge to ...",        "*_+{...} = {2 3 4}", "{*1+2 *1+3 *1+4 }")
    NORMTEST(merge/list/dotsC,       "Merge cont to ...",   "{...} = {2 3 4 ...}", "{*1+2 *1+3 *1+4 ...}")

    NORMTEST(EmbeddedLists/LHS,      "Test #{} on LHS",     "{1 2 #{_ _} _} = {1 2 3 4 5}",    "{1 2 #{3 4} 5}")
    NORMTEST(EmbeddedLists/RHS,      "Test #{} on RHS",     "{1 2 _ _ _} = {1 2 #{3 4} 5}",    "{1 2 3 4 5}")
    NORMTEST(EmbeddedLists/eLHS,     "Test #{} on LHS",     "{1 2 #{} _} = {1 2 3}",           "{1 2 #{} 3}")
    NORMTEST(EmbeddedLists/eRHS,     "Test #{} on RHS",     "{1 2 _ _ _} = {1 2 #{} 3 4 5}",   "{1 2 3 4 5}")
    NORMTEST(EmbeddedLists/e_e,      "#{} on both sides",   "{1 2 #{} _ _} = {1 2 #{} 3 4}",   "{1 2 3 4}")
    NORMTEST(EmbeddedLists/f_f,      "#{..} on both sides", "{1 2 #{_ 4} _} = {1 2 #{3 _} 5}", "{1 2 3 4 5}")

    NORMTEST(concat/twoNums,         "Test small concat",   "{1 (*8+4 *4+3) 3}", "{1 *32+19 3}")

    NORMTEST(getLastItem/simple,     "Test getLast",        "[2 3 4 5]", "5")
    NORMTEST(getLastItem/embedded,   "getLast with #{}",    "[2 3 4 #{5 6 7}]", "7")

    NORMTEST(pushArg/rightFirst,     "test right arg",      "{_ 6 _}<:5", "{5 6 _}")
    NORMTEST(pushArg/leftFirst,      "test left arg",       "5:>{_ 6 _}", "{5 6 _}")
    NORMTEST(pushArg/rightLast,      "test right inverse",  "{_ 6 _}<!7", "{_ 6 7}")
    NORMTEST(pushArg/leftLast,       "test left inverse",   "7!>{_ 6 _}", "{_ 6 7}")

/-////////////////////////////////////////////////////////////
    me void: ParseData(me string: in, me string: expected, me bool: doNorm) <- {
        me string: data <- in

        me EParser: parser
        parser.populateGrammar()
        parser.initPosStateSets(parser.infon_str, data)

        parser.doParse()
        if(parser.doesParseHaveError()){
            FAIL("Parse Error:" + parser.errorMesg)
           /- print("\nParse Error:", parser.errorMesg, " at line ", parser.errLineNum,":", parser.errCharPos, "\n")
        } /-else {print("\nParse Succeeded\n")}

        our stateRec: topItem <- parser.resolve(parser.lastTopLevelItem, "")
      /-  parser.displayParse(topItem, "")
        our infon: world
        Allocate(world)
        parser.Extract_infon_to_infon(topItem, world)
        me agent: A
        if (doNorm){A.normalize(world)}
        me string:result <- A.printInfon(world)
        REQUIRE(result==expected)
        return()
    }

}
