// ProteusTests.dog

TestsToRun = `
    parser/misc/tUnknown
    parser/misc/isWord
    parser/misc/isNot
    parser/misc/world
    parser/misc/self
    parser/misc/args
    parser/misc/vars

    parser/num/bare
    parser/num/plus
    parser/num/sized
    parser/num/divd
    parser/num/unknown
    parser/num/neg

    parse/largenum
    parse/hexnum
    parse/binnum
    parse/decimal
    parse/frac

    parser/str/quote1
    parser/str/quote2
    parser/str/unknown
    parser/str/sized

    parser/list/simple
    parser/list/time
    parser/list/empty
    parser/list/unknown
    parser/list/defClass
    parser/list/classed
    parser/list/sized1
    parser/list/sized2
    parser/list/CandS1
    parser/list/CandS2
    parser/list/noC
    parser/list/partial
    parser/list/embedded
    parser/list/concat
    parser/list/square
    parser/list/commas

    parser/ident/bare
    parser/ident/force
    merge/ident/force

    parser/func/right
    parser/func/left
    parser/func/rightInv
    parser/func/leftInv

    unit/GFirst/t1
    unit/GFirst/t2
    unit/GFirst/t3
    unit/GFirst/t4

    unit/GFirstT/t1
    unit/GFirstT/t2
    unit/GFirstT/t3
    unit/GFirstT/t4
    unit/GFirstT/t5
    unit/GFirstT/t6

    unit/GNext/t1
    unit/GNext/t2
    unit/GNext/t3

    unit/GNextT/t1
    unit/GNextT/t2
    unit/GNextT/t3
    unit/GNextT/t4

    merge/num/typed1
    merge/num/typed2
    merge/num/typed3
    merge/num/typed4
    merge/num/typed5
    merge/num/typed6
    merge/num/typed7

    merge/str/typed1
    merge/str/typed2
    merge/str/typed3
    merge/str/typed4
    merge/str/typed5

    merge/str/loose
    merge/str/looseSize
    merge/unknown/loose
    merge/unknown/looseSize
    merge/unknown/typed
    merge/func/loose
    merge/func/looseSize
    merge/func/typed

    merge/list/empty
    merge/list/N_dots1
    merge/list/N_dots2
    merge/list/N_dots3
    merge/list/dots
    merge/list/dotsC
    merge/list/nums
    merge/list/misc
    merge/list/multiID

    merge/calcSize
    trav/list/withEmpty

    merge/intersect/onRHS

    noRHS/dots/simple
    noRHS/dots/nestedOut
    noRHS/dots/nestedIn
    merge/dots/align1
    merge/dots/align2a
    merge/dots/align2b
    merge/dots/align3
    merge/dots/align4
    merge/dots/align4b
//tmp    merge/dots/align5

    EmbeddedLists/LHS
    EmbeddedLists/RHS
    EmbeddedLists/eLHS
    EmbeddedLists/eRHS
    EmbeddedLists/e_e
    EmbeddedLists/f_f

    getLastItem/simple
    getLastItem/embedded
    getLastItem/list
    getLastItem/intID
    getLastItem/strID
    getLastItem/listID
    getLastItem/intIDQ
    getLastItem/strIDQ
    getLastItem/listIDQ

    altSelect/simple

    pushArg/rightFirst
    pushArg/leftFirst
    pushArg/rightLast
    pushArg/leftLast

    concat/oneItem
    concat/simpleStr
    concat/twoNums
    concat/strCat
    concat/numCat
    concat/simpleList
    concat/listCat
    concat/parseSrc
//    concat/toNum
//    concat/toStr
//    concat/sizeTst

    tUnknown/simple
    tUnknown/simple2
    tUnknown/unknownIsNum
    tUnknown/unknownIsStr
    tUnknown/unknownIsLst1
    tUnknown/unknownIsLst2

    parse/parse3n4
    parse/catHatDogPig
    parse/simple2
//    parse/inner
//    parse/get2nd
    parse/reps1
    parse/reps2
    parse/innerID
    parse/grouping1
    parse/grouping2

    func/simpleList1
    func/simpleList2
    func/simpleList3
    func/anonFunc1

//    parse/select1st
//    parse/2Itms
//    parse/2ItmsGet1st

    innr/oneOf

    query/first
    query/getNth
    query/getNthSub
    query/getNthSub2
//    query/firstStrA           // This should be made to work but isn't critical. Probably the prob is nested &s.
    query/firstStrB
    query/firstStrC

    write/writeStrA
    write/writeByIdx
    write/first
    write/last
    write/1stAndLst

    read/readStrA
    read/readByIdx
    read/first
    read/last

    word/types
    word/deref
    word/useTags
//    word/wordID    // these two tests test a language feature that was wrong
//    word/locale

    query/firstType
    query/byType1
    query/chain
    query/chain2
    query/chain3
    query/chain4

    parse/lang

    outr/test1
    outr/everyOther

    neg/simple
    fracs/simple

    range/join
    range/select1
    range/select2
    range/select3
    range/concat1
    range/dot
//tmp    range/alts
    //range/neg
//    slice/select

    lang/splitText

//temp/t1
    user/getUser
    user/getUser3
    user/getNth
    //sugar/getNth
    user/setNth
    word/setColor

    search/adj1

    time/t1
`
runCode=`
    log("Proteus tests started")
    RUN_SELECTED_TESTS()
`
FileName = "TestProteus"

do ManageCmdLine(cmd)

#define MULTITEST(NAME, MSG, SPEC) <%void: DESLASH(NAME)(me string: tname)<-{multiNorm(tname, SPEC,"")}%>
#define WORLDTEST(NAME, MSG, WFILE, SPEC) <%void: DESLASH(NAME)(me string: tname)<-{multiNorm(tname, SPEC, WFILE)}%>
#define PARSETEST(NAME, MSG, IN, OUT) <%void: DESLASH(NAME)(me string: tname)<-{initAndTest(tname, IN, OUT, false)}%>
#define NORMTEST (NAME, MSG, IN, OUT) <%void: DESLASH(NAME)(me string: tname)<-{initAndTest(tname, IN, OUT, true)}%>
#define GETFIRST (NAME, MSG, IN, OUT, SKIP) <%void: DESLASH(NAME)(me string: tname)<-{unitTestGETFIRST(tname, IN, OUT, SKIP)}%>
#define GETNEXT (NAME, MSG, IN, OUT, SKIP) <%void: DESLASH(NAME)(me string: tname)<-{unitTestGETNEXT(tname, IN, OUT, SKIP)}%>
#define GETFIRSTTIGHT (NAME, MSG, IN, OUT, SKIP) <%void: DESLASH(NAME)(me string: tname)<-{unitTestGETFIRSTTIGHT(tname, IN, OUT, SKIP)}%>
#define GETNEXTTIGHT (NAME, MSG, IN, OUT, SKIP) <%void: DESLASH(NAME)(me string: tname)<-{unitTestGETNEXTTIGHT(tname, IN, OUT, SKIP)}%>


struct GLOBAL {
    PARSETEST(parser/misc/tUnknown, "type unknown",     "?", "?")
    PARSETEST(parser/misc/isWord,   "parse a word",      "ImAWord ", "ImAWord")
    PARSETEST(parser/misc/isNot,    "Not word",          "!ImAWord", "!ImAWord")
    PARSETEST(parser/misc/world,    "World cursor",     "%W", "%W")
    PARSETEST(parser/misc/self,     "self cursor",      "%self", "%self")
    PARSETEST(parser/misc/args,     "args cursor",      "%args", "%args")
    PARSETEST(parser/misc/vars,     "vars cursor",      "%vars", "%vars")

    PARSETEST(parser/num/bare,      "Simple number",    "34", "34")
    PARSETEST(parser/num/plus,      "Positive number",  "+34", "+34")
    PARSETEST(parser/num/sized,     "Sized number",     "*64+34 ", "*64+34")
    PARSETEST(parser/num/divd,      "Sized number",     "/64-34", "/64-34")
    PARSETEST(parser/num/unknown,   "Unknown number",   "_", "_")
    PARSETEST(parser/num/neg,       "Negative number",  "-34", "-34")

    PARSETEST(parse/largenum,       "parse a large number", "12345678901234567890123456789012345678901234567890", "12345678901234567890123456789012345678901234567890")
    PARSETEST(parse/hexnum,         "parse a hex number",   "0x149F890204B24B57979284D4060E107E870B684045F15", "123456789123456789123456789123456789123456789123456789")
    PARSETEST(parse/binnum,         "parse a binary number","0b11001010101010101010101000001111", "3400182287")
    PARSETEST(parse/decimal,        "parse decimal number", "123.456", "123.456")
    NORMTEST(parse/frac,           "parse fraction number","123/246", "1/2")

    PARSETEST(parser/str/quote1,    "Single Quoted",    "'Hello There!'", "'Hello There!'")
    PARSETEST(parser/str/quote2,    "Double Quoted",    "\"Hello There!\"", "'Hello There!'")
    PARSETEST(parser/str/unknown,   "Unknown string",   "$", "$")
    PARSETEST(parser/str/sized,     "Size given",        "*4+$", "*4+$")

    PARSETEST(parser/list/simple,   "simple list",      "{'A' 12 {1 2 3}}", "{'A' 12 {1 2 3}}")
    PARSETEST(parser/list/time,     "time list",        "{T 'A' 12}", "{T 'A' 12}")
    PARSETEST(parser/list/empty,    "empty list",       "{}", "{}")
    PARSETEST(parser/list/unknown,  "Unknown list",     "{1 ... 3}", "{1 ... 3}")
    PARSETEST(parser/list/defClass, "define a class",   "{'A' class item {1 2 3} 12}", "{'A' class item {1 2 3} 12}")
    PARSETEST(parser/list/classed,  "classed list",     "{item| 'A' 12}", "{item| 'A' 12}")
    PARSETEST(parser/list/sized1,   "sized list1",      "{~2| 'A' 12}", "{~2| 'A' 12}")
    PARSETEST(parser/list/sized2,   "sized list2",      "{~2 'A' 12}",  "{~2| 'A' 12}")
    PARSETEST(parser/list/CandS1,   "Both specs1",      "{~ 2 item| 'A' 12}", "{~2 item| 'A' 12}")
    PARSETEST(parser/list/CandS2,   "Both specs2",      "{~2 item | 'A' 12}", "{~2 item| 'A' 12}")
    PARSETEST(parser/list/noC,      "No C",             "{item| 'A' 12}", "{item| 'A' 12}")
    PARSETEST(parser/list/partial,  "partial lists",    "{ {...} {1 ... } {1 ... 5} {}}", "{{ ... } {1 ... } {1 ... 5} {}}")
    PARSETEST(parser/list/embedded, "Embedded list",    "{1 2 &{3 4 5} 6 7}", "{1 2 &{3 4 5} 6 7}")
    PARSETEST(parser/list/concat,   "concated list",    "(1 2 3)", "(1 2 3)")
    PARSETEST(parser/list/square,   "square brackets",  "[1 2 3]", "[1 2 3]")
    const string: PLS_STR_in  <- "{2, 3, 4 , 5 }"
    const string: PLS_STR_out <- "{2, 3, 4, 5}"
    PARSETEST(parser/list/commas,   "comma list",       PLS_STR_in, PLS_STR_out)

    PARSETEST(parser/ident/bare,    "Simple identity",  "_=34", "_ = 34")
    PARSETEST(parser/ident/force,   "Force identity",   "123<<=456", "123 <<= 456")
    NORMTEST(merge/ident/force,     "Force identity",   "123<<=456", "456")

    PARSETEST(parser/func/right,    "Args on right",    "[_ 2 3]<:1", "[_ 2 3]<:1")
    PARSETEST(parser/func/left,     "Args on left",     "1:>[_ 2 3]", "1:>[_ 2 3]")
    PARSETEST(parser/func/rightInv, "Invert on right",  "[_ 2 3]<!1", "[_ 2 3]<!1")
    PARSETEST(parser/func/leftInv,  "Invert on left",   "1!>[_ 2 3]", "1!>[_ 2 3]")

    GETFIRST(unit/GFirst/t1,     "get first POV",      "{3 4 5}", "3", 0)
    GETFIRST(unit/GFirst/t2,     "get first POV",      "{}", "NULL", 0)
    GETFIRST(unit/GFirst/t3,     "get first POV",      "{...}", "t?", 0)
    GETFIRST(unit/GFirst/t4,     "get first POV",      "{...}", "NULL", 1)

    GETFIRSTTIGHT(unit/GFirstT/t1,     "get first POV tight",      "{3 4 5}", "3", 0)
    GETFIRSTTIGHT(unit/GFirstT/t2,     "get first POV tight",      "{&{1 2 3 }}", "1", 0)
    GETFIRSTTIGHT(unit/GFirstT/t3,     "get first POV tight",      "{&{}1 2 3}", "1", 0)
    GETFIRSTTIGHT(unit/GFirstT/t4,     "get first POV tight",      "{&{} &{}1 2 3}", "1", 1)
    GETFIRSTTIGHT(unit/GFirstT/t5,     "get first POV tight",      "{&{&{1 2 3}}}", "1", 1)
    GETFIRSTTIGHT(unit/GFirstT/t6,     "get first POV tight",      "{&{&{}} 1 2 3}", "1", 1)

    GETNEXT(unit/GNext/t1,       "get next POV",      "{3 4 5}", "{3 4 5 }", 0)
    GETNEXT(unit/GNext/t2,       "get next POV",      "{3 4 5 ...}", "{3 4 5 }", 1)
    GETNEXT(unit/GNext/t3,       "get next POV",      "{3 4 5 ...}", "{3 4 5 t? t? t? t?  Infinite Loop}", 0)

    GETNEXTTIGHT(unit/GNextT/t1, "get next POV tight",      "{3 4 5}", "{3 4 5 }", 0)
    GETNEXTTIGHT(unit/GNextT/t2, "get next POV tight",      "{3 &{} 4 5}", "{3 4 5 }", 0)
    GETNEXTTIGHT(unit/GNextT/t3, "get next POV tight",      "{3 &{4 5} 6}", "{3 4 5 6 }", 0)
    GETNEXTTIGHT(unit/GNextT/t4, "get next POV tight",      "{3 4 &{&{5}}}", "{3 4 5 }", 0)

    NORMTEST(merge/num/typed1,       "typed int merge 1",   "*16+10 = *16+10",  "*16+10")
    NORMTEST(merge/num/typed2,       "typed int merge 2",   "*16+_ = *16+9",    "*16+9")
    NORMTEST(merge/num/typed3,       "typed int merge 3",   "_ = *16+10",       "*16+10")
    NORMTEST(merge/num/typed4,       "typed int merge 4",   "*_+_ = *16+9",     "*16+9")
    NORMTEST(merge/num/typed5,       "typed int merge 5",   "*_+8 = *16+8",     "*16+8")
    NORMTEST(merge/num/typed6,       "typed int merge 6",   "*16+10 = *16+_",   "*16+10")
    NORMTEST(merge/num/typed7,       "typed int merge 7",   "*16+_ = *_+9",     "*16+9")

    //            Add tests with zero size / value, value larger than size, later: negative, fractional, expression.
    //            Add Rainy day tests: Mis-matched types, mis-matched sizes, mis-matched values

    NORMTEST(merge/str/typed1,       "typed str merge 1",   "*5+'Hello' = *5+'Hello'", "*5+'Hello'")
    NORMTEST(merge/str/typed2,       "typed str merge 2",   "*5+$ = 'Hello'",          "'Hello'")
    NORMTEST(merge/str/typed3,       "typed str merge 3",   "$ = 'Hello'",             "'Hello'")
    NORMTEST(merge/str/typed4,       "typed str merge 4",   "*_+$ = 'Hello'",          "'Hello'")
    NORMTEST(merge/str/typed5,       "typed str merge 5",   "'Hello' = *5+$",          "'Hello'")

    NORMTEST(merge/str/loose,        "loose str merge",     "$ == 'Hello'",             "'Hello'")
    NORMTEST(merge/str/looseSize,    "loose str merge",     "$ =: 'Hello'",             "*_+'Hello'")
    NORMTEST(merge/unknown/loose,    "unknown merge",       "? == 'Hello'",             "'Hello'")
    NORMTEST(merge/unknown/looseSize,"unknown merge",       "? ==: 'Hello'",            "*_+'Hello'")
    NORMTEST(merge/unknown/typed,    "typed merge",         "? = 'Hello'",              "'Hello'")
    NORMTEST(merge/func/loose,       "loose merge",         "[...] == 'Hello'",         "'Hello'")
    NORMTEST(merge/func/looseSize,   "loose merge",         "[...] =: 'Hello'",         "*_+'Hello'")
    NORMTEST(merge/func/typed,       "typed merge",         "[...] = 'Hello'",          "'Hello'")

    //            Add tests with zero size / value, value larger than size, later: negative, fractional, expression.
    //            Add Rainy day tests: Mis-matched types, mis-matched sizes, mis-matched values

    NORMTEST(merge/list/empty,       "Merge empty list",    "{} = {}", "{}")
    NORMTEST(merge/list/N_dots1,     "Merge N items ...",   "{{1 ... 4} 5} = {{1 2 3 4} 5}",           "{{1 &{2 3} 4} 5}")  // PRETTIFY
    NORMTEST(merge/list/N_dots2,     "Merge N items ...",   "{1 ... 4} = {1 2 3 4}",                   "{1 &{2 3} 4}")   // PRETTIFY
    NORMTEST(merge/list/N_dots3,     "Merge N items ...",   "*3+{...} = {1 2 3}",                      "{1 2 3}")
    NORMTEST(merge/list/dots,        "Merge to ...",        "*_+{...} = {2 3 4}",                      "{2 3 4}")
    NORMTEST(merge/list/dotsC,       "Merge cont to ...",   "{...} = {2 3 4 ...}",                     "{2 3 4 ... }")
    NORMTEST(merge/list/nums,        "Simple list merge",   "{_ _ _} = {2 3 4}",                       "{2 3 4}")
    NORMTEST(merge/list/misc,        "Merge misc items",    "*4+{3 _ $ *3+{...}} = *4+{3 4 'hi' {5 6 7}}", "{3 4 'hi' {5 6 7}}")
    NORMTEST(merge/list/multiID,     "Merge many idents",   "{_ _ _} = {_ 2 _} = { 1 _ _} = { _ _ 3}", "{1 2 3}")

    NORMTEST(merge/calcSize,         "Merge calc'd size",   "*(10)+5", "*10+5")

    NORMTEST(trav/list/withEmpty,    "traverse over {}",    "{{1 2} {} {_=3} _=4}",                    "{{1 2} {} {3} 4}")

    NORMTEST(merge/intersect/onRHS,  "When [] is on RHS",   "_ = *_+[5 6 7]",                          "*_+[t5 t6 t7]")

    NORMTEST(noRHS/dots/simple,      "Test dots in LHS",    "{...}",                                   "{ ... }")
    NORMTEST(noRHS/dots/nestedOut,   "Test nested LHS dots","{{...} _=5}",                             "{{ ... } 5}")
    NORMTEST(noRHS/dots/nestedIn,    "Test nested LHS dots","{1 _=2 3 ...}",                           "{1 2 3 ... }")
    NORMTEST(merge/dots/align1,      "Test 1 of alignment", "{1 ... 4}  = {_ 2 3 _}",                  "{1 &{2 3} 4}")   // PRETTIFY
    NORMTEST(merge/dots/align2a,     "R dots inside L dots","{{1 ... 5} 6}  = {{_ 2 ... 4 _} 6}",      "{*_+{1 &{2 &{ ... } 4} 5} 6}")   // PRETTIFY
    NORMTEST(merge/dots/align2b,     "R dots inside L dots","{1 ... 5}  = {_ 2 ... 4 _}",              "*_+{1 &{2 &{ ... } 4} 5}")   // PRETTIFY
    NORMTEST(merge/dots/align3,      "R dots on left of L", "{1 ... 6}  = {... &{4 5 6}}",             "*_+{1 &{&{ ... } 4 5} 6}")   // PRETTIFY
    NORMTEST(merge/dots/align4,      "Harder to detect end","{1 ... 5 _} = {... 4 5 6}",               "*_+{1 &{&{ ... } 4} 5 6}")   //"{1 ... 4 5 6}")
    NORMTEST(merge/dots/align4b,     "Ambiguous situation", "{1  4 ... 5 _} = {... 4 5 6}",            "{1 4 &{4 5 6 ... } 5 6}")
    NORMTEST(merge/dots/align5,      "Test 5 of alignment", "{1 ... 4 ...} = {... &{4 ...} 7}",        "{1 ... 4 ... 7}")

    NORMTEST(EmbeddedLists/LHS,      "Test &{} on LHS",     "{1 2 &{_ _} _} = {1 2 3 4 5}",    "{1 2 &{3 4} 5}")
    NORMTEST(EmbeddedLists/RHS,      "Test &{} on RHS",     "{1 2 _ _ _} = {1 2 &{3 4} 5}",    "{1 2 3 4 5}")
    NORMTEST(EmbeddedLists/eLHS,     "Test &{} on LHS",     "{1 2 &{} _} = {1 2 3}",           "{1 2 &{} 3}")
    NORMTEST(EmbeddedLists/eRHS,     "Test &{} on RHS",     "{1 2 _ _ _} = {1 2 &{} 3 4 5}",   "{1 2 3 4 5}")
    NORMTEST(EmbeddedLists/e_e,      "&{} on both sides",   "{1 2 &{} _ _} = {1 2 &{} 3 4}",   "{1 2 &{} 3 4}")
    NORMTEST(EmbeddedLists/f_f,      "&{..} on both sides", "{1 2 &{_ 4} _} = {1 2 &{3 _} 5}", "{1 2 &{3 4} 5}")

    NORMTEST(getLastItem/simple,     "Test getLast",        "[2 3 4 5]", "5")
    NORMTEST(getLastItem/embedded,   "getLast with &{}",    "[2 3 4 &{5 6 7}]", "7")
    NORMTEST(getLastItem/list,       "getLast with {}",     "[2 3 4 {5 6 7}]", "{5 6 7}")
    NORMTEST(getLastItem/intID,      "getLast int",         "[2 3 _] = 5", "5")
    NORMTEST(getLastItem/strID,      "getLast str",         "[2 3 $] = 'hello'", "'hello'")
    NORMTEST(getLastItem/listID,     "getLast list",        "[7 8 9 {...}] = {1 2 3}", "{1 2 3}")
    NORMTEST(getLastItem/intIDQ,     "getLast int Q",       "[2 3 ?] = 5", "5")
    NORMTEST(getLastItem/strIDQ,     "getLast str Q",       "[2 3 ?] = 'hello'", "'hello'")
    NORMTEST(getLastItem/listIDQ,    "getLast list Q",      "[2 3 ?] = {4 5 6}", "{4 5 6}")

    NORMTEST(altSelect/simple,       "Select alternate",    "3 = *_+[2 3 4]", "3")

    NORMTEST(pushArg/rightFirst,     "test right arg",      "{_ 6 _}<:5", "{5 6 _}")
    NORMTEST(pushArg/leftFirst,      "test left arg",       "5:>{_ 6 _}", "{5 6 _}")
    NORMTEST(pushArg/rightLast,      "test right inverse",  "{_ 6 _}<!7", "{_ 6 7}")
    NORMTEST(pushArg/leftLast,       "test left inverse",   "7!>{_ 6 _}", "{_ 6 7}")

    NORMTEST(concat/oneItem,         "Test null concat",    "('Hello')", "'Hello'")
    NORMTEST(concat/simpleStr,       "simple string concat","('Hello' ' there' ' world')", "'Hello there world'")
    NORMTEST(concat/twoNums,         "Test small concat",   "{1 (*8+4 *4+3) 3}", "{1 *32+19 3}")
    NORMTEST(concat/strCat,          "string concat",       "(('Hello' ' There!' (' How' ' are' (' you' ' Doing') '?')))", "'Hello There! How are you Doing?'")
    NORMTEST(concat/numCat,          "integer concat",      "((*5+2 *6+3 (*7+4 *8+5 (*9+6 *10+7) *1+8)))", "*151200+79005")
    NORMTEST(concat/simpleList,      "simple list",         "({1 2} {} {3 4})", "{1 2 3 4}")
    NORMTEST(concat/listCat,         "list concat",         "(({1 2} {} {3} ({4 5} ({} {6 7}) {8} {})))", "{1 2 3 4 5 6 7 8}")
    NORMTEST(concat/parseSrc,        "Parse a concatenated string", "[*4+$ *10+$] <~ ('DO' 'gsTin' 'tinabulation')", "'Tintinabul'")  // FAILS until better concat support
//    /*TODO*/ NORMTEST(concat/toNum, "Convert strings and lists to numbers", "(7 'Hi' *32+20 'bye')", "")
//    /*TODO*/ NORMTEST(concat/toStr, "Convert numbers and lists to strings", "", "")
//    /*TODO*/ NORMTEST(concat/sizeTst,"Test calculation of the size of concats", "", "")

    NORMTEST(tUnknown/simple,         "test isolated tUnknown",   "?",  "?")
    NORMTEST(tUnknown/simple2,        "test tUnknown = ?",    "?=?",  "?")
    NORMTEST(tUnknown/unknownIsNum,   "test tUnknown = _",    "?=_",  "_")
    NORMTEST(tUnknown/unknownIsStr,   "test tUnknown = $",    "?=$",  "$")
    NORMTEST(tUnknown/unknownIsLst1,  "test tUnknown = {}",   "?={2 3 4}",  "{2 3 4}")
    NORMTEST(tUnknown/unknownIsLst2,  "test tUnknown = {}",   "{?={2 3 4}}",  "{{2 3 4}}")

    NORMTEST(parse/parse3n4,    "3 char then 4 char strings", "{*3+$ *4+$} == 'CatDogs'", "{'Cat' 'Dogs'}")
    NORMTEST(parse/catHatDogPig,"4 three char strings",       "*4 +{*3+$|...} ==: 'catHatDogPig'", "{'cat' 'Hat' 'Dog' 'Pig'}")
    NORMTEST(parse/simple2,     "Simple Parsing 2",           "{*3+$|...}=='CatHatBatDog' ", "{'Cat' 'Hat' 'Bat' 'Dog'}")
    NORMTEST(parse/inner,       "Inner parsing 1",            "{ {*3+$}|...}=='CatHatBatDog' ", "({{'Cat' } {'Hat' } {'Bat' } {'Dog' }})")
    NORMTEST(parse/get2nd,      "Parse select 2nd",           " [...] == 'ARONdacks' = {'AARON' 'ARON'}", "'ARON'")
    NORMTEST(parse/reps1,       "Parse repetition",           "{{'A'|...} 'R'} ==: 'AARON'", "{{'A' 'A'} 'R'}")
    NORMTEST(parse/reps2,       "Parse repetition",           "{{'A'|...}'AARON'} == 'AAAARON'", "{{'A' 'A'} 'AARON'}")
    NORMTEST(parse/innerID,     "No parent worklist",         "{1{{2 _=3}}}", "{1 {{2 3}}}")
    NORMTEST(parse/grouping1,   "Group into pairs 1",         "{{_ _}|...} == {1 2 3 4 5 6 7 8}", "{{1 2} {3 4} {5 6} {7 8}}")
    NORMTEST(parse/grouping2,   "Group into pairs 2",         "{*2+{...}|...} == {1 2 3 4 5 6 7 8}", "{{1 2} {3 4} {5 6} {7 8}}")

    NORMTEST(func/simpleList1,  "test func = list",           "[...] = {1 2 3}", "{1 2 3}")
    NORMTEST(func/simpleList2,  "test func == list",          "[...] == {1 2 3}", "{1 2 3}")
    NORMTEST(func/simpleList3,  "test func ==: list",         "[...] ==: {1 2 3}", "*_+{1 2 3}")
    NORMTEST(func/anonFunc1,    "test anon functions",        "[_ 456 789] <: +123", "789")

//MULTITEST(tags/defUse,       "define and use a tag", "&color=&{*_+_ *_+_ *_+_}  &size=#*_+_  \n color  //:&{_ _ _ }")
//MULTITEST(tags/nestedEmpty,  "nested empty tags", "&frame = {?|...}  &portal = {frame|...} \n portal=*4+{frame|...}  //:{{...} {...} {...} {...} }")
//MULTITEST(tags/taggedFunc,   "Two argument function defined with a tag", "(&func=[+{_, _} +{%\\:[_] %\\:[_, _]  %\\:[_]}]  )" "\nfunc<: +{9,4}  //:{*1+9 *1+4 *1+9 }")
//MULTITEST(simpleParse1,      "Simple parsing 1", "{*_ +{'A'|...} 'AARON'} ==  'AAAARON' // This is a comment" "(//:{{"A" "A" } "AARON" })")
//MULTITEST(ParseSelect2nd,    "Parse & select option 2", "[...]=='ARONdacks' :== {'AARON' 'ARON'} " "(//:"ARON")")
    NORMTEST(parse/select1st,    "Parse & select option 1", "[...]=='AARONdacks' :== {'AARON' 'ARON'} ", "('AARON')")
    NORMTEST(parse/2Itms,        "Two item parse", "{[...] :== {'AARON' 'BOBO' 'ARON' 'AAAROM'}   'dac'} ==  'ARONdacks'", "({'ARON' 'dac' })")
    NORMTEST(parse/2ItmsGet1st,  "Two item parse: get first option", "{[...] :== {'ARON' 'BOBO' 'AARON' 'CeCe'}   'dac'} ==  'ARONdacks'", "({'ARON' 'dac' })")

    NORMTEST(innr/oneOf,         "Choose one of", "[...]=='AARONDacs' <~ {'ARON' 'AARON' 'ERIN'}", "'AARON'")

//   #('1', 'Two item parse; error 1', r'{[...] :== {"AARON" "BOBO" "ARON" "AAAROM"}   "dac"} ==  "ARONjacks"', '<ERROR>'), #NEXT-TASK // No dac, only jac
//   #('1', 'Two item parse; error 2', r'{[...] :== {"AARON" "BOBO" "ARON" "AAAROM"}   "dac"} ==  "slapjacks"', '<ERROR>'), #NEXT-TASK // slap doesn't match.

//////////////////////////////////////////////////////////////
    NORMTEST(query/first,       "Get first item",           "*1+['Cat' 'Hat' 'Bat' 'Dog']", "'Cat'")
    NORMTEST(query/getNth,      "Get Nth item",             "*3+['Cat' 'Hat' 'Bat' 'Dog']", "'Bat'")
    MULTITEST(query/getNthSub,  "Get Nth item",             "{@myLst={'Cat' 'Hat' 'Bat' 'Dog'}}\n*3+[& myLst]//:'Bat'")
    MULTITEST(query/getNthSub2, "Get Nth item",             "{@Axx={bat:{cat:{dog:{eel:{fox:{AA:'aaa' BB:'bbb' CC:'ccc' DD:'ddd'}}}}}}}\n*3+[& Axx.bat.cat.dog.eel.fox]//:cc:'ccc'")
    NORMTEST(query/firstStrA,   "Get first String",         "[&{&{_|...} $} =: {2 3 'Cat' 'Hat'}]", "'Cat'")
    NORMTEST(query/firstStrB,   "Get first String",         "[&{_|...} $]<~{2 3 'Cat' 'Hat'}", "'Cat'")
    NORMTEST(query/firstStrC,   "Get first String",         "[&{!$|...} $]<~{2 {'Hi' 3 } 4 'Cat' 'Hat'}", "'Cat'")

    NORMTEST(write/writeStrA,   "Write first String",        "{2 3 $ 'Hat'}.$ = 'Cat';", "{2 3 'Cat' 'Hat'}")
    NORMTEST(write/writeByIdx,  "Write third item",          "{'Cat' 'Hat' $ 'Dog'}#3 = 'Bat';", "{'Cat' 'Hat' 'Bat' 'Dog'}")
    NORMTEST(write/first,       "Write first item",          "{$ 'Hat' 'Bat' 'Dog'}.first = 'Cat';", "{'Cat' 'Hat' 'Bat' 'Dog'}")
    NORMTEST(write/last,        "Write last item",           "{'Cat' 'Hat' 'Bat' $}.last = 'Dog';", "{'Cat' 'Hat' 'Bat' 'Dog'}")
    NORMTEST(write/1stAndLst,   "Write 1st & last item",     "{$ 'Hat' 'Bat' $}.first='Cat';.last='Dog';", "{'Cat' 'Hat' 'Bat' 'Dog'}")

    NORMTEST(read/readStrA,     "Read first String",        "{2 3 'Cat' 'Hat'}.$", "'Cat'")
    NORMTEST(read/readByIdx,    "Read third item",          "{'Cat' 'Hat' 'Bat' 'Dog'}#3", "'Bat'")
    NORMTEST(read/first,        "Read first item",          "{'Cat' 'Hat' 'Bat' 'Dog'}.first", "'Cat'")
    NORMTEST(read/last,         "Read last item",           "{'Cat' 'Hat' 'Bat' 'Dog'}.last", "'Dog'")

    MULTITEST(word/types,       "Check types1",             "{@position=_ @torque=_ @pedals={...}}\npedals:{position=321 torque:4}//:pedals:{position:321 torque:4}")
    MULTITEST(word/deref,       "deref word1",              "{@tag={1 2 3}}\ntag//:tag:{1 2 3}")
    NORMTEST (word/useTags,     "Usage tags",               "{@howdy <en_US southern slang> ='hello'}", "{@howdy <en_US southern slang >= 'hello'}")
    //WORLDTEST(word/wordID,      "Sets wordID",              "world.localeTest.pr",  "{wordA_wn123}//:{wordA_wn123:'wordA for en_US and wn123'}")
    //WORLDTEST(word/locale,      "Test locales",             "world.localeTest.pr",  "{wordA}//:{wordA:*_+['wordA for en_US' 'wordA for en_US and wn246' 'wordA for en_US and wn123' 'wordA for en_US and wn456']}")

    MULTITEST(query/firstType,  "Find by type",  "{@wheel='wheel' @chain='chain' @seat='seat'}\n [&{wheel|...} chain]<~{wheel wheel chain seat}//:chain:'chain'")
    MULTITEST(query/byType1,    "Find by type",  "{@pedals={position:_ torque:_} @wheel={position:_ torque:_}}\n{pedals:{position:321 torque:4} wheel:{position:210 torque:5} breaks}.wheel//:wheel:{position:210 torque:5}")
    MULTITEST(query/chain,      "Find by type",  "{@pedals={position:_ torque:_} @wheel={position:_ torque:_}}\n{pedals:{position:321 torque:4} wheel:{position:210 torque:5} breaks}.wheel.position//:position:210")
    MULTITEST(query/chain2,     "Find by type",  "{@color=$ @length=_ @spoke={color:$ length:_} @wheel={position:_ torque:_ spoke} @pedals={position:_ torque:_} @bike={pedals wheel}}\n {pedals:{position:321 torque:4} wheel:{position:210 torque:5 spoke:{length:234}}}.wheel.spoke.length //:length:234")
    MULTITEST(query/chain3,     "Find by type",  "{@color=$ @length=_ @spoke={color:$ length:_} @wheel={position:_ torque:_ spoke} @pedals={position:_ torque:_} @bike={pedals wheel}}\n {pedals:{position:321 torque:4} wheel:{position:210 torque:5 spoke:{length:_}}}.wheel.spoke.length=123; //:spoke:{length:123}")
    MULTITEST(query/chain4,     "Find by type",  "{@color=$ @length=_ @spoke={color:$ length:_} @wheel={position:_ torque:_ spoke} @pedals={position:_ torque:_} @bike={pedals wheel}}\n {pedals:{position:321 torque:4} wheel:{position:210 torque:5 spoke:{length:_}}}.wheel.spoke.length=123;; //:wheel:{position:210 torque:5 spoke:{length:123}}")

    MULTITEST(parse/lang,       "Complex parse", "{@Fri='Fri'}\n{@Sat='Sat'}\n{@Sun='Sun'}\n{@statement=*_+[ Fri Sat Sun]}\n{@littleLang={statement|...}}\nlittleLang == 'SatFriSunSat'//:littlelang:{sat:'Sat' fri:'Fri' sun:'Sun' sat:'Sat'}")

    MULTITEST(outr/test1,       "Outer test1",   "{shape| &*2+{circle|...} &*2+{square|...}}={1 2 3 4}") // !!!!!!!!!!!!!! Doesn't test anything. Fix it!
    MULTITEST(outr/everyOther,  "Every 2nd",     "{[_ _]| ...} <~ {1 2 3 4 5 6 7 8}//:{2 4 6 8}")

    NORMTEST(neg/simple,        "Negative cnvt",    "*10-1",   "*10+9")
    NORMTEST(fracs/simple,      "simple",           "*10+8/2", "*10+4")

    NORMTEST(range/join,        "Range joins",      "*10+(2+3)", "*10+5")
    NORMTEST(range/select1,     "Select in range",  "{[&{!(*4+_ +2)|  ... } (*4+_ +2)] | ...} <~ {1 2 0 3 4 5 6 7}", "{2 3 4 5}")
    NORMTEST(range/select2,     "Select in range",  "{[&{!*4+_|  ... } *4+_] | ...} <~ {1 2 0 3 444 555 666 777 2}", "{1 2 0 3 2}")
    NORMTEST(range/select3,     "Select in range",  "{[&{!*4+_|  ... } *4+_] | ...} <~ {1 *3+_  5 *4+(*2+_ +1)  *4+_  }", "{1 *4+_ *4+(*2+_ +1) *4+_}")
    NORMTEST(range/concat1,     "Overlapping range","*10+(*5+_+2) = *10+(*4+_+5)", "*10+(*2+_ +5)")
    NORMTEST(range/dot,         "Find with dot",    "{1 0 6 7 8 4 5 6 7}.*10+(*3+_+2) ", "4")
    NORMTEST(range/alts,        "Select alts",      "{[&{!*_+[*10+(*3+_+2) *10+(*3+_+6)]|  ... } *_+[*10+(*3+_+2) *10+(*3+_+6)]] | ...} <~ {1 2 3 4 5 6 7 8 9}", "{2 3 4 6 7 8}")
    //NORMTEST(range/neg,          "Find Negative",    "{[&{(*4+_ -2)|  ... } !(*4+_ -2)] | ...} <~ {1 -2 0 -3 -4 5 6 -7}", "{2 3 4 5}")
    //NORMTEST(slice/select,      "Select slice",     "[& *3+{...} *4+{...}] <~ {3 4 5 6 7 8 9 0}", "{2 3 4 5}")


    // NATURAL LANGUAGE RELATED TESTS
    NORMTEST(lang/splitText,   "Split English text",  '{english-text:"Whoever says they can\'t is right"}', "{english-phrase:{whoever says they can't is right}}")

NORMTEST(temp/t1,     "Merge many idents",   "_=_=321", "321err")
    WORLDTEST(user/getUser,    "getUser",  "user.pr",   "%W.bruceLong//:brucelong:{1 2 3}")
    WORLDTEST(user/getUser3,   "getUser",  "user_3.pr", "%W.bruceLong.projects.properties.title//:title:'Slipstream Projects'")
    WORLDTEST(user/getNth,     "getNth",   "user_3.pr", "*2 + [& %W.bruceLong.projects.data.boardElement.data.TaskList.data].properties.member//:member:'Tiffany'")
    //WORLDTEST(sugar/getNth,    "getNth",   "user_3.pr", "%W.bruceLong.projects.data.boardElement.data.TaskList.data#(2).properties.member//:member:'Tiffany'")
    //WORLDTEST(sugar/getNth,    "getNth",   "user_2.5.pr", "%W.goat#(2).ibex//:ibex:'bbb'")
    WORLDTEST(user/setNth,     "setNth",   "user_3.pr", "*2 + [& %W.bruceLong.projects.data.boardElement.data.TaskList.data].properties.member <<= 'KTiffany'\n*2 + [& %W.bruceLong.projects.data.boardElement.data.TaskList.data].properties.member//:member:'KTiffany'")
    const string: setColorOut <- "color:{hue:0, saturation:5, brightness}"
    WORLDTEST(word/setColor,    "setColor",  "bike.pr",   "color=red//:"+setColorOut)

    const string: adj1_in <- "{{color=red, ...} { name=Bob, color=blue, ...} {color=green, ...} {name=Wally, color=blue, ...}}.{color=blue, ...}"
    const string: adj1_out<- "{ name=Bob, color=blue, ...}"
    WORLDTEST(search/adj1,     "Search by adjective", "bike.pr",  adj1_in+"//:"+adj1_out)

NORMTEST(time/t1,     "Simple T-infon",   "*5+{T _ | 1 ...}", "321err")
//////////////////////////////////////////////////////////////
// Test functions need to do one of these 3:
//    parse&Extract                           |  call parseAndExtract()
//    InitCORE -> parse&Extract               |  init_manually then call testLine(..., false)  OR  call initAndTest(..., false)
//    InitCORE -> parse&Extract -> normalize  |  init_manually then call testLine(..., true)   OR  call initAndTest(..., true)


    our infon: parseAndExtract(me string: testName, me string: data) <- {
        // InitParser -> parse -> extract
        me ProteusParser: parser{NULL, false, 0}
        parser.initParseFromString(testName, data)
        our infon:: parsedInfon
        parser.doParse(parsedInfon)
        if(parser.doesParseHaveError()){return(NULL)}
        return(parsedInfon)
    }
    me void: testLine(me string: testName, our Agent: agent, me string: in, me string: expected, me bool: doNorm) <- {
        // ParseAndExtract -> maybe normalize() -> check REQUIREMENT
        our infon: testInfon <- parseAndExtract(testName, in)
        if(testInfon == NULL){FAIL("Syntax Error in input: " + in)}
        our POV:: testPov; testPov.pItem <- testInfon
        if (doNorm){agent.normalize(testPov)}
        me string:result <- toString(testPov.pItem)
        if(expected!=""){REQUIRE(result==expected)}
        return()
    }
    me void: initAndTest(me string: testName, me string: in, me string: expected, me bool: doNorm) <- {
        me ProteusCore: CORE
        CORE.init("", false)
        testLine(testName, CORE.agent, in, expected, doNorm)
        return()
    }
    me void: unitTestGETFIRST(me string: testName, me string: in, me string: expected, me int64: skipDots) <- {
        me string: result
        our infon: testVector <- parseAndExtract(testName, in)
        our POV:: testPOV
        testPOV.pItem <- testVector
        our POV: resultPOV <- testPOV.getFirst(skipDots, NULL)
        if(resultPOV == NULL){result <- "NULL"}
        else{result <- toString(resultPOV.pItem)}
        REQUIRE(result==expected)
        return()
    }
    me void: unitTestGETFIRSTTIGHT(me string: testName, me string: in, me string: expected, me int64: skipDots) <- {
        me string: result
        our infon: testVector <- parseAndExtract(testName, in)
        our POV:: testPOV
        testPOV.pItem <- testVector
        our infItr:: ii
        ii.topPOV <- testPOV
        me int64: numLvlsUp
        our POV: resultPOV <- testPOV.getFirstTight(ii, skipDots, numLvlsUp, NULL, NULL)
        if(resultPOV == NULL){result <- "NULL"}
        else{result <- toString(resultPOV.pItem)}
        REQUIRE(result==expected)
        return()
    }
    me void: unitTestGETNEXT(me string: testName, me string: in, me string: expected, me int64: skipDots) <- {
        me string: result <- "{"
        our infon: testVector <- parseAndExtract(testName, in)
        our POV:: testPOV
        testPOV.pItem <- testVector
        our POV: CP  <- testPOV.getFirst(skipDots, NULL)
        me int: count <- 0
        while(CP != NULL ){
            if(count > 6){result <- result + " Infinite Loop"; break()}
            if(CP == NULL){result <+- "NULL "}
            else{result <+- toString(CP.pItem)+ " "}
            CP <- CP.getNext(skipDots, NULL)
            count <+- 1
        }
        result <+- "}"
        REQUIRE(result==expected)
        return()
    }
    me void: unitTestGETNEXTTIGHT(me string: testName, me string: in, me string: expected, me int64: skipDots) <- {
        me string: result <- "{"
        our infon: testVector <- parseAndExtract(testName, in)
        our POV:: testPOV
        testPOV.pItem <- testVector
        our infItr:: ii
        ii.topPOV <- testPOV
        me int64: numLvlsUp
        our POV: CP  <- testPOV.getNextTight(ii, skipDots, numLvlsUp, false, true, NULL, NULL)
        me int: count <- 0
        while(CP != NULL ){
            if(count > 6){result <- result + " Infinite Loop"; break()}
            if(CP == NULL){result <+- "NULL "}
            else{result <+- toString(CP.pItem)+ " "}
            CP <- CP.getNextTight(ii, skipDots, numLvlsUp, false, false, NULL, NULL)
            count <+- 1
        }
        result <+- "}"
        REQUIRE(result==expected)
        return()
    }
    me void: processTestLine(me string: testName, our Agent: agent, me string: line) <- {
        me int: pos           <- findString(line, "//:")
        me string: testInput
        me string: expected
        if(pos==-1){
            testInput  <- line
            expected <- ""
        }else{
            testInput  <- line.subStr(0,pos)
            expected <- line.subStr(pos+3,line.size())
        }
        log("IN:<"+testInput+">  EXPECTED:<"+expected+">")
        testLine(testName, agent, testInput, expected, true)
    }
    me void: multiNorm(me string: testName, me string: in, me string: worldFileName) <- {
        infonPrinter.debugPrint <- true
        me ProteusCore: CORE
        CORE.init(worldFileName, false)
        if(worldFileName!=""){
            our POV:: testPov; testPov.pItem <- CORE.WORLD
            CORE.agent.normalize(testPov)
        }
        me string: line <- ""
        withEach charPos in RANGE(0..in.size()){
            if(in[charPos]=="\n"){
                processTestLine(testName, CORE.agent, line)
                line <- ""
            }else{line <+- in[charPos]}
        }
        if(line!=""){processTestLine(testName, CORE.agent, line)}
        modelMngr.clear()
    }
}
